{
  "34": [
    "Our Catalogue: This endpoint allows developers to view our inventory catalogue with inventory quantities, product images, product descriptions, etc.",
    "Search on ebay: Enter anything you want to search for on Ebay website.",
    "Hot Products: Get hot products by search value, you can set maximum search price too. You will get up to 50 results.",
    "listoforders: API Instructions: https://www.ecombr.com/instrucoes-api-i-28.html\n\nSell on ecombr.com marketplace: https://www.ecombr.com/vender-no-ecombr-i-26.html",
    "getProducts: This endpoint gets all products in the database.\n\nA list of products in the store, with the following attributes:\n\nid (integer): The unique identifier for the product.\ntitle (string): The name of the product.\ncategory (string): A description of the product.\nprice (number): The price of the product.\nimage_url (string): A URL to an image of the product.",
    "getProductByName: This endpoint filters through the products database and brings out results based on the preferences you want.\n\nFor a valid response, it takes a path parameter which is required which takes the name of the product you would want.",
    "getProductByCategory: Do you want to search for a product by category?\nUse the category of the product in the path parameter.\n\nFor example,\nAre you looking for Phones? Use Phones in your path parameter",
    "Search Products: Search for products on Ebay in specific country.\nReturns the `last_page` that can be scraped for the specific `search_query`.\nDefault country is `United States`.\nSpecify country with country name or country code.\n\nAllowed countries:\nDefault: `us`\n- Germany (de)\n- France (fr)\n- Australia (au)\n- Austria (at)\n- Canada (ca)\n- Hong Kong (hk)\n- Ireland (ie)\n- Italy (it)\n- Malaysia (my)\n- Netherlands (nl)\n- Singapore (sg)\n- Switzerland (ch)\n- United Kingdom (uk)",
    "Get Search Results from Amazon: Get Search Results from Amazon",
    "Get Products: Get all products in the store"
  ],
  "116": [
    "GST: Used to verify GST Number",
    "GST Number Search Tool & GSTIN Verification Online: GST Number Search Tool & GSTIN Verification Online",
    "Verify PAN Card: Instant PAN Card Verification using government database check.\n\nThis PAN Card Verification API instantly verifies details of a PAN Card by confirming them from the Government database.\n\nThis makes your onboarding process faster, safer and smarter. With our PAN verification, you can be confident that the individuals or merchants you onboard hold a valid PAN card and have provided you with the right identity proof.",
    "SOLVE: Solve every Sudoku. Simply make an API call with missing digits and receive the answer back immediately. Choose from different output formats to display your Sudoku perfectly.",
    "VERIFY: Check any solved (as well as *unsolved!*) Sudoku for authenticity and integrity.",
    "T2G-Kurs-Check: Kurs check of IDR to another valuta",
    "is prime: checks if a number is prime",
    "Validate WA number: enter the number you want to validate.\nLearn how to use it on this [video](https://youtu.be/_h5ybzp9UNU).",
    "TIN Lookup: Through this operation you know if the tin number is valid or not and more information",
    "TIN Check: Through this operation you know if the tin number is valid or not"
  ],
  "90": [
    "/api/vcodes-api.php?siteid={siteid}: Free Coupon Codes",
    "/v1/{network}: BlockTrail API Endpoint",
    "/v1/geocoding: API Ninjas Geocoding API endpoint.",
    "api: Auto generated using Swagger Inspector",
    "/api/v1: Subdomain Lookup API",
    "Get API Logs: Get all of the logs for a particular API.",
    "Get API Subscriptions: Get information about all of the subscriptions to a specified API.",
    "Search for public APIs: Get all public APIs by specific terms.",
    "Get API Log Details: Get API logs details information, including `endpoint`, `http method`, `payload` and more.",
    "Get API Subscription: Get information about a specific subscription to a specified API."
  ],
  "142": [
    "TestEndpoint: test only",
    "test: this is test",
    "teste: teste",
    "teste: teste",
    "apitest: aaaaaaaaaaaaaaaa",
    "MouldInformation: test",
    "TEST: Testing",
    "testBatmanApi: API for test project batman",
    "Api test: test",
    "Chinese Firewall Test: Checks whether a site is blocked by the Great Firewall of China. This test checks across a number of servers from various locations in mainland China to determine if access to the site provided is possible from behind the Great Firewall of China.   This test checks for symptoms of DNS poisoning, one of the more common methods used by the Chinese government to block access to websites."
  ],
  "101": [
    "Product by ID: Get entirely a single product and all possible values comes from it including images, videos and all product data.",
    "Get a specific item: This will return a specific item from the collection ..,simpily write the id of the product and you will get the product",
    "Product details: Get shopee product details",
    "get product: get product",
    "product_id: Get Aliexpress Data by Product Id",
    "Get Product Detail: Get Product Detail By Provide Slug",
    "Get Product Details from Amazon: Get Product Details from Amazon",
    "Product details: Query product details information.",
    "Get 1688 product detail: Get 1688 product detail",
    "Get product detail: Get product detail"
  ],
  "48": [
    "GET Call: Used to fetch api result using the request id received in responses.",
    "GET Call: Used to fetch api result using the request id received in responses.",
    "GET Call: Used to fetch api result using the request id received in responses.",
    "GET Call: Used to fetch api result using the request id received in responses.",
    "GET Call: Used to fetch api result using the request id received in responses.",
    "GET Call: Used to fetch api result using the request id received in responses.",
    "GET Call: Used to fetch api result using the request id received in responses.",
    "GET Call: Used to fetch api result using the request id received in responses.",
    "GET Call: Used to fetch api result using the request id received in responses.",
    "GET Call: Used to fetch api result using the request id received in responses."
  ],
  "78": [
    "checkDisposableEmail: REST API to lookup disposable email",
    "emailValidation: Clean your email list database with our free email checker and verifier",
    "mailcheck: Check if e-mail domain is valid, or a disposable/temporary address. Invalid domains (typos, non-responding mailserver, etc) will return \"valid: false\", \"block: true\". Disposable e-mail domains will return \"valid: true\" (since it's a valid domain), but \"block: true\" and \"disposable: true\".",
    "clickbank: email marketing",
    "subscribe: add email for additional savings",
    "Data Breach Checker Endpoint: The Data Breach Checker API provides a simple endpoint for users to check if their email has been compromised in any known data breaches.",
    "Manage Alerts: Send an email containing a link to manage your alerts.",
    "Check Temporary Email: Check if a domain is a known temporary email",
    "Verify Email: To verify a single email address",
    "Spam Database Lookup: Find out if your mail server is listed in any spam databases."
  ],
  "163": [
    "newlyRegisteredDomains: REST API to lookup newly registered domains",
    "whois: REST API to WhoIS lookup data",
    "Whois History (v1): Check Whois  record's history",
    "Domain Reputation: Evaluate reputation of a domain or IP (v1)",
    "/whoisserver/DNSService: DNS Lookup API",
    "WHOIS lookup v2: WHOIS lookup in JSON or XML, ver. 2",
    "Website Contacts (v1): Get full contact information from page, domain or web (v1)",
    "domain detail: get detail by did",
    "domain type: \u5c55\u5225\u985e\u578b",
    "whois: Use this endpoint for fetch whois data"
  ],
  "141": [
    "Get all the shoes: This end point return the collection of shoes",
    "List Services: List all of the services within your account",
    "Search All: Returns all vault keys",
    "Get complete package list: Get all available packages in database by ID.",
    "get classes infomation: get all classes",
    "get classes infomation: get all classes",
    "Get All Brands: Get All Brands",
    "get all teas: get all type of teas",
    "Get all Billing Plans: Get all Billing Plans",
    "Get all Roles: Get all Roles"
  ],
  "15": [
    "Posts: Get posts of a Creator with the `creator_id`. The `cursor` to the next page will be returned with this request.",
    "Get User Subscription: Get info on an existing subscription",
    "Get Blogs Feed: Returns Blogs Feed.",
    "Get ALL Feed: Returns all feed.\nTweets\nBlogs\nBinance\nUsGov",
    "getMaxStreak: Get the max streak of the user in the current user",
    "Feed: Get the latest posts on a user's feed",
    "Get Stream Game Name: Get  Stream Game Name (by username or id)\n( return an empty JSON object if not currently LIVE )",
    "Get Stream Mature Content Status: Get Stream Mature Content Status (using username or id)\n( return an empty JSON object if not currently LIVE )",
    "Get Stream Number of Viewers: Get Stream Number of Viewers (using username or id)\n( return an empty JSON object if not currently LIVE )",
    "Get All Active Stream Infos: Get a Stream Informations if the status is Online (by username or id)\n( return an empty JSON object if not currently LIVE )"
  ],
  "58": [
    "Details: Get the details and general information of a Creator with the `creator_id`.",
    "Profile: Profile",
    "User profile: Get user profile",
    "Get User Profile: This endpoint fetches a user's profile.",
    "User profile: Get user profile",
    "Get User Profile: This endpoint fetches a user's profile.",
    "User profile: Get user profile",
    "Get Locales List: You can use this API to get the list of available locales \nWhich can be used to generate profile APIs response.",
    "Get Sample UserProfile: Use this API to get fake-generated user Profile sample data.\nBy default, it will generate \"en\"  locale for a single count.\nIf count query is greater than 1 it will randomize the generated profiles \nto a different locale. \nTo set a default locale pass it as the query.List of the locale you can get from locale API.\nIn case of the wrong locale is given it will return the result based on default settings as mentioned above.",
    "User Aliases: Get a list of user aliases and when they were changed."
  ],
  "93": [
    "Search for Creators: Search for Creators on Patreon using the `search_query`.",
    "Search products: Search product & Paginate",
    "findAllListingActive: Finds all active Listings. (Note: the sort_on and sort_order options only work when combined with one of the search options: keywords, color, tags, location, etc.)",
    "Search Product: Search The Product",
    "Multi Search: The multi search capability covers all content hosted on Genius (all sections).",
    "Search: Search",
    "/search: Search for songs, artists that match input term",
    "Search: Search",
    "Search: Search",
    "Search: Search Spotify"
  ],
  "88": [
    "HaloBiru: HaloBiru,store",
    "789club New: 789CLUB \u2013 Nh\u00e0 c\u00e1i game b\u00e0i \u0111\u1ed5i th\u01b0\u1edfng m\u1edbi nh\u1ea5t. \u0110a d\u1ea1ng tr\u00f2 ch\u01a1i: game b\u00e0i, b\u1eafn c\u00e1, n\u1ed5 h\u0169. \nWebsite: https://789club.news/",
    "Hi: HI",
    "para: yes we are",
    "Open variation: Open the specified variation.",
    "imtired: imtiredss sada sd asdas",
    "Global Terrain Raster: Global Terrain Rastertiles.",
    "Global Terrain Winter: Global Terrain Tiles with winter colors.",
    "Planet Vector Tiles: Global planet vector tiles.",
    "Terrain RGB: Global TerrainRGB Tiles."
  ],
  "47": [
    "Get Prices: Retrieves used prices of all GPUs, the following prices are in USD.",
    "Disclaimer: we do not guarantee  product safety or prices",
    "price: Get latest average price for manufacturer number",
    "Edit Alert: Set or remove a price alert.",
    "Get Price History By ID: For a given ID, get the price history together with the number of items sold.",
    "latest price: gives the latest price for the given itemID and timestep",
    "3.Getestimatedprice: This is a method for calculating the approximate price in cryptocurrency for a given value in Fiat currency. You will need to provide the initial cost in the Fiat currency (amount, currency_from) and the necessary cryptocurrency (currency_to)\nCurrently following fiat currencies are available: usd, eur, nzd, brl, gbp.",
    "States: Returns the average price of gas in all American states.",
    "Province: Returns the average price of gas in a specific province in Canada.",
    "Provinces: Returns the average price of gas in all Canadian provinces."
  ],
  "121": [
    "getthelistofcountriesregistered: API Instructions: https://www.mktplace.eu/api-instructions-i-32.html\n\nSell on mktplace.eu: https://www.mktplace.eu/sell-on-mktplace-i-25.html",
    "getthelistofcountriesregistered: API Instructions: https://www.ecombr.com/instrucoes-api-i-28.html\n\nSell on ecombr.com marketplace: https://www.ecombr.com/vender-no-ecombr-i-26.html",
    "Read transactions: Fetch the list of transactions submitted to the database.",
    "GetTransactionsByAccount: To get transactions by account.",
    "GetAllTransactions: To get all transactions in organisation.",
    "7.Getlistofpayments: Returns the entire list of all transactions, created with certain API key.\nThe list of optional parameters:\n- limit - number of records in one page. (possible values: from 1 to 500)\n- page - the page number you want to get (possible values: from 0 to **page count - 1**)\n- sortBy - sort the received list by a paramenter. Set to **created_at** by default (possible values: payment_id, payment_status, pay_address, price_amount, price_currency, pay_amount, actually_paid, pay_currency, order_id, order_description, purchase_id, outcome_amount, outcome_currency)\n- orderBy - display the list in ascending or descending order. Set to **asc** by default (possible values: asc, desc)\n- dateFrom - select the displayed period start date (date format: YYYY-MM-DD or yy-MM-ddTHH:mm:ss.SSSZ).\n- dateTo - select the displayed period end date (date format: YYYY-MM-DD or yy-MM-ddTHH:mm:ss.SSSZ).",
    "6.Gettheminimumpaymentamount: Get the minimum payment amount for a specific pair.\n\nYou can provide both currencies in the pair or just currency_from, and we will calculate the minimum payment amount for currency_from and currency which you have specified as the outcome in the Store Settings.\n\nIn the case of several outcome wallets we will calculate the minimum amount in the same way we route your payment to a specific wallet.",
    "5.Getpaymentstatus: Get the actual information about the payment. You need to provide the ID of the payment in the request.\n\nNOTE! You should make the get payment status request with the same API key that you used in the create payment request.\nHere is the list of avalable statuses:\n- waiting - waiting for the customer to send the payment. The initial status of each payment.\n- confirming - the transaction is being processed on the blockchain. Appears when NOWPayments detect the funds from the user on the blockchain.\n- confirmed -  the process is confirmed by the blockchain. Customer\u2019s funds have accumulated enough confirmations.\n- sending - the funds are being sent to your personal wallet. We are in the process of sending the funds to you.\n- partially_paid -  it shows that the customer sent the less than the actual price. Appears when the funds have arrived in your wallet.\n- finished - the funds have reached your personal address and the payment is finished.\n- failed -  the payment wasn't completed due to the error of some kind.\n- refunded -  the funds were refunded back to the user.\n- expired - the user didn't send the funds to the specified address in the 24 hour time window.",
    "batch: batch process to retrieve payout transaction data",
    "Authentic Money Transfer Portal: Authentic Money Transfer Portal"
  ],
  "115": [
    "listoforders: API Instructions: https://www.mktplace.eu/api-instructions-i-32.html\n\nSell on mktplace.eu: https://www.mktplace.eu/sell-on-mktplace-i-25.html",
    "getStockLocation: Get a stock location",
    "getStockItems: Get all stock items",
    "getStockTransations: Get all stock item transations",
    "getStockTransaction: Get a stock transaction",
    "getMerchants: Get all merchants",
    "getStockItem: Get a stock item",
    "getStockLocations: Get all stock locations",
    "GET Last N Candles nse: The /getLastNCandles API returns latest n number of candles formed for given trading symbol and time frame. The timeFrame parameter allows you to select the time frame of candleStick, with options of 1m, 5m, 15m, or 1h for 1 minute candle, 5 minute candle, 15 minute candle, 1 hour candle respectively. The tradingSymbol parameter lets you select any valid trading symbol of stocks that are part of the Nifty 500 or the top 500 stocks, giving you access to the data you need for the stocks you're interested in.",
    "Get Latest candle NSE: The /getLatestCandle API returns latest realtime candle formed for given trading symbol and time frame. The timeFrame parameter allows you to select the time frame of candleStick, with options of 1m, 5m, 15m, or 1h for 1 minute candle, 5 minute candle, 15 minute candle, 1 hour candle respectively. The tradingSymbol parameter lets you select any valid trading symbol of stocks that are part of the Nifty 500 or the top 500 stocks, giving you access to the data you need for the stocks you're interested in."
  ],
  "46": [
    "listofattributeandvalueoptions: API Instructions: https://www.mktplace.eu/api-instructions-i-32.html\n\nSell on mktplace.eu: https://www.mktplace.eu/sell-on-mktplace-i-25.html",
    "listofattributeandvalueoptions: API Instructions: https://www.ecombr.com/instrucoes-api-i-28.html\n\nSell on ecombr.com marketplace: https://www.ecombr.com/vender-no-ecombr-i-26.html",
    "Annotation Details: An annotation is a piece of content about a part of a document. The document may be a song (hosted on Genius) or a web page (hosted anywhere). The part of a document that an annotation is attached to is called a referent.\n\nAnnotation data returned from the API includes both the substance of the annotation and the necessary information for displaying it in its original context.",
    "Web Page Lookup: A web page is a single, publicly accessible page to which annotations may be attached. Web pages map 1-to-1 with unique, canonical URLs.\n\nInformation about a web page retrieved by the page's full URL (including protocol). The returned data includes Genius's ID for the page, which may be used to look up associated referents with the /referents endpoint.\n\nData is only available for pages that already have at least one annotation.",
    "Artis info: Artis info",
    "Search All Schemas: This call returns all schemas and its definition. Schemas are also called as case types. These case types will be consumed in Wix Database as Schemas.",
    "switches: This endpoint helps you read all the switches and their state",
    "/obd2/{code}: This endpoint will provide the human readable version of a requested obd2 code",
    "Shortened item details: \ud83c\udfae It retrieves shortened game data. Check the endpoint worth since it may contain information more important to you than the ones in \"Full item details\".",
    "Full item details (\ud83d\udd25): \ud83c\udfae It retrieves full game data such as: prices, discount, detailed descriptions, PEGI/ESRB, DLCs, system requirements, screenshots and much more! It also returns API links to conveniently download details of: DLCs, reviews, achievements."
  ],
  "54": [
    "listcategoriesandsub-categories: API Instructions:  https://www.mktplace.eu/api-instructions-i-32.html\n\nSell on mktplace.eu: https://www.mktplace.eu/sell-on-mktplace-i-25.html",
    "listcategoriesandsub-categories: API Instructions: https://www.ecombr.com/instrucoes-api-i-28.html\n\nSell on ecombr.com marketplace: https://www.ecombr.com/vender-no-ecombr-i-26.html",
    "Categories: Categories of establishments.",
    "Mood Categories: Returns mood categories.",
    "Webiste Categorization (v1): Define website category at once (v1)",
    "Fur Color: Gives a list of all cats with the color as provided in the parameter.",
    "All Cats: Get a list of all Cats with their basic meta data.",
    "Categorias: Categorias",
    "List Categories: List all available categories",
    "categories: get the list of Moka News categories ( important if you want later to get data related to a specific category)."
  ],
  "57": [
    "getInterestingListings: Collects the list of interesting listings",
    "industry list: \u7522\u696d\u5225\u4e8c\u78bc",
    "List all Pokemons: A list of all pokemons within pokemon unite",
    "products/v2/list: List products in specific store with options and filters",
    "products/list-collection (Deprecated): List whole collection relating to a product",
    "products/list-recommended (Deprecated): List more products to consider",
    "products/list (Deprecated): List products in specific store with options and filters",
    "products/v2/list-recommended: List more products to consider",
    "products/list (Deprecated): List products, search products with options and filters",
    "products/v2/list: List products, search products with options and filters version 2"
  ],
  "135": [
    "getTrendingListings: Collects the list of listings used to generate the trending listing page",
    "HOT TRENDING SONGS POWERED BY TWITTER: Provide the HOT TRENDING SONGS POWERED BY TWITTER chart information",
    "Trends: Get latest charts data from YouTube Music: Top songs, top videos, top artists and top trending videos. Global charts have no Trending section, US charts have an extra Genres section with some Genre charts.",
    "List Daily Viral Tracks: This endpoint lists daily viral tracks at any time and in any country.",
    "Get Home Page Overview: This endpoint fetches trending information displayed on the Spotify home page as an incognito visitor.",
    "/youtube/global: Insight on weekly trending videos for each countries globally",
    "/youtube/trending: Trending Youtube music videos worldwide now",
    "/youtube/trending/overall: Treding Youtube (including non-music) videos worldwide",
    "Trending and Top Charts: Get trending (New & Hot) and top charts from SoundCloud",
    "Group Trending Topics: Get a list of the trending topics, and the OP."
  ],
  "11": [
    "findAllCurrentFeaturedListings: Finds FeaturedTreasury listings that are currently displayed on a regional homepage.",
    "FindPlacesNearby: Search for nearby places",
    "FindPlaceByText: Search for places by text string",
    "get-location: smart-location",
    "Nearest: Snaps a coordinate to the street network and returns the nearest n matches. Where coordinates only supports a single {longitude},{latitude} entry.",
    "Nearby: Returns nearby places sorted by distance from the origin coordinates in ascending order.\n\nReturns up to 60 places per request.",
    "SearchByAddress: Search local walk scores and regional bike and transit data by address. NWI score range from 0-20.",
    "Get taxi fares: Search fares by geo coordinates",
    "theaters/list: List theaters around a postal code or GEO location",
    "stores/list: List available nearby store by zipcode, GEO location, or city name. One at a time, do NOT use them together at once."
  ],
  "110": [
    "/Smart_Phones: <br /><br />\n<b>Authentication:</b> not required",
    "/Laptops: <br /><br />\n<b>Authentication:</b> not required",
    "/BCAA: <br /><br />\n<b>Authentication:</b> not required",
    "/Headphones: <br /><br />\n<b>Authentication:</b> not required",
    "getAllUsers: For a valid response, you would need to have an authorization header and set the role to *Bearer admin*.",
    "/GET_U-58_ATHLETE_RANKING: <br /><br />\n<b>Authentication:</b> not required",
    "/GET_U-54_ATHLETE_RANKING: <br /><br />\n<b>Authentication:</b> not required",
    "login: login details",
    "Get User Audit Login: Get the total number of logins and detailed login logs for a specified user. The logs include the `time`, `geography` , and other `attributes` associated with each login by the user. By default, the endpoint returns up to 10 logs. You can increase or decrease the amount of logs returned using the limit parameter.",
    "/Calculate_expenses: <br /><br />\n<b>Authentication:</b> not required"
  ],
  "167": [
    "Get: gfd",
    "Get Commodities: Get Commodities",
    "Open item: Get one item",
    "Get main campaigns: Gets main campaign",
    "Walk Score: Get Walk Score",
    "Get Vector Tile: Returns Vector tiles following the OpenMapTiles schema",
    "getCity: return list of citis",
    "Get Voices: Get available voice",
    "getHomePage: *We have made an option for you to display result in your landing/home page. So you don't have to work hard to achieve this.*\nGet limited radios to show in landing/home page, based on.\n- limit",
    "Get Episode: Get Episode"
  ],
  "189": [
    "employee: get employee id",
    "Open service: Open the specified service id",
    "Get show episodes: Get show episodes by show ID.",
    "Get show: Get show by show ID.",
    "Get episode: Get episode from episode ID.",
    "Data By id: Returns data (case) by id",
    "Get Tenant By Id: Get Tenant by Id",
    "Specifications by {ID}: Get all specifications available by ID\n[ArticleGetCompleteSpecification]",
    "Get API by external custom ID: Get information on specified API based on a given custom external ID, including `category`, `id`, and `name`",
    "Get One Set By Id: Returns information about a single set, retrieved using the ID for that set."
  ],
  "145": [
    "BrowserObject API: Browser Detection API",
    "Retrieve file: Retrieves a file hosted by the server. This link is usually obtained by replacing the /p/ path in the /merge and /edit endpoint responses with /f/ or /d/. The request fails if the file requested does not exist or has been deleted.",
    "Web Page Referents: Web Page Referents",
    "Get Download URL MP3/MP4: Get Download URL",
    "getCompanies: For valid response try base URL",
    "Scrape Links: Scrape all links from URL",
    "Shorten long link: Use this endpoint to shorten a URL. The response will be a JSON object with the following structure:\n\nOn success:\n{\n\"status\": 1,\n\"error\": \"\",\n\"data\": \"https://tombo.icu/57h80n\"\n}\n\nOn failure:\n{\n\"status\": 0,\n\"error\": \"This website is already shortened here.\",\n\"data\": \"https://tombo.icu/57h80n\"\n}\n\nThe \"data\" field contains the shortened URL.",
    "Check a URL: Check if a URL is a known phishing attempt",
    "Get Content: Give a url and it will spit back the content of that url",
    "proxy: Proxy your request anywhere."
  ],
  "52": [
    "sortProductsMaster: the list of available sorting methods",
    "getOrders: The endpoint retrieves all orders.\n\nSet the authorization to \"Bearer admin\" to authorize that the admin can check and confirm all orders.\n\nYou should get a JSON object with the following attributes;\nid (integer): The unique identifier for the order.\ndeliveryDate(Date): The date that the user wants the order to be delivered\ndestination(String): Location\nAlongside with the user who ordered the product",
    "Order by Descending: Gives a list of all cats sorted in descending order by name.",
    "Order by Ascending: Gives a list of all cats sorted in ascending order by name.",
    "All Strains - Descending: List of all strains ordered by name in descending order.",
    "All Strains - Ascending: List of all strains ordered by name in ascending order.",
    "Airplanes ordered by descending: Get all airplanes ordered by name in descending order.",
    "Airplanes ordered by ascending: Get all airplanes ordered by name in ascending order.",
    "Order by Descending: Gives a list of all dogs sorted in descending order by name.",
    "Order by Ascending: Gives a list of all dogs sorted in ascending order by name."
  ],
  "25": [
    "Get Info: Request information.",
    "Get Tile Json: Returns the tile json for the give style. Currently there are three different types:\n- `v3` the OpenMapTiles compatible vector tiles\n- `hillshading-v1` Hillshading tiles Version 1\n- `hillshading-v2` Hillshading tiles Version 2",
    "Get Style Json: Returns the style json for the given style. These are pre-configured styles to get started easily. For advanced use cases we recommend to extend these styles or create a new style. The following styles are currently available:\n- `osm-bright` Osm-Bright\n- `osm-bright-hillshading-v1` Osm-Bright with Hillshading V1 overlay\n- `osm-bright-hillshading-v2` Osm-Bright with Hillshading V2 overlay\n- `dark-matter` A dark map style.",
    "Idols: Get idol individual info",
    "Detail info: Get detail info by application name",
    "Get App: Get information about a specified app, including the `name`, `description`, and `thumbnail`.",
    "Get API Spotlight: Get API Spotlight",
    "Get API Spotlights: Get API Spotlights",
    "Get All APIs: Get information for all APIs, including the `id`, `name`, and `status`.",
    "Get all API Docs: Get information about all of the docs associated with an API, including the docId."
  ],
  "42": [
    "sadasd: asdasdads",
    "asdf: asdf",
    "work: sdad",
    "web: dsada",
    "Summery_copy: dahsboard summery",
    "HSDB: HSDB",
    "CommanderSkills: Commander skills",
    "docs: docs",
    "Check Status: <table><thead><tr><th>Parameter</th> <th>Deskripsi</th> <th>Contoh</th></tr></thead> <tbody><tr><td><code>ref_id</code></td> <td>Referensi ID transaksi</td> <td><code>trx1</code> atau <code>41241211133</code></td></tr></tbody></table>",
    "ceee: faas aasdd"
  ],
  "170": [
    "check holiday: check holiday",
    "/spotify/chart/{countryID}/{timeframe}: Get global/country daily/weekly chart or total daily/weekly chart for Spotify. Read external docs for more information",
    "Get futured playlists: Get futured playilsts by country from one of the countrys and timestamp date example 2022-10-20 :\nAD, AE, AG, AL, AM, AO, AR, AT, AU, AZ, \nBA, BB, BD, BE, BF, BG, BH, BI, BJ, BN, \nBO, BR, BS, BT, BW, BZ, CA, CD, CG, CH, \nCI, CL, CM, CO, CR, CV, CW, CY, CZ, DE, \nDJ, DK, DM, DO, DZ, EC, EE, EG, ES, ET, \nFI, FJ, FM, FR, GA, GB, GD, GE, GH, GM, \nGN, GQ, GR, GT, GW, GY, HK, HN, HR, HT, \nHU, ID, IE, IL, IN, IQ, IS, IT, JM, JO, \nJP, KE, KG, KH, KI, KM, KN, KR, KW, KZ, \nLA, LB, LC, LI, LK, LR, LS, LT, LU, LV, \nLY, MA, MC, MD, ME, MG, MH, MK, ML, MN, \nMO, MR, MT, MU, MV, MW, MX, MY, MZ, NA, \nNE, NG, NI, NL, NO, NP, NR, NZ, OM, PA, \nPE, PG, PH, PK, PL, PS, PT, PW, PY, QA, \nRO, RS, RW, SA, SB, SC, SE, SG, SI, SK, \nSL, SM, SN, SR, ST, SV, SZ, TD, TG, TH, \nTJ, TL, TN, TO, TR, TT, TV, TW, TZ, UA, \nUG, US, UY, UZ, VC, VE, VN, VU, WS, XK,\nZA, ZM, ZW",
    "TOTD Tracks by Date: Get the TOTD tracks by date containing the year and month.",
    "Challenges: Check the seasonal and weekly challenges.",
    "3 months flight info: Today - 90D or Today + 14D",
    "Extend expiration time of a datacenter proxy: By calling this endpoint the expiration time of an already allocated proxy will be extended by 30 mins.\nSuccessive calls will keep incrementing the expiration time, up to a maximum of 24 hours.",
    "Convert to Islamic / (Hijri) (Hijriah): Convert date to Islamic or (Hijri) (Hijriah)",
    "Between Checker: Check if given date is between two dates",
    "Birthday: Return complete a birthday detail"
  ],
  "41": [
    "Get Asin: This endpoint get data from Amazon ASIN. You have to select a supported locale (us, uk, de, fr, es, it).",
    "Product Details: Get the product details for a given product id and a specific country.\nDefault country is `United States`.\nSpecify country with country name or country code.\n\nAllowed countries:\nDefault: `us`\n- Germany (de)\n- France (fr)\n- Australia (au)\n- Austria (at)\n- Canada (ca)\n- Hong Kong (hk)\n- Ireland (ie)\n- Italy (it)\n- Malaysia (my)\n- Netherlands (nl)\n- Singapore (sg)\n- Switzerland (ch)\n- United Kingdom (uk)",
    "getCountryList: return list of all country include ISO code and ISO3 code and phonecode",
    "getStationByCountry: Getting all Stations by country based on.\n- country id\n- limit\n- page\n- order",
    "New releases: Get new releases based on country code.",
    "Single Country: Get all details of a country by its ID.",
    "Get Country Codes: Use this API to get list of countries, Their ISO3 & ISO2 codes.",
    "Get Countrywise city data: Use this API to get city list of country. You need to send country name or ISO3 or ISO2 code \nas query to get it. Which you can get it from other API \"Country Codes\"",
    "Country Details Level 1: Specified one valid param and retrieve access level 1 information about a country:\n- english name\n- population (in millions)\n\n\nValid params are country english name, ISO code 2 or ISO code 3",
    "Country Details Level 2: Specified one valid param and retrieve access level 2 information about a country:\n- english name\n- ISO code 2\n- numeric code\n- population (in millions)\n\nValid params are country english name, ISO code 2 or ISO code 3"
  ],
  "148": [
    "Get a List of Bank Sector Groups: Get a List of Bank Sector Groups",
    "Get a List of Indicator Groups and Subgroups: Get a List of Indicator Groups and Subgroups",
    "Get a List of Indicator against each Subgroup: Get a List of Indicator against each Subgroup",
    "Get a List of Cement Attribute Groups: Get a List of Cement Attribute Groups",
    "Get a List of Cement Attributes against each group: Get a List of Cement Attributes against each group",
    "Get a List of Bank Attributes Groups: Get a List of Bank Attributes Groups",
    "Get a List of Banks Attributes against each group: Get a List of Banks Attributes against each group",
    "girl-groups: Get info of girl-groups",
    "boy-groups: Get boy-groups info",
    "Group Profile: An overview of a steamcommunity group."
  ],
  "195": [
    "Get a List of Banks Sector Attributes against each group: Get a List of Banks Sector Attributes against each group",
    "Get Sector's Data: Get Sector's Data",
    "Query for Hexagon by Location and Resolution: Query for Hexagon by Location and Resolution",
    "Query for Hexagon by H3Index: Query for Hexagon by H3Index",
    "Retrieve UK Postal Sector Outline Boundaries: example: Query by \"W41,W42\" sectors.",
    "Retrieve UK Postal District Outline Boundaries: example: Query by \"TW12\" district",
    "Query for all State names.: Query for all State names.",
    "Query for Hexagon by H3Index: Create a h3 hexagon with any h3Index value in the world.",
    "Query for All Province / Territory names: Query for All Province / Territory names",
    "Query for LDU Boundary by Location and Resolution: Query for LDU H3 Boundary by Location and Resolution"
  ],
  "85": [
    "Get a List of Fund Managers: Get a List of Fund Managers",
    "Event managers: Get team managers by event_id",
    "Manager data: Get manager data by manager ID",
    "Manager events: Get events of the manager",
    "Manager career-history: Get the manager's career history",
    "Get managers: You want to know who's behind the teams at this game? Here you go!",
    "ManagerLastMatches: This operation retrieves the last matches for a given American Football manager ID. It returns a paginated list of events (matches), with the latest match first.",
    "ManagerDetails: Get the details of a specific American Football manager using the manager id.",
    "MatchManagers: Get managers for a specific American Football match by providing its ID.",
    "ManagerDetails: Get the details of a specific Ice Hockey manager using the manager id."
  ],
  "69": [
    "Get a List of Funds against each Fund Manager: Get a List of Funds against each Fund Manager",
    "Get_host_list__version__hosts_get: This returns a list of hosts that ran an ecoindex analysis order by most request made",
    "{type}/get-disclosure-flag: Get disclosure flag related to an ETF or FUND",
    "{type}/get-morningstar-analysis: Get Morningstar's analysis related to an ETF or FUND",
    "{type}/performance/get-trailing-returns: Get trailing returns in the Performance  tab related to an ETF or FUND",
    "{type}/get-realtime-data: Get realtime data related to an ETF or FUND",
    "{type}/performance/get-returns: Get returns in the Performance  tab related to an ETF or FUND",
    "{type}/analysis/get-archived: Get Morningstar's analysis archived related to an ETF or FUND",
    "{type}/analysis/get-comparables: Get Morningstar's analysis comparables related to an ETF or FUND",
    "stock/get-peers: Get stock peers or ETF"
  ],
  "132": [
    "Get Popular Articles by Market: Get Popular Articles by Market",
    "Get Article Sources: Get Article Sources",
    "Get Articles Types: Get Article Types",
    "Combinations: Returns the 100 most popular combinations/triples of keywords with the corresponding number of news agencies and articles from which they have been cited",
    "Timeline: Returns the 100 most recent articles and their keywords",
    "History: Returns the number of articles published daily during the last week and the number of corresponding news agencies that created those articles",
    "Keywords: Returns the 100 most popular keywords with the corresponding number of news agencies and articles from which they have been cited",
    "Articles: Fetches articles from one specific newspaper",
    "All Articles: Fetch all articles",
    "Get Articles By Publisher: Get articles by a specific publisher."
  ],
  "87": [
    "Get Company's Profile: Get Company's Profile",
    "Get all Organizations: Get Organization information for all of the Organizations you have access to. Organization information includes the associated `email`, the number of `seats`, the Organization `name`, the `status`, and more.",
    "Get Organization: Get a specified Organization's information, including the associated `email`, the number of `seats`, the Organization `name`, the `status`, and more.",
    "Get all Organizations (Environment Admin): Get Organization information for all of the Organizations in your Enterprise Hub.Organization information includes the associated `email`, the number of `seats`, the Organization `name`, the `status`, and more.",
    "Business Phone Search: Find relevant businesses in the Data Axle database",
    "Business Address Search: Find relevant businesses in the Data Axle database",
    "MAC Address Lookup: This tool will display the name of the company that manufactured a specific network device based on its MAC Address.",
    "List all oTask records: returns all task records under the company",
    "Get My Jobs: Returns all jobs that a user has manage_recruiting access to. This API call can be used to find the reference ID of a specific job.",
    "Generating Company Wide Reports: Time reports can be generated on a company-wide level. All time reports fields are supported on this level except earnings related fields. In order to access this API the authorized user needs either hiring or finance permissions to all teams within the company."
  ],
  "19": [
    "Get All Consumer Goods with Categories: Get All Consumer Goods with Categories",
    "List of all Categories: Get all Categories:\n\n```\n    {\n        \"id\": 3,\n        \"name\": \"ATV\"\n    },\n    {\n        \"id\": 4,\n        \"name\": \"Allround\"\n    },\n    {\n        \"id\": 12,\n        \"name\": \"Classic\"\n    },\n    {\n        \"id\": 8,\n        \"name\": \"Cross / motocross\"\n    },\n    {\n        \"id\": 7,\n        \"name\": \"Custom / cruiser\"\n    },\n    {\n        \"id\": 14,\n        \"name\": \"Enduro / offroad\"\n    },\n    {\n        \"id\": 11,\n        \"name\": \"Minibike, cross\"\n    },\n    {\n        \"id\": 10,\n        \"name\": \"Minibike, sport\"\n    },\n    {\n        \"id\": 6,\n        \"name\": \"Naked bike\"\n    },\n    {\n        \"id\": 1,\n        \"name\": \"Prototype / concept model\"\n    },\n    {\n        \"id\": 5,\n        \"name\": \"Scooter\"\n    },\n    {\n        \"id\": 18,\n        \"name\": \"Speedway\"\n    },\n    {\n        \"id\": 2,\n        \"name\": \"Sport\"\n    },\n    {\n        \"id\": 17,\n        \"name\": \"Sport touring\"\n    },\n    {\n        \"id\": 9,\n        \"name\": \"Super motard\"\n    },\n    {\n        \"id\": 13,\n        \"name\": \"Touring\"\n    },\n    {\n        \"id\": 15,\n        \"name\": \"Trial\"\n    },\n    {\n        \"id\": 16,\n        \"name\": \"Unspecified category\"\n    }\n```",
    "Get API: Get information on specified API, including `category`, `id`, and `name`",
    "Get Category: Get information on a specific Category within your environment",
    "Get all Categories: Get all the Categories that exist in your environment",
    "Get By Category: Get plants by their category.",
    "Get All Stored Categories: Get a list of all stored categories. Use them to get results for the specified category",
    "Get Random Quotes: Get multiple random quotes from chosen category or send **all** to get results from multiple categories.\nYou can view all categories on the Category endpoint",
    "Get all Categories: Get all Categories",
    "Get all SubCategories: Get all SubCategories"
  ],
  "37": [
    "Get Markets: Get Markets",
    "Get International Market Data: Get International Market Data",
    "Get Market Data: Get Market Data",
    "Get Inernational Markets: Get International Markets",
    "Get Sectors by Market: Get Sectors by Market",
    "MarketPlace List: This endpoint lists down the market places we use to fetch data!",
    "caisonode: Returns nodes where prices are tracked by CAISO",
    "caisoregion: Gets Regional Authorities where node prices are tracked by CAISO",
    "Search: Search Australian business industries",
    "house-prices/get-market-activity: Get market activity in an area"
  ],
  "32": [
    "Get Petrochemical Index: Get Petrochemical Index",
    "index: Trend Analysis is a relatively straightforward quantitative demand forecasting technique that uses the historical relationship between the operational index (i.e. sales level) and the number of employees required by the organization (demand for labour) to forecast future requirements.",
    "Get_ecoindex_analysis_list__version__ecoindexes_get: This returns a list of ecoindex analysis corresponding to query filters and the given version engine. The results are ordered by ascending date",
    "Get_ecoindex_analysis_by_id__version__ecoindexes__id__get: This returns an ecoindex given by its unique identifier",
    "Team Performance Indices: Returns a snapshot of global team performance indices sorted by rank in ascending order.\nSeparate index lists are maintained for club and national teams. The indication of projections controls which data should be collected and has direct impact on the payload and billed credits.\n\nIf no parameters are provided then the latest club team ranking is returned with only the main index projection in absolute index format. For details about index calculation and factors refer to the documentation.\n\nFor free subscriptions the following limits apply:\n\n`Max. requests per hour: 20`\n`Min. time between requests: 1 minute`\n`Max. performances returned: 5`",
    "market/get-global-indices: Get information of global indices",
    "Commodity Indices: page source : https://www.investing.com/indices/commodities-indices",
    "index: Extract Fear & Greed index value(s)\n\nQuery params:\nlimit (NUMBER) - Get latest N records (Optional)\ntimestamp (STRING) - Get index value by UTC timestamp (Optional)\n\nIf no query params specified, all available history will be fetched.",
    "Indices: Get indices data powered by Token Metrics",
    "Consumer Price Index: Get monthly consumer price index referenced to year 2010."
  ],
  "130": [
    "Get Regular Commodities: Get List of Regular Commodities with Quotes",
    "getAllQuotes: You will get all the quotes here based on.\n- limit\n- page",
    "Generate Rogan Quote: Generate a quote from Joe Rogan",
    "title/get-quotes: Get quotes in specific title",
    "title/get-quotes: Get quotes in specific title",
    "Get quotes by anime title: Get quotes by anime title",
    "Get quotes by character name: Get quotes by character name",
    "Get Wisdom Quote By ID: Returns a single wisdom quote by a given ID. The highest is 27753.",
    "Get Wisdom Quotes By Page: Returns an JSON object that includes:\n\n- the page number requested  (current_page), \n- the amount of all pages (max_pages),\n- the amount of the quotes (quotes_count) (15 per page),\n- the wisdom quotes array (quotes).",
    "Get Wisdom Quotes By Topic: Returns an array of all wisdom quotes that are related to a given topic."
  ],
  "131": [
    "tety constant: vie de Dieu",
    "getMapTilewithFrenchLabels: Raster Map Tiles with French Labels",
    "map: ## \u5730\u56f3\u753b\u50cf\u53d6\u5f97\nWMTS\u5f62\u5f0f\u306e\u5730\u56f3\u753b\u50cf\u3092\u63d0\u4f9b\u3057\u307e\u3059\u3002\n`tilematrix`, `tilerow`, `tilecol` \u3067\u6307\u5b9a\u3057\u305f\u4f4d\u7f6e\u306e\u5730\u56f3\u753b\u50cf\u3092\u8fd4\u3057\u307e\u3059\u3002\n\n\u672c\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u3092\u7528\u3044\u3066\u30b9\u30af\u30ed\u30fc\u30eb\u5730\u56f3\u6a5f\u80fd\u3092\u5b9f\u88c5\u3059\u308b\u65b9\u6cd5\u306b\u3064\u304d\u307e\u3057\u3066\u306f\u3001 [\u3053\u3061\u3089\u306e\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb](https://rapidapi.com/ja/geotechnologies12-geotechnologies-default/api/mapfanapi-map/tutorials/leaflet%E3%81%AE%E3%82%BF%E3%82%A4%E3%83%AB%E3%83%AC%E3%82%A4%E3%83%A4%E3%83%BCurl%E3%81%AB%E3%83%AA%E3%82%AF%E3%82%A8%E3%82%B9%E3%83%88%E3%83%98%E3%83%83%E3%83%80%E3%83%BC%E3%82%92%E8%A8%AD%E5%AE%9A%E3%81%99%E3%82%8B%EF%BC%88rapidapi%E3%81%AEmap%E3%82%A8%E3%83%B3%E3%83%89%E3%83%9D%E3%82%A4%E3%83%B3%E3%83%88%E3%81%AE%E5%88%A9%E7%94%A8%EF%BC%89) \u3092\u3054\u78ba\u8a8d\u304f\u3060\u3055\u3044\u3002",
    "calcroute: ## \u30eb\u30fc\u30c8\u691c\u7d22\n\u30eb\u30fc\u30c8\u691c\u7d22\u6a5f\u80fd\u3092\u63d0\u4f9b\u3057\u307e\u3059\u3002\n\n#### \u6ce8\u8a18\n\u30eb\u30fc\u30c8\u691c\u7d22API\u3092\u5b9f\u884c\u3059\u308b\u969b\u3001\u8ddd\u96e2\u306e\u9577\u3055\u3084\u691c\u7d22\u6761\u4ef6\u306b\u3088\u3063\u3066\u306f\u30ec\u30b9\u30dd\u30f3\u30b9\u304c\u8fd4\u5374\u3055\u308c\u308b\u307e\u3067\u6642\u9593\u304c\u304b\u304b\u308b\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002",
    "altcalcroute: ## \u8907\u6570\u63a8\u5968\u30eb\u30fc\u30c8\u691c\u7d22\n\u8907\u6570\u63a8\u5968\u30eb\u30fc\u30c8\u691c\u7d22\u6a5f\u80fd\u3092\u63d0\u4f9b\u3057\u307e\u3059\u3002\n\n1\u7d44\u306e\u30eb\u30fc\u30c8\u691c\u7d22\u6761\u4ef6\u306b\u5bfe\u3057\u3001`calcroute`\u306e\u7d50\u679c\u3092\u300c\u63a8\u59681\u300d\u3068\u3057\u3066\u3001\u305d\u306e\u4ed6\u306e\u30eb\u30fc\u30c8\u6848\u3092\u300c\u63a8\u59682\u300d\u300c\u63a8\u59683\u300d\u3068\u3057\u3066\u6700\u59273\u4ef6\u3092\u8fd4\u5374\u3057\u307e\u3059\u3002\u305d\u306e\u4ed6\u306e\u63a8\u5968\u30eb\u30fc\u30c8\u304c\u898b\u3064\u304b\u3089\u306a\u3044\u5834\u5408\u306f\u3001\u300c\u63a8\u59682\u300d\u300c\u63a8\u59683\u300d\u306f\u8fd4\u5374\u3055\u308c\u307e\u305b\u3093\u3002\n\n#### \u6ce8\u8a18\n\u30eb\u30fc\u30c8\u691c\u7d22API\u3092\u5b9f\u884c\u3059\u308b\u969b\u3001\u8ddd\u96e2\u306e\u9577\u3055\u3084\u691c\u7d22\u6761\u4ef6\u306b\u3088\u3063\u3066\u306f\u30ec\u30b9\u30dd\u30f3\u30b9\u304c\u8fd4\u5374\u3055\u308c\u308b\u307e\u3067\u6642\u9593\u304c\u304b\u304b\u308b\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002",
    "nearroadinfo: ## \u5468\u8fba\u9053\u8def\u60c5\u5831\u53d6\u5f97\n\u6307\u5b9a\u3055\u308c\u305f\u7def\u5ea6\u7d4c\u5ea6\u3092\u4e2d\u5fc3\u3068\u3057\u305f\u5468\u8fba\u306e\u9053\u8def\u60c5\u5831\u306e\u691c\u7d22\u6a5f\u80fd\u3092\u63d0\u4f9b\u3057\u307e\u3059\u3002",
    "Artis: Daftar artis",
    "NAL Path: Convierte un n\u00famero a letras",
    "NAL Query: Convierte un n\u00famero a letras",
    "Deprem: \u00abafet.gen.tr\u00bb Son Depremler Verisi"
  ],
  "74": [
    "getOrdersbyEmail: For a valid response, fill in the email of the user in the path parameter. This is helpful instead of looping from the userId since the users can't have or use the same email. To also verify that it is an authenticated user trying to get his/her order, fill in an authorization header that takes the token of the user.....\nFor example, \n\"Bearer <access_token>",
    "getOrderById: For valid response try integer IDs with value >= 1 and <= 10.         Other values will generated exceptions",
    "getOrderById: For valid response try integer IDs with value <= 5 or > 10. Other values will generated exceptions",
    "getOrderById: For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions",
    "getOrderById: For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions",
    "getOrderById: For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions",
    "getOrderById: for testing purpose only",
    "getOrderById: For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions",
    "getOrderById: For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions",
    "getOrderById: For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions"
  ],
  "199": [
    "HTTP://MRAUTO.PARTS: DOWNLOADS APP",
    "/local/osm/v1/{z}/{x}/{y}.png: Download OpenStreetMap standard tile",
    "/en/map/v1/{z}/{x}/{y}.png: Download English tile",
    "map_script: Get a JavaScript file to control the tile map that runs on the browser.",
    "Staticmaps: Create a Staticmap.",
    "Get Hillshading Tile: Returns special hillshading Raster tiles as PNG. Hillshading can be used as an overlay to create the look and feel of mountains. The version can be either v1 or v2.",
    "Downloader: MP3 Downloader",
    "Preview_GetDownloadPath: Rate Limits: 100 requests per minute",
    "Website Screenshot (v1): Get a screenshot of any web page with one API call (v1)",
    "Get MP3: Convert to MP3 at the default bit rate."
  ],
  "38": [
    "Endpoint1: Endpoint1",
    "cinemaFenEnd: endpoint test",
    "End: Endp",
    "get test: test the endpoint response",
    "E1: E2 is my first endpoint",
    "Get all Endpoints: Get all Endpoints",
    "Get Endpoint: Get Endpoint",
    "endpoint1: indpoint",
    "dinotest: just test the endpoint",
    "endpoint: endpoint"
  ],
  "147": [
    "IP2Proxy API: Proxy Detection API",
    "IP Netblock v2: Get exhaustive information on IP Range (v2)",
    "/api/v1: Reverse IP API",
    "/keyDetails/185.225.233.110/30015: Get the key details from server - change `/IP/PORT`",
    "/connectIP/185.225.233.110/30015: Get the connect IP from server - change `/IP/PORT`",
    "/description/185.225.233.110/30015: Get the full description from server - change `/IP/PORT`",
    "/allDetails/185.225.233.110/30015: Get all details from server - change `/IP/PORT`",
    "FraudSentinel: Detailed JSON data from hundreds of IP classification databases.",
    "Generate IP: Generate fake IP address",
    "Get IP: Get user's IP"
  ],
  "40": [
    "Query for Postal Code Unit Boundary( H3 Geo Boundary ): Query for Postal Unit Boundary (ex. ZE1 0AE) \n\nhttps://eng.uber.com/",
    "Query for Postal Unit Boundary by H3Index: Query for Postal Unit Boundary by H3Index\n\nIf  a Postal Unit code exists within this hexagon a boundary is returned.\nadjusting the resolution(0-16) increases the hexagon area.\n\nhttps://eng.uber.com/",
    "Distance: Gets the distance between 2 postcodes in KM",
    "Geocode: Returns the latitude and longitude for a given postcode",
    "In Radius: Find all postcodes within a certain radius (in KM) of a postcode",
    "Query for Postal Code Boundary By location: Query for Postal Code By location",
    "Query for Postal Code Boundary by postal code.: Query For Postal Code Boundary by postal code.",
    "Query by FSA Code: Query by Postal FSA ( example T6H )",
    "Query for LDU Boundary by H3Index: Query for Boundary by H3Index.\nQuery for a LDU boundary by H3 Index, if a LDU Postal Code does not exist within the H3 Index Hexagon, an empty FeatureCollection is returned.\n\n**H3Index resolution must be greater than 8.**",
    "Query for LDU boundary: Query by a LDU Postal Code"
  ],
  "83": [
    "Query for Distance between two H3 Indexes: Query for Distance between two H3 Indexes",
    "Matrix: Computes duration of the fastest route between all pairs of supplied coordinates. Returns the durations or distances or both between the coordinate pairs. Note that the distances are not the shortest distance between two coordinates, but rather the distances of the fastest routes.",
    "Directions: Finds the fastest route between coordinates in the supplied order.",
    "Measure Distance: This endpoint calculates the distance between two locations based on their latitude and longitude coordinates, while allowing the user to specify the unit of measurement.\n\nBelow Example: **Distance from Arusha to Dar es Salaam**",
    "Directions Between 2 Locations: This endpoint returns information about the route between two locations in terms of distance, duration, and steps.\n\nBelow Example: **Directions from Arusha to Dar es Salaam**",
    "Directions Between 2 Locations: This endpoint returns information about the route between two locations in terms of distance, duration, and steps.\n\nBelow Example: **Directions from Kaduna to Maiduguri**",
    "Measure Distance: This endpoint calculates the distance between two locations based on their latitude and longitude coordinates, while allowing the user to specify the unit of measurement.\n\nBelow Example: **Distance between Lagos and Abuja**",
    "Measure Distance Reverse: This endpoint calculates the distance between two addresses in Cameroon.",
    "Measure Distance: This endpoint calculates the distance between two locations based on their latitude and longitude coordinates, while allowing the user to specify the unit of measurement.",
    "Directions Between 2 Locations: This endpoint returns information about the route between two locations in terms of distance, duration, and steps."
  ],
  "68": [
    "Exchange Zip Code for State: The endpoint to pass a zip code as a query parameter and get the state the zip code is located in as a response.",
    "Search zip codes: Search for valid zip codes with starting digits",
    "Zip Code Information: Retrieves the information of a particular zip code",
    "Search zip codes in mexico: Perform a text search in zip codes in Mexico",
    "Get zip code in Mexico: Get zip code data given a specific zip code",
    "GET all Restaurant locations by {zipcode]: GET all Restaurant locations by zipcode",
    "Zipcode: Get locations by zipcode",
    "Tax Rate: Obtain tax rate by zip code",
    "Store-location: Get detailed Walmart store locations (phone number and address) by specifying the zip code.",
    "nearby_stores: Returns the list of stores near to specified ZIP code."
  ],
  "108": [
    "Query for City Names by State: Query for list of city names by a state name.",
    "Query for City Boundary by Name: Query for City Boundary by City Name",
    "GetNearestCities: Returns a readable place name as nearest 3 cities with population, country and distance based on given latitude/longitude pair.",
    "GetLargestCities: Returns 5 largest cities within a given radial range with name, population, country and distance.",
    "Lookup Coordinates: Convert US latitude and longitude coordinates into local city information",
    "Query for City names by province/territory name: Query for City names by province/territory name",
    "Query for City Boundary by City name: Query for City Boundary by City name",
    "Get Cities: Get city list",
    "City Data: Get list of citys.\nCount limit should be less the 1000",
    "GET all City names: GET all City names"
  ],
  "91": [
    "Get Route: Get a driving route for cars (with turn-by-turn directions) by submitting (at least) a start- and endpoint.",
    "Get Route: Given a list of locations, the route service provides details about the trip,\nincluding locations, a summary with basic information about the entire trip, and a list of legs.\n\n**Locations**\n\nYou specify locations as an ordered list of two or more locations within a JSON array. Locations are visited in the order specified.\n\nA location must include a latitude and longitude in decimal degrees. The coordinates can come from many input sources, such as a GPS location, a point or a click on a map, a geocoding service, and so on.\n\nTo build a route, you need to specify two `break` locations. In addition, you can include `through`, `via` or `break_through` locations to influence the route path.\n\n<div class=\"tg-wrap\">\n<table>\n<thead>\n<tr>\n    <th style=\"min-width: 128px;\">Location parameters</th>\n    <th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n    <td><code>lat</code></td>\n    <td>\nLatitude of the location in degrees. This is assumed to be both the routing location and the display location if no <code>display_lat</code> and <code>display_lon</code> are provided.\n    </td>\n</tr>\n<tr>\n    <td><code>lon</code></td>\n    <td>\nLongitude of the location in degrees. This is assumed to be both the routing location and the display location if no <code>display_lat</code> and <code>display_lon</code> are provided.\n    </td>\n</tr>\n<tr>\n    <td><code>type</code></td>\n    <td>\n\tType of location, either <code>break</code>, <code>through</code>, <code>via</code> or <code>break_through</code>. Each type controls two characteristics: whether or not to allow a u-turn at the location and whether or not to generate guidance/legs at the location. A <code>break</code> is a location at which we allows u-turns and generate legs and arrival/departure maneuvers. A <code>through</code> location is a location at which we neither allow u-turns nor generate legs or arrival/departure maneuvers. A <code>via</code> location is a location at which we allow u-turns but do not generate legs or arrival/departure maneuvers. A <code>break_through</code> location is a location at which we do not allow u-turns but do generate legs and arrival/departure maneuvers. If no type is provided, the type is assumed to be a <code>break</code>. The types of the first and last locations are ignored and are treated as breaks.\n    </td>\n</tr>\n</tbody>\n</table>\n</div>\n\n**Costing models**\n\nThe routing service uses dynamic, run-time costing to generate the route path. The route request must include the name of the costing model and can include optional parameters available for the chosen costing model.\n\n<div class=\"tg-wrap\">\n<table>\n<thead>\n<tr>\n    <th style=\"min-width: 128px;\">Costing model</th>\n    <th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n    <td><code>auto</code></td>\n    <td>\n\tStandard costing for driving routes by car, motorcycle, truck, and so on that obeys automobile driving rules, such as access and turn restrictions. <code>Auto</code> provides a short time path (though not guaranteed to be shortest time) and uses intersection costing to minimize turns and maneuvers or road name changes. Routes also tend to favor highways and higher classification roads, such as motorways and trunks.\n    </td>\n</tr>\n<tr>\n    <td><code>bicycle</code></td>\n    <td>\n\tStandard costing for travel by bicycle, with a slight preference for using <a href=\"http://wiki.openstreetmap.org/wiki/Key:cycleway\" target=\"_blank\">cycleways</a> or roads with bicycle lanes. Bicycle routes follow regular roads when needed, but avoid roads without bicycle access.\n    </td>\n</tr>\n<tr>\n    <td><code>bus</code></td>\n    <td>\n\tStandard costing for bus routes. Bus costing inherits the auto costing behaviors, but checks for bus access on the roads.\n    </td>\n</tr>\n</tbody>\n</table>\n</div>",
    "Get Isochrone: The isochrone service computes areas that are reachable within specified time intervals from a location,\nand returns the reachable regions as contours of polygons or lines that you can display on a map.\n\n**Costing parameters**\n\nThe isochrone service uses the auto, bicycle, pedestrian, and multimodal costing models available in the Turn-by-Turn service.\nRefer to the route costing models and costing options documentation for more on how to specify this input.\n\n**Other request parameters**\n\n<div class=\"tg-wrap\">\n<table>\n<thead>\n<tr>\n    <th style=\"min-width: 128px;\">Parameter</th>\n    <th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n    <td><code>date_time</code></td>\n    <td>\n        The local date and time at the location. These parameters apply only for multimodal requests and are not used with other costing methods.\n        <ul>\n            <li><code>type</code></li>\n            <ul>\n                <li>0 - Current departure time for multimodal requests.</li>\n                <li>1 - Specified departure time for multimodal requests.</li>\n                <li>2 - Specified arrival time. Note: This is not yet implemented.</li>\n            </ul>\n            <li><code>value</code> - the date and time specified in ISO 8601 format (YYYY-MM-DDThh:mm) in the local time zone of departure or arrival. For example, \"2016-07-03T08:06\".\n            </li>\n        </ul>\n    </td>\n</tr>\n<tr>\n    <td><code>id</code></td>\n    <td>\n        Name of the isochrone request. If <code>id</code> is specified, the name is returned with the response.\n    </td>\n</tr>\n<tr>\n    <td><code>contours</code></td>\n    <td>\n        A JSON array of contour objects with the time in minutes or distance in kilometers and color to use for each isochrone contour. You can specify up to four contours (by default).\n        <ul>\n            <li><code>time</code> - A floating point value specifying the time in minutes for the contour.\n            </li>\n            <li><code>distance</code> - A floating point value specifying the distance in kilometers for the contour.\n            </li>\n            <li><code>color</code> -The color for the output of the contour. Specify it as a Hex value, but without the <code>#</code>, such as <code>\"color\":\"ff0000\"</code> for red. If no color is specified, the isochrone service will assign a default color to the output.\n            </li>\n        </ul>\n        You can only specify one metric per contour, i.e. time or distance.\n    </td>\n</tr>\n<tr>\n    <td><code>polygons</code></td>\n    <td>\n        A Boolean value to determine whether to return geojson polygons or linestrings as the contours. The default is <code>false</code>, which returns lines; when <code>true</code>, polygons are returned. Note: When <code>polygons</code> is <code>true</code>, any contour that forms a ring is returned as a polygon.\n    </td>\n</tr>\n<tr>\n    <td><code>generalize</code></td>\n    <td>\n        A floating point value in meters used as the tolerance for Douglas-Peucker generalization. Note: Generalization of contours can lead to self-intersections, as well as intersections of adjacent contours.\n    </td>\n</tr>\n</tbody>\n</table>\n</div>",
    "Compare Route Names: Calculates the coefficient of how similar are 2 strings containing the name (and type) of the route. With a value of 0.9 and higher, it is possible to do auto-matching,at 0.2-0.9 - visual matching.",
    "Matching: Matching API matches or snaps given GPS points to the road network in the most plausible way.  Please note the request might result multiple sub-traces.  Large jumps in the timestamps (> 60s) or improbable transitions lead to trace splits if a complete matching could not be found. The algorithm might not be able to match all points. Outliers are removed if they can not be matched successfully.",
    "Routing Enhancement: Create a routing along a specific cycleway",
    "Route Enhancement: Enhance your GPX-file with elevation, surface and mapmatching",
    "Elevation: Global elevation service.",
    "Routing: Global routing engine.",
    "Contours Vector Tiles: Global Contourlines."
  ],
  "180": [
    "Geocoding: Returns standard, normalized address and geocode lat/long rooftop coordinates.",
    "ForwardGeocoding: Turn an address into latitude and longitude (e.g. to display on a map) by schematic input.",
    "ReverseGeocoding: Find address or place by latitude and longitude",
    "GeocodingSearch: Free-form query forward geocoding.",
    "/v1/reversegeocoding: API Ninjas Reverse Geocoding API endpoint.",
    "reverse: Reverse geocoding is the process of converting a coordinate or location (latitude, longitude) to a readable address or place name. This permits the identification of nearby street addresses, places, and/or area subdivisions such as a neighborhood, county, state, or country.",
    "search: The Search API allows converting addresses, such as a street address, into geographic coordinates (latitude and longitude). These coordinates can serve various use-cases, from placing markers on a map to helping algorithms determine nearby bus stops. This process is also known as Forward Geocoding.",
    "Reverse: Reverse geocoding.",
    "Bulk geocoding: Geocode an entire list of addresses in one request using the geocodeAddresses operation. Geocoding many addresses at once is also known as batch or bulk geocoding.\n\n![bulk geocoding](https://developers.arcgis.com/rest/geocode/api-reference/GUID-FD609701-B9B5-49DB-BFD9-A936280A09C6-web.png)\n\n[API reference `geocodeAddresses` operation](https://developers.arcgis.com/rest/geocode/api-reference/geocoding-geocode-addresses.htm)",
    "Search address: The findAddressCandidates operation geocodes one location per request; the input address can be combined into a single input field or divided among multiple parameters.\n\n![geoceode screenshot](https://developers.arcgis.com/rest/geocode/api-reference/GUID-F2F78690-5FB5-4BF1-8633-26BF184C45A9-web.png)\n\n[API reference for `findAddressCandidates` operation](https://developers.arcgis.com/rest/geocode/api-reference/geocoding-find-address-candidates.htm)"
  ],
  "80": [
    "GetTimezone: Finds the local timezone for any given geo-location point by lat and long and returns timezone information with Timezone name, Timezone id and current local time.",
    "measurements: Retrieve list of Measurements in TimeDB",
    "Get TimeZones: Get TimeZones in Olsen Format with UTC offset and Daylight Savings Time (DST).",
    "/solat/time: Display the prayer time based on selected zone.\nData in json format.",
    "seconds_simplified: Convert seconds to get days, hours, minutes, seconds. (Seconds) -> Days: 1, Hours: 3, Minutes: 46, Seconds: 40",
    "start_end_date_to_time: Convert datetime to get start timestamp and end timestamp. (year, month, day Hours:Minutes:Seconds) -> 1674864000.0, 1674950399.0",
    "date_to_time: Convert datetime to timestamp. (year, month, day Hours:Minutes:Seconds) -> 1674919760",
    "time_to_date: Convert timestamp to datetime. (year, month, day Hours:Minutes:Seconds)",
    "Date  Converter Timezone: Simply Date  Converter Timezone to complete response report",
    "Coordinated Universal Time: Gets the coordinated universal time"
  ],
  "72": [
    "Geographic coordinates by placename: Returns geographic coordinates for the given placename (city, village, etc.). The method returns the place whose name is most similar to the search string.",
    "Places list by radius (Nearby Search): Method returns objects closest to the selected point optionally filtered by parameters. Only basic information is include in response: xid, name, kinds, osm, wikidata of each object. Depending on the chosen format, the response is either a simple array of objects (with a smaller volume) or an object in GeoJSON format.",
    "Places list by bounding box: Method returns all objects (or number of objects) in the given boundary box optionally filtered by parameters. Only basic information is include in response: xid, name, kinds, osm, wikidata of each object. Depending on the chosen format, the response is either a simple array of objects (with a smaller volume) or an object in GeoJSON format.",
    "Search: Global Geocoder.",
    "Locations List: Returns full object representing collection of valid locations for this API.",
    "World: This endpoint is used to get world news from Google News. The optional parameter that can be used is \"lr\" to determine the region",
    "Geocode: This endpoint allows you to lookup locations in Tanzania by providing an address query parameter. It returns the latitude, longitude and city name of the location.",
    "Facilities Lookup: This endpoint allows you to get facilities in Tanzania like hospital, bank, college, etc. by providing optional query parameters for facility type, region and city. It returns a list of facilities that match the query parameters.",
    "Reverse Geocode: This endpoint allows you to perform reverse geocoding in Tanzania by providing query parameters for latitude and longitude. It returns the name of the address where the location is located.",
    "Reverse Geocode: This endpoint allows you to perform reverse geocoding in Nigeria by providing query parameters for latitude and longitude. It returns the name of the city where the location is located."
  ],
  "59": [
    "Place properties: Returns detailed information about the object. Objects can contain different amount of information.",
    "properties/list: List properties with options and filters",
    "properties/lookup: Look for off-market property by id",
    "properties/detail: Get detailed information of a property",
    "properties/detail: Get detail information of a property",
    "properties/list: List properties with options and filters",
    "UK property to rent: UK property to rent",
    "New homes for sale: New homes for sale",
    "House-prices for detail: House-prices for detail",
    "House prices & values: House prices & values"
  ],
  "194": [
    "Autosuggest: Method returns suggestions for search term closest to the selected point optionally filtered by parameters. Only basic information is include in response: xid, name, kinds, osm, wikidata of each object. Depending on the chosen format, the response is either a simple array of objects (with a smaller volume) or an object in GeoJSON format.",
    "autocomplete: The Autocomplete API is a variant of the Search API that returns place predictions in response to an HTTP request.  The request specifies a textual search string and optional geographic bounds.  The service can be used to provide autocomplete functionality for text-based geographic searches, by returning places such as businesses, addresses and points of interest as a user types. The Autocomplete API can match on full words as well as substrings. Applications can therefore send queries as the user types, to provide on-the-fly place predictions.",
    "Autocomplete suggestions: The ArcGIS World Geocoding Service includes a method that allows character-by-character autocomplete suggestions to be generated for user input in a client application. This capability facilitates the interactive search user experience by reducing the number of characters that need to be typed before a suggested match is obtained. The idea is that a client application can provide a list of suggestions that is updated with each character entered by a user until the place they are looking for is returned in the list.\n\n![Autocomplete diagram](https://developers.arcgis.com/rest/geocode/api-reference/GUID-9A754AFE-8154-46C3-8A31-3566963F971E-web.png)\n\n[API reference `suggest` operation](https://developers.arcgis.com/rest/geocode/api-reference/geocoding-suggest.htm)",
    "auto-complete: Get suggestions by word or phrase",
    "Autocomplete: Waze/Google autocomplete/type-ahead for places, locations and addresses.",
    "title/auto-complete (Deprecated): Get auto complete suggestion for related title",
    "auto-complete: Get auto complete suggestion by term or phrase",
    "auto-complete: Get auto complete suggestion by term or phrase",
    "auto-complete: Get suggestion by term or phrase",
    "v2/auto-complete: Get auto complete suggestion by product name"
  ],
  "45": [
    "map_image(GET): Get a static map image of the location, range and zoom value specified in the parameter.",
    "mapimage: ## \u30b5\u30a4\u30ba\u6307\u5b9a\u5730\u56f3\u753b\u50cf\u53d6\u5f97\n\u6307\u5b9a\u3055\u308c\u305f\u7def\u5ea6\u7d4c\u5ea6\u3001\u30b5\u30a4\u30ba\u3001\u7e2e\u5c3a\u306e\u5730\u56f3\u753b\u50cf\u3092\u63d0\u4f9b\u3057\u307e\u3059\u3002\n`size`, `lonlat`, `scale` \u3067\u6307\u5b9a\u3057\u305f\u753b\u50cf\u30b5\u30a4\u30ba\u3001\u4f4d\u7f6e\u3001\u30b9\u30b1\u30fc\u30eb\u306e\u5730\u56f3\u753b\u50cf\u3092\u8fd4\u3057\u307e\u3059\u3002\nresolution\u3067\u89e3\u50cf\u5ea6\u306b2\u3092\u6307\u5b9a\u3057\u305f\u5834\u5408\u3001size\u3067\u6307\u5b9a\u3057\u305f\u753b\u50cf\u30b5\u30a4\u30ba\u306e2\u500d\u306e\u753b\u50cf\u30b5\u30a4\u30ba\u3067\u8fd4\u3055\u308c\u307e\u3059\u3002",
    "Get Raster Tile: Returns Raster tiles as PNG. These can be used in mapping libraries like Leaflet. The style-name can be one of:\n- `kurviger-liberty` a map style developed for Kurviger.de\n- `osm-bright` the default Osm Bright style",
    "get heightmap from two geopoints: you provide two geopoints( latitude, longitude). Server returns image/png with heightmap within this borders.",
    "Image by {ID} as Link: /api/v1/article/{article}/image/link\n[ArticleGetImageByType]\nGet article image link\nsample:\n\n```\n{\n    \"imageName\": \"BMW HP4 2015.jpg\",\n    \"link\": \"http://127.0.0.1:8000/files/BMW/2015/HP4/BMW_2015_HP4.jpg\"\n}\n```",
    "Image by {ID} as Media Content: Get article image as media as content.\n[ArticleGetImageByType]\nUseful for mobile apps.",
    "Images: Retrieve item or block image (to be removed):\n\n- **name** is the name of the block or item (without minecraft;)\n- **width** is the desired width of the returned image\n- **height** is the desired height of the returned image",
    "CREATE: Image output is base64 encoded! See https://myv.at/api/sudoku/code-examples/ how to decode back to HTML, SVG, JPG, PNG, GIF, WEBP easily!",
    "text to image: Generate image using input text.",
    "Photo from given number: It searches for a photo in the internet about the phone number, if it matches, it returns the photo in bytes."
  ],
  "95": [
    "Lista de municipios por provincia: Lista todas lps municipios  de una provincia",
    "Lista de provincias por Comunidad Aut\u00f3noma: Lista todas las provincias de una Comunidad Aut\u00f3noma",
    "Lista de provincias: Lista el nombre y el id de todas las provincias de Espa\u00f1a",
    "Lista de Comunidades Aut\u00f3nomas: Lista el nombre y el id de todas las Comunidades Aut\u00f3nomas de Espa\u00f1a",
    "CNPJ: Buscar dados empresa pelo CNPJ",
    "/veiculo_tipo: Retorna as marcas do tipo selecionado, os tipos dispon\u00edveis s\u00e3o \"carros\", \"motos\" e \"caminhoes\".",
    "/veiculo_tipo/id_marca/id_modelo/id_modelo_ano: /",
    "/veiculo_tipo/id_marca: Retorna listagem dos ve\u00edculos de uma determinada marca.",
    "/veiculo_tipo/id_marca/id_modelo: /",
    "Consulta por CNPJ: **Consulta dados e informa\u00e7\u00f5es do CNPJ, a demanda de informa\u00e7\u00f5es est\u00e1 sempre sendo atualizada para melhor atende-los **"
  ],
  "6": [
    "getMapTilewithSpanishLabels: Raster Map Tiles with Spanish Labels. Please see [tutorial](https://rapidapi.com/MapTilesApi/api/maptiles/tutorials/openstreetmap-in-spanish---add-a-spanish-map-to-your-website-with-leaflet-js-and-maptiles-api) on how to use the Spanish world map.",
    "getMapTilewithEnglishLabels: Raster Map Tiles with English Labels. Please see our [tutorials page](https://rapidapi.com/MapTilesApi/api/maptiles/tutorials) on how to use this.",
    "getStandardMapTile: Standard tiles with labels in local language for a place (untranslated and untransliterated) as known from OpenStreetMap",
    "Get Sample BusinessProfile: Use this API to get fake-generated Business Profile sample data.\nBy default, it will generate \"en\"  locale for a single count.\nIf count query is greater than 1 it will randomize the generated profiles \nto a different locale. \nTo set a default locale pass it as the query.List of the locale you can get from locale API.\nIn case of the wrong locale is given it will return the result based on default settings as mentioned above.",
    "Get list of languages: Get list of languages",
    "language list: \u7cfb\u7d71\u8a9e\u7cfb\u5217\u8868",
    "Language list: Returns a full list of available languages. Use them in other endpoints to retrieve data in the language you're interested in.",
    "Heroes Data: You can get heroes all heroes data name, image, videos, roles, abilities and talents with 20 languages.",
    "Languages: This method provides you with information regarding the language codes which our code checker supports",
    "Get a Language: Get a language."
  ],
  "174": [
    "balance: The Balance API provides a count of request credits left in the user's account for the day. Balance is reset at midnight UTC everyday (00:00 UTC).",
    "Get user's traffic balance: It returns the user's traffic balance for current monthly subscription.",
    "Get Chiliz Balance From Specific Network: This endpoint will return back the Chiliz balance of an address in a specific network.",
    "Get Aave Balance From Specific Network: This endpoint will return back the Aave balance of an address in a specific network.",
    "Get Bitcoin Balance: This endpoint will return back the Bitcoin balance of an address",
    "Get Cordano Balance: This endpoint will return back the Cordano balance of an address",
    "Get Cosmos Balance: This endpoint will return back the Cosmos balance of an address",
    "Get Ether Balance: This endpoint will return back the Ether balance of an address",
    "Get Dogelon Mars Balance From Specific Network: This endpoint will return back the Dogelon Mars balance of an address in a specific network.",
    "Get Zilliqa Balance: This endpoint will return back the Zilliqa balance of an address"
  ],
  "75": [
    "Get Fonts: Returns Fonts for vector tiles. This endpoint is typically used in your style.json.",
    "Main: \u30af\u30a8\u30ea\u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u4e0d\u8981\u3067\u3059.\u305d\u306e\u307e\u307e\u30a2\u30af\u30bb\u30b9\u3057\u3066\u304f\u3060\u3055\u3044.\n**API\u8a8d\u8a3c\u7b49\u306f\u7279\u306b\u8a2d\u3051\u3066\u304a\u308a\u307e\u305b\u3093\u304c, \u30d7\u30ed\u30b0\u30e9\u30e0\u306b\u3088\u308bAPI\u30a2\u30af\u30bb\u30b9\u306e\u5834\u5408\u306fUser-Agent\u306b\u30ea\u30af\u30a8\u30b9\u30c8\u5143\u306e\u30b5\u30fc\u30d3\u30b9\u540d\u30fb\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u5165\u529b\u3057\u3066\u4e0b\u3055\u3044.**",
    "CROSS: **Using this API is easy! An example?**\n\nSearch string:\n- must contain letters (a-z) AND at least one _ (underscore) for unknown letters.\n- must have a minimum length of 3 and a maximum lenght of 65 characters.\n- is a required parameter.\n\nExample request:   `word=u_b_l_e_a_l_`\n\nLanguage:\n- en, es, de (English, Spanish, German)\n- is a optional parameter. If not set /en/ is used. \n\nExample request:   `lang=en`\n\n**This is fun!**",
    "Show Moves: Show Moves For A Specific Character",
    "shakespeare: Shakespeare Translator",
    "Remove profanity: Calling the web service involves a simple HTTP GET request. The only two requirements for using PurgoMalum are the \"text\" parameter on the query string and the request-type name as part of the path in the request",
    "Text to Speech: Text to Speech Voice Reader",
    "Convert Number To Speech| Provide Any Integer Number: Converting any integer number to Speech",
    "Convert Text To Speech || Provide Any Text: Convert Any Text To Speech.",
    "Verify the captcha: Verify the captcha"
  ],
  "70": [
    "Fetch details of multiple records: This endpoint fetches details of more than 1 record. Make sure you pass a valid record ids. If you pass in an invalid id, you will get an `Internal Sever Error 500` for the whole request.\n\nYou can request details of a maximum of 10 records at a go in this endpoint. The `id`s should be separated using a comma with no spaces.",
    "Fetch by type and region: You can make a request finer by combining region and type. This endpoint will return the records requested. You have to provide a limit of the number of records you want.",
    "Fetch by region: This endpoint fetches records by region as defined in the `ABOUT` section above. You have to provide region and a limit of the number of records returned.",
    "Fetch by type: This endpoint fetches records by type as defined in `ABOUT` section above. You have to provide type and a limit of the number of records returned.",
    "query: InfluxDB Query (v1.8)",
    "Models by {Make ID} / {Year}: api/v1/model/make-id/{make}/{year}\nGet model by make id and year\nsample:\n\n```\n    {\n        \"modelId\": 1515,\n        \"modelName\": \"C 400 GT\",\n        \"yearName\": 2019,\n        \"articleId\": 2993\n    },\n    {\n        \"modelId\": 1516,\n        \"modelName\": \"C 400 X\",\n        \"yearName\": 2019,\n        \"articleId\": 2995\n    },\n    {\n        \"modelId\": 1518,\n        \"modelName\": \"C 650 GT\",\n        \"yearName\": 2019,\n        \"articleId\": 3002\n    },\n    {\n        \"modelId\": 1519,\n        \"modelName\": \"C 650 GT Highline\",\n        \"yearName\": 2019,\n        \"articleId\": 3010\n    },\n    {\n        \"modelId\": 1521,\n        \"modelName\": \"C 650 Sport\",\n        \"yearName\": 2019,\n        \"articleId\": 3014\n    },\n```",
    "Models by {Make ID} / {Year} / {Category}: get model by make ID, year and category:\n\nex: /api/v1/model/make-id/55/2010/Sport",
    "Models by {Make ID} and {Category}: Get all models  by make ID and category\nex: /api/v1/model/make-id/100/category/Sport\n\nsample:\n\n```\n    {\n        \"modelId\": 2713,\n        \"modelName\": \"Altino 125 ES\",\n        \"yearName\": 2004,\n        \"categoryName\": \"Sport\",\n        \"priceName\": null,\n        \"articleId\": 5559\n    },\n    {\n        \"modelId\": 2730,\n        \"modelName\": \"Daystar 125 FI\",\n        \"yearName\": 2011,\n        \"categoryName\": \"Sport\",\n        \"priceName\": \" Euro 2990.  Prices depend on country, taxes, accessories, etc.\",\n        \"articleId\": 5590\n    },\n    {\n        \"modelId\": 2745,\n        \"modelName\": \"RoadSport\",\n        \"yearName\": 2015,\n        \"categoryName\": \"Sport\",\n        \"priceName\": null,\n        \"articleId\": 5610\n    }\n```",
    "Models by {Make ID}: Get all model list by make ID\n/model/make-id/{id}\n\nsample:\n\n```\n    {\n        \"id\": 1514,\n        \"name\": \"450 Sports Enduro\"\n    },\n    {\n        \"id\": 1515,\n        \"name\": \"C 400 GT\"\n    },\n    {\n        \"id\": 1516,\n        \"name\": \"C 400 X\"\n    },\n    {\n        \"id\": 1517,\n        \"name\": \"C 600 Sport\"\n    },\n    {\n        \"id\": 1518,\n        \"name\": \"C 650 GT\"\n    },\n    {\n        \"id\": 1519,\n        \"name\": \"C 650 GT Highline\"\n    },\n    {\n        \"id\": 1520,\n        \"name\": \"C 650 GT Highline LS\"\n    },\n```",
    "Specific Skin: retrieve name, price, icon, class and weapon for a specific counterstrike skin \n(prices for field tested condition in USD)\n\n(replace skin_name, underscores instead of spaces)\n\nExample: /api/AK-47_Redline"
  ],
  "105": [
    "Get Weather Tile: Get a transparent weather tile according to the [Web Tile Standard(https://en.wikipedia.org/wiki/Tiled_web_map).",
    "Get By Climate: Get plants by climate of their natural habitat.",
    "City Prediction: Returns the estimated price for a given City and its expected day-to-day change (in cents). View the `/predictions-list` endpoint to view the list of valid cities.",
    "Predictions: Provides a current prediction of tomorrow's gas price provided by Dan McTeague's [gaswizard.ca](https://gaswizard.ca/gas-price-predictions/). Returns all estimated city prices and their expected day-to-day change (in cents).",
    "ecoweather: Retrieve historical weather data for a location. Dataset lasts back until year 2016. Results are limited to 366 days (1 year)  per request.",
    "open weather: weathermap",
    "weather: weather",
    "GetClimateScoreByGps: Get climate score for a specific location mapped to some industries/disasters with a given gps position.",
    "GetClimateScoreByAddress: Get climate score for a specific location mapped to some industries/disasters with a given address.",
    "Air Quality History: Returns the past 24 hours of air quality observations for any point in the world given a lat/lon."
  ],
  "28": [
    "Your Vinyl Store: Best vinyl records in your collection",
    "Your Vinyl Store_copy: Best vinyl records in your collection",
    "Search by url: Given a **Spotify url**, this returns details about *tracks*, *albums* and *artists*.",
    "Get artist's albums: Given a **Spotify url**,  returns basic details about albums of artist.",
    "Search by query: Given a **query** and **type** of element, this returns details about *tracks*, *albums* and *artists*.",
    "Download Track: Download a track by passing the details from the fetch track API",
    "Fetch Track Details: Download a track mp3 file returned by the download endpoint",
    "Song trimming/extending: Trims a song or video, outputting as a URL (similar to the concatenation function). Like the output from concat, one must send a GET request to the URL returned in order to retrieve the actual output.\nSpecify trim start and end after the URL, optionally omitting them by replacing them with an empty string or dash (-). Accepts input in number of seconds, as well as time formats such as *2h30m* or *1:53:30*.\nIf the trim end passes the end of the song, it will automatically be extended by looping back from the beginning. This is *much* faster than concatenating multiple copies of the same song, as it skips re-encoding every single copy, allowing it to produce 10-hour extensions of songs or videos in seconds. Output format can additionally be specified after trim end.\nSee https://mizabot.xyz/downloader for more info as well as test usage of this endpoint.",
    "Download Bandcamp Track: Supply any Bandcamp track URL & get downloadable links, alongwith:\n\n- Track name\n- Related Album Name\n- Track Published date\n- Duration\n- Thumbnail\n- Artist name\n- Downloadable Mp3 file link",
    "Get Album Details: Fetch:\n- Album Name\n- 2. Album Description\n- 3. Album Thumbnail URL\n- 4. Artist Name\n- 3. Total Tracks Count\n- 4. Each Track URLs\n- 5. Each Track Names\n- 6. Each Track Durations"
  ],
  "26": [
    "Billboard Global Excl. US: Billboard Global Excl. US. Available from SEPTEMBER 19, 2020",
    "Billboard 200: Provide the Billboard 100 chart information.",
    "Billboard Global 200: Provide Billboard Global 200 chart information. Available from SEPTEMBER 19, 2020",
    "BILLBOARD JAPAN HOT 100: Provide the BILLBOARD JAPAN HOT 100 chart information",
    "Top Artists - Male: Provide the YEAR-END Top Artists - Male chart information\n\nIf `year` is not supplied, will default to last year.",
    "Top Artists - Female: Provide the YEAR-END Top Artists - Female chart information\n\nIf `year` is not supplied, will default to last year.",
    "Billboard 200 Albums: Provide the YEAR-END Billboard 200 Albums chart information\n\nIf `year` is not supplied, will default to last year.",
    "Top Labels: Provide the YEAR-END Top Labels chart information\n\nIf `year` is not supplied, will default to last year.",
    "Top New Artists: Provide the YEAR-END Top New Artists chart information\n\nIf `year` is not supplied, will default to last year.",
    "Top Artists - Duo/Group: Provide the YEAR-END Top Artists - Duo/Group chart information\n\nIf `year` is not supplied, will default to last year."
  ],
  "92": [
    "Hot 100: Provide the Hot 100 chart information",
    "HOT 100: Provide the HOT 100 chart information",
    "Preview_GetTrackMasterStatus: Rate Limits: 100 requests per minute",
    "Master_GetTrackMasterStatus: Rate Limits: 100 requests per minute",
    "Master_GetDownloadPath: Rate Limits: 100 requests per minute",
    "results: Returns latest results for a query associated to a given `webhookId`.",
    "Total Population: Returns the estimated total population\n\n- Number in millions.",
    "/roll: Rolls a set of dice and returns the results.\n\nMethods: GET, POST\n\nParameters:\n\nsides (integer): A list of integers representing the number of sides for each die.\ncount (integer): A list of integers representing the number of times to roll each die. Defaults to 1 if not provided.\nmodifier (integer): A list of integers representing the modifier to apply to the total of each die roll.\nadvantage (boolean): If set to true, rolls each die twice and takes the higher result.\ndisadvantage (boolean): If set to true, rolls each die twice and takes the lower result.",
    "Achievement list: Returns a full list of achievements with information on what needs to be done to get the achievement and what percentage of players have achieved it.",
    "warzone/Rollosis/psn: Warzone stats for Rollosis"
  ],
  "62": [
    "Artist 100: Provide the Artist 100 chart information.",
    "Artist Leaderboard: Artist Leaderboard",
    "Artist Activity: Artist Activity",
    "Album Appearances: Album Appearances",
    "Artist Songs: Documents (songs) for the artist specified.",
    "Artist Albums: Get artist albums",
    "Artist Details: An artist is how Genius represents the creator of one or more songs (or other documents hosted on Genius). It's usually a musician or group of musicians.",
    "Chart: Artists: Chart: Artists",
    "Adult Alternative Artists: Provide the Greatest of All Time Adult Alternative Artists chart information",
    "Alternative Artists: Provide the Greatest of All Time Alternative Artists chart information"
  ],
  "89": [
    "random girl-group: Get random girl-group",
    "random boy-group: Get random boy-group",
    "random idol: Get random idol",
    "random song: Get random K-POP song",
    "Random Philosopher: Returns information of a random philosopher",
    "Random Roman God: Returns information about a random Roman God",
    "Regular die: Roll one regular die.",
    "Custom die: Roll one die with any number of sides.",
    "Regular dice: Roll any number of regular dice.",
    "Custom dice: Roll any number of dice with any number of sides."
  ],
  "17": [
    "songs: Get K-POP songs info",
    "Song Recommendations: Song Recommendations",
    "Song Lyrics: Song Lyrics",
    "Chart: Songs: Chart: Songs",
    "Song Details: A song is a document hosted on Genius. It's usually music lyrics.\n\nData for a song includes details about the document itself and information about all the referents that are attached to it, including the text to which they refer.",
    "Get top Songs: tujhe dekha toh as of now",
    "New Zealand Songs: Provide the New Zealand Songs chart information",
    "U.K. Songs: Provide the U.K. Songs chart information",
    "Turkey Songs: Provide the Turkey Songs chart information",
    "Taiwan Songs: Provide the Taiwan Songs chart information"
  ],
  "198": [
    "IP address check: Retrieves the host (server) and remote (your) IP addresses. A fast and responsive endpoint that is also handy for checking whether the service is online.",
    "1.GetAPIstatus: This is a method to get information about the current state of the API. If everything is OK, you will receive an \"OK\" message. Otherwise, you'll see some error.",
    "verify transactions (logs): You can confirm successful transactions using this API.",
    "Health Check: health check",
    "Availability: This simple API for Wayback is a test to see if a given url is archived and currenlty accessible in the Wayback Machine. This API is useful for providing a 404 or other error handler which checks Wayback to see if it has an archived copy ready to display. The API can be used as follows:",
    "Ping: Test how long a response from remote system takes to reach the ViewDNS server. Useful for detecting latency issues on network connections.",
    "Read Root: Ping the API.",
    "/health: API health information.",
    "/email-validator/health: Return the health status of the API. Returns current UTC time.",
    "Get Scan Status: Check the status of a scan (ongoing/completed) using a scan ID."
  ],
  "5": [
    "Song download/convert: Searches, downloads, converts, and uploads the song URL simultaneously, streaming the file with very little delay. Song URL may be from any platform supported by Youtube-DL/FFmpeg, which are used as part of the backend.\nThis endpoint is the fastest to respond out of all the available ones for song downloading, but will only support *mp3*, *opus*, *ogg*, and *wav* as output formats (no video downloading). Quality will be maximum by default, or 224kbps if conversion is required. For those wishing to use this API as a backend for their own Discord bot, the opus format output is compatible with direct playback through Discord's voice websocket.\nFor testing purposes, the *download* query key may be changed to *view*, which will stream the same file, but without the attachment disposition, allowing it to play as audio in a browser while being downloaded.",
    "Song concatenation: Joins one or more audio or video files into a single file.\nInputs are specified by URLs specified by query parameters \"u1\", \"u2\", etc. These URLs may be playlists, which will perform the concat operation on all contained tracks.\nOutput format supports most video and audio formats. See https://mizabot.xyz/downloader for list of available formats, as well as test usage of this API.\nMay or may not be the same input format, codec, or framerate/resolution/aspect ratio (if it is a video), but will take much longer to provide a response compared to the download endpoint, because it must finish all conversion before it can begin streaming.\nRedirects to a URL which will return the output file. This download link will be reusable, but temporary.",
    "Videos: Videos",
    "/youtube/milestone/{milestone}: Fastest to Youtube music video to X views milestone. Note: X: 100 - 7000 (million views), X must increase by an increment of 100. E.g: 100, 200, 300,...etc",
    "/youtube/trending/countries/{countryID}: Youtube trending music and non-music videos in all countries / or in a specific country. Leave {countryID} blank for all countries.",
    "/youtube/video/{videoID}: Specific Youtube music video statistics",
    "/youtube/topviews/published/{year}: Top Youtube viewed videos that was published in year X (X: 2010 - now)",
    "/youtube/topcomments: Top Youtube commented videos of all time",
    "/youtube/toplikes: Top Youtube liked videos of all time",
    "/youtube/topviews/{year}: Top Youtube viewed videos all time / on a specific year (2007 - now). Leave {year} blank for all time results"
  ],
  "44": [
    "Song search: Searches for a song from popular song platforms.\nThe API will search YouTube for the item by default. Prepend *scsearch:* to the search term to specify a search from SoundCloud, *spsearch:* for Spotify, or *bcsearch:* for BandCamp.\nUnlike all other endpoints provided by this API, this endpoint can actually be used infinitely free of charge or quota. Simply direct your request directly to [http://i.mizabot.xyz/ytdl?search=](http://i.mizabot.xyz/ytdl?search=) instead of rapidapi's forwarded URL. This may be done for all other endpoints too, however there will be a rate limit in place.",
    "/public/search/introspection: Allows you to fetch all different enums needed for sending API requests",
    "Search Data: Data also referred as case is searched using this api",
    "/v1/motorcycles: API Ninjas Motorcycles API endpoint. Returns up to 30 motorcycle results matching the input name parameters. For searches that yield > 30 results, please use the offset parameter.\n\nEither **make** or **model** parameter must be set.",
    "Global Result (single): Keyword Research API",
    "Search: This endpoint is used to search for news from Google News based on keywords. The mandatory parameter to be used is **keyword** to specify the search term",
    "/v1/search_free: **Up to 100 articles per 1 API call even with free Basic Plan.**\nFree search. Only the language filter is allowed.",
    "storeSearch: Used to retrieve assets from query",
    "Onyomi reading: The Advanced Search URL parameters are described here as individual endpoints to permit per parameter testing. Parameters may be combined as required.",
    "Kunyomi reading: The Advanced Search URL parameters are described here as individual endpoints to permit per parameter testing. Parameters may be combined as required."
  ],
  "190": [
    "Playlist extraction: Produces information on all songs in a playlist (YouTube, Spotify, SoundCloud, etc), with much faster response time than most other available tools. Currently O(1) for YouTube, O(log n) for Spotify, and O(log n) for SoundCloud. See [this article](http://i.mizabot.xyz/f/Bc9AUlCRkA) for the algorithm behind the YouTube playlists specifically.",
    "Get User: Retrieve a user\u2019s page. A user may own videos or playlists.",
    "Search: Search YouTube music Returns results within the provided category.",
    "List User Public Playlists: This endpoint lists public playlists of a user. Pagination scraping is supported.",
    "List Genre Contents: This endpoint lists sub-genres, playlists, podcasts, albums, etc. of a genre. Pagination scraping is supported.",
    "Search: This endpoint searches for albums, artists, episodes, genres, playlists, podcasts, and users. Pagination scraping is supported.",
    "List Podcast Episodes: This endpoint lists all episodes of a podcast.",
    "Get Podcast Metadata: This endpoint fetches full details of a podcast.",
    "Get Episode (Downloadable Audio): This endpoint fetches full details of an episode. Downloadable URL of full audio is available for **some** of the episodes.",
    "List Playlist Tracks and Episodes: This endpoint lists tracks and episodes in a playlist."
  ],
  "193": [
    "getAllStation: You will get all recent stations  here, based on.\n- limit (integer)\n- order (string)\n- page (integer)\n- random (boolean)",
    "searchStation: Search Radio station by keywords.\n- keyword = radio name, country name\n- limit = item limitation per page ***default 10***\n- page = page number to be displayed ***default 1***\n- order = order by ASCENDING/DISASCENDING  *(use only ASC or DESC)* ***default ASC***",
    "Paginated: Get all cat breed results in a set of 10 per page.",
    "Paginated: Get all dog breed results in a set of 10 per page.",
    "countPages: Count website pages in Google index",
    "Pages: Get the list of avilable `{page_id}`s. Akin to the /crypto and /media sites on biztoc.com. Required parameter for endpoints like **Tags/Trending**.",
    "Getallcategories: <p>Searches for all the available categories.<br></p>\n\n<h3>FILTERS</h3>\n<table>\n\t<thead>\n\t\t<tr>\n\t\t\t<td>Filter</td>\n\t\t\t<td>Description</td>\n\t\t</tr>\n\t</thead>\n\t<tbody>\n\t\t<tr>\n\t\t\t<td><code>ids</code></td>\n\t\t\t<td>Filter categories by the ids given</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td><code>limit</code></td>\n\t\t\t<td>Limit size of the search</td>\n\t\t</tr>\n<tr>\n\t\t\t<td><code>page</code></td>\n\t\t\t<td>Pagination number.</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td><code>sinceId</code></td>\n\t\t\t<td>Filter categories since the Id given</td>\n\t\t</tr>\n\t\t<tr>\n      \t\t<td><code>name</code></td>\n      \t\t<td>Filter categories by name</td>\n    \t</tr>\n\t\t<tr>\n\t\t\t<td><code>productId</code></td>\n\t\t\t<td>Filter categories by product id</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td><code>siteId</code></td>\n\t\t\t<td>Filter items by site id </td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td><code>offset</code></td>\n\t\t\t<td>Lower limit of the results block. Modifies the range of the results provided, range goes from offset to limit</td>\n\t\t</tr>\n\t</tbody>\n</table>",
    "Getallcustomers: <h3>FILTERS</h3>\n<table>\n\t<thead>\n\t\t<tr>\n\t\t\t<td>Filter</td>\n\t\t\t<td>Description</td>\n\t\t</tr>\n\t</thead>\n\t<tbody>\n\t\t<tr>\n\t\t\t<td><code>ids</code></td>\n\t\t\t<td>Filter cutomers by Id's provided</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td><code>limit</code></td>\n\t\t\t<td>Limit size of the search</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td><code>page</code></td>\n\t\t\t<td>Pagination number.</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td><code>sinceId</code></td>\n\t\t\t<td>Filter customers since the Id given</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td><code>createdAt[from]</code></td>\n\t\t\t<td>Filter customers by date created from. When used <code>createdAt[to]</code><i>Required</i></td>\n\t\t</tr>\n\t\t<tr>\n      \t\t<td><code>createdAt[to]</code></td>\n      \t\t<td>Filter customers by date created to. When used <code>createdAt[from]</code><i>Required</i></td>\n    \t</tr>\n\t\t<tr>\n\t\t\t<td><code>updatedAt[from]</code></td>\n\t\t\t<td>Filter customers by date updated from. When used <code>updatedAt[to]</code><i>Required</i></td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td><code>updatedAt[to]</code></td>\n\t\t\t<td>Filter customers by date updated to. When used <code>updatedAt[from]</code><i>Required</i></td>\n\t\t</tr>\n\t\t<tr>\n      \t\t<td><code>name</code></td>\n      \t\t<td>Filter categories by name</td>\n    \t</tr>\n\t\t<tr>\n      \t\t<td><code>search</code></td>\n      \t\t<td>Search by string</td>\n    \t</tr>\n\t\t<tr>\n      \t\t<td><code>email</code></td>\n      \t\t<td>Search customers by email</td>\n    \t</tr>\n\t\t<tr>\n\t\t\t<td><code>offset</code></td>\n\t\t\t<td>Lower limit of the results block.\n\t\t\t\tModifies the range of the results provided range goes from offset to limit</td>\n\t\t</tr>\n\t</tbody>\n</table>",
    "Search: Search for product offers - both free-form queries and GTIN/EAN are supported. Each page contains up to 30 product offers. Infinite pagination/scrolling is supported using the *page* parameter.",
    "Product Reviews: Get all product reviews. Infinite pagination/scrolling is supported using the *limit* and *offset* parameters."
  ],
  "164": [
    "getAllCountry: Get all countries Name based on.\n- limit\n- page\n- order",
    "Get Countries: Get country list",
    "Search Country: Search country if they had an active pageant contest.",
    "Origin: Gives a list of all cats with the origin country.",
    "All countries names: Returns all countries english full names. Useful when need to know wich country names to search for.",
    "Origin: Gives a list of all dogs with the origin country.",
    "countryList: Get Arabic & English Country list",
    "Tier1: List our tier 1 proxies with filters\nThis proxies are more comprehensively checked\n\n\nYou can set type which is just your proxy type, either HTTP, HTTPS\n\nfor limit set an integer that will tell us how many proxies you will need. Our users usually set a limit to avoid using too many credits.\n\nWith latency you can set an integer which will filter out all proxies that have a latency higher then specified.\n\nssl is a boolean parameter, you can filter out proxies that support ssl or don't\n\nis_anonymous is also a boolean statemet where you can filter anonymous proxies\n\ncountry is a parameter that you can use to set a country that you want.",
    "countries/list: List countries that Asos supports selling products",
    "Stores: Obtain a list of all stores in a specified country."
  ],
  "113": [
    "User Contributions (unreviewed annotations): User Contributions (unreviewed annotations)",
    "User Contributions (transcriptions): User Contributions (transcriptions)",
    "User Contributions (q&a): User Contributions (q&a)",
    "User Contributions (pyongs): User Contributions (pyongs)",
    "User Contributions (articles): User Contributions (articles)",
    "User Contributions (annotations): User Contributions (annotations)",
    "User Contributions (all): User Contributions (all)",
    "User Accomplishments: User Accomplishments",
    "Chart: Referents: Chart: Referents",
    "Consumer Address Search: Find relevant People in the Data Axle database"
  ],
  "53": [
    "User Contributions (suggestions): User Contributions (suggestions)",
    "Movie Suggestions: Returns 4 related movies as suggestions for the user",
    "Suggest: This endpoint is used to get autocomplete suggestions or query predictions as a user types a search query. The endpoint requires the **keyword** parameter, which represents the partial text entered by the user. You can send a request with the partial text, and the request will generate a JSON response containing a list of relevant autocomplete suggestions for the search query.",
    "agents/get-recommendations: Get agent's recommendations",
    "Suggest: Suggest search. Search Suggest automatically recommends popular searches as you type your query into the search field",
    "Suggest: Suggest search. Search Suggest automatically recommends popular searches as you type your query into the search field",
    "Suggest: Suggest search. Search Suggest automatically recommends popular searches as you type your query into the search field",
    "suggestqueries: Use this endpoint to fetch Suggestions",
    "listAllSuggestions: This endpoint allows you to access a wide range of recommendations, suggestions, or related items based on contextual information.",
    "Suggestions: This operation provides suggestions for a given query or partial query."
  ],
  "169": [
    "User Following: User Following",
    "List User Followings: This endpoint lists users that follow the specified user.",
    "User Followings: Get user followings\n\n**NOTE:** By using **user_id** instead of the username your request will be executed much faster\n**NOTE:** Profile should be public(not private)",
    "Get user following: Get user following list",
    "User Following: Get user following",
    "Get user follow list: Get user follower or following",
    "User Following: User Following API",
    "GET Following by id: Get 12 following user information per request",
    "GET Following by username: Get 12 following user information per request",
    "/v1/user/{user_id}/followings: User following list"
  ],
  "159": [
    "User Followers: User Followers",
    "User followers: Get user followers",
    "List User Followers: This endpoint lists part of a user's followers.",
    "User followers: Get user followers",
    "List User Followers: This endpoint lists a user's followers.",
    "Top 20 by followers: Amount of followers in millions.",
    "User followers: Get user followers",
    "[NEW] Get Channel Followers Count: Get Channel Followers Count",
    "Followers of account by ID: Get **Followers** of account by **ID**",
    "/api/userinfo/: Get avatar and followers, likes and videos count of a user by \"id\""
  ],
  "187": [
    "User Details: User Details",
    "User details: get user details of any Spotify user",
    "Get Single User: Get information on a specified user, including the `email`, `name`, and `thumbnail`. The endpoint also indicates if the user has two factor authentication methods enabled.",
    "Get Requesting User Details: Get detailed user information that is associated to the account",
    "Get Multiple Users: Get information on all or multiple users in your Enterprise Hub. Use the optional parameters to return a more narrow range of users.The information returned for each user includes userId , status, email, lastActive, and more.",
    "User Data: Get minecraft user data.",
    "Get users: sdfsdfsdf",
    "Simbrief - Get latest OFP: Get latest ofp in xml (default) or json based on username\nthe json param must be 0 or 1",
    "GetUser: Gets and returns the current user data from the associated userId.",
    "Sample user read: Sample user read"
  ],
  "77": [
    "Leaderboard: Leaderboard",
    "Top Players by Royal: Get the top players by their royal rank.",
    "Top Players by Matchmaking: Get the top players by their matchmaking rank.",
    "Ranks: Check a player's ranks:\n`rocket-league1.p.rapidapi.com/ranks/:player`",
    "Season Skill Rating MW 2 Ranked: Get season Skill Rating for top 250 players, MW 2 ranked Leaderboard",
    "Season Career Leaderboard WZ2: Get season career information for up to 2000 players on the leaderboard.",
    "Season Kills Leaderboard WZ2: Get season kills information for up to 2000 players on the leaderboard.",
    "Season Wins Leaderboard WZ2: Get season wins information for up to 2000 players on the leaderboard.",
    "Career Leaderboard WZ2: Get top career information for up to 2000 players on the leaderboard.",
    "Season Critical Damage Leaderboard WZ2: Get season critical damage information for up to 2000 players on the leaderboard."
  ],
  "188": [
    "Annotation Versions: Annotation Versions",
    "Python 3 Versions: Python 3 Versions",
    "Objective-C Versions: Objective-C Versions",
    "Visual Basic Versions: Visual Basic Versions",
    "Haskell Versions: Haskell Versions",
    "Pascal Versions: Pascal Versions",
    "Java Versions: Java Versions",
    "Go Versions: Go Versions",
    "Ruby Versions: Ruby Versions",
    "PHP Versions: PHP Versions"
  ],
  "67": [
    "Album Comments: Album Comments",
    "Song Comments: Song Comments",
    "List User Comments: This endpoint lists a user's comments.",
    "List Track Comments: This endpoint lists comments of a track. Pagination scraping is supported.",
    "Get comments with product id: Retrieve comments based on a product id.",
    "Get Comments from product id: Retrieve comments based on a product id.",
    "Get Comments from product id: Retrieve comments based on a product id.",
    "Get Comments from product id: Retrieve comments based on a product id.",
    "Get comments with product id: Retrieve comments based on a product id.",
    "comments.get: Get comments from our database for a specific song."
  ],
  "106": [
    "song by {id}: returns song when searched by id",
    "Get radio playlist: Get artist or song radio",
    "Playlist tracks: Get playlist tracks",
    "Get playlist: Get playlist",
    "Get Watch Playlist: Get a watch list of tracks. This watch playlist appears when you press play on a track in YouTube Music.\n\n\nList of watch playlist items. The counterpart key is optional and only appears if a song has a corresponding video counterpart (UI song/video switcher).",
    "Get Song Related: Gets related content for a song. Equivalent to the content shown in the \u201cRelated\u201d tab of the watch panel.",
    "Get User Playlists: Retrieve a list of playlists for a given user. Call this function again with the returned params to get the full list.",
    "songs/list-recommendations: Similar songs based on song id",
    "songs/get-track-listening-count: Returns the number of times a particular song has been played",
    "List Artist Playlists/Featuring/DiscoveredOn: This endpoint lists playlists associated with an artist."
  ],
  "175": [
    "Adult Alternative Songs: Provide the Greatest of All Time Adult Alternative Songs chart information",
    "Top R&B/Hip-Hop Artists: Provide the Greatest of All Time Top R&B/Hip-Hop Artists chart information",
    "Hot Latin Songs Artists: Provide the Greatest of All Time Hot Latin Songs Artists chart information",
    "Hot 100 Women Artists: Provide the Greatest of All Time Hot 100 Women Artists chart information",
    "Mainstream Rock Artists: Provide the Greatest of All Time Mainstream Rock Artists chart information",
    "Mainstream Rock Songs: Provide the Greatest of All Time Mainstream Rock Songs chart information",
    "Alternative Songs: Provide the Greatest of All Time Alternative Songs chart information",
    "Top R&B/Hip-Hop Albums: Provide the Greatest of All Time Top R&B/Hip-Hop Albums chart information",
    "Hot R&B/Hip-Hop Songs: Provide the Greatest of All Time Hot R&B/Hip-Hop Songs chart information",
    "Top Dance Club Artists: Provide the Greatest of All Time Top Dance Club Artists chart information"
  ],
  "165": [
    "Download Track on YouTube (3 Quotas): Provides a solution to download a Spotify track on YouTube and returns URLs of audio files. (Powered by [Youtube Media Downloader](https://rapidapi.com/DataFanatic/api/youtube-media-downloader/). Get a better price by subscribing to and using it directly.)",
    "Download Track on SoundCloud (3-4 Quotas): Provides a solution to download a Spotify track on SoundCloud. HQ (4 Quotas) and SQ (3 Quotas) audios. (Tutorial: [How to Use SoundCloud Audio URLs](https://rapidapi.com/DataFanatic/api/soundcloud-scraper/tutorials/how-to-use-audio-urls)) (Powered by [SoundCloud Scraper](https://rapidapi.com/DataFanatic/api/soundcloud-scraper/). Get a better price by subscribing to and using it directly.)",
    "Download Lyrics on Spotify (2 Quotas): This endpoint provides a solution to download a track's lyrics on Spotify. (Powered by [Spotify Scraper](https://rapidapi.com/DataFanatic/api/spotify-scraper/))",
    "Get Quota Export: Download Quota Export file for a specific month",
    "Get MP3: Convert to MP3 at the default bit rate.\nQuota cost will apply according to the length of the mp3 file.",
    "Channel Playlists: Get playlist listing and channel details.\nQuota cost is 1 unit.",
    "Shorts Details: Get Youtube Shorts video info or get **Suggested** Shorts video info.\nQuota cost is 1 unit for Shorts Video Info\nQuota cost is 2 units for suggested Shorts Video Info.",
    "Video Details: Get all the details of the YouTube video.\nQuota cost is 1 unit.",
    "Resolve URL: Resolve URLs like handles, etc.\nQuota cost is 1 unit.",
    "Search: Search videos, playlists, channels, or all of them.\nQuota cost is 1 unit."
  ],
  "21": [
    "Concerts: Concerts",
    "Genre View: Genre View",
    "Podcast Episodes: Podcast Episodes",
    "Top 20 by Monthly Listeners: Monthly listeners in millions.",
    "Sort live giveaways: Insert sort by, eg: date, value, popularity",
    "All live giveaways: Get all live giveaways.",
    "title/list-popular-genres: List popular genres",
    "title/get-most-popular-tv-shows: Get most popular TV shows",
    "title/list-popular-genres: List popular genres",
    "title/get-most-popular-tv-shows: Get most popular TV shows"
  ],
  "182": [
    "\u200b/youtube/weekly/{year}/{nthweek}: Most viewed youtube music videos on ...nth week of  ....year  (E.g 21st week of 2019: /youtube/weekly/2019/21)",
    "Bolivia Songs: Bolivia Songs chart \nis weekly based. \n\nIf `week` is not supplied, will default to last week. \nif the week date is not Saturday, will default to Saturday of that week",
    "Slovakia Songs: Slovakia Songs chart \nis weekly based. \n\nIf `week` is not supplied, will default to last week. \nif the week date is not Saturday, will default to Saturday of that week",
    "Romania Songs: Romania Songs chart \nis weekly based. \n\nIf `week` is not supplied, will default to last week. \nif the week date is not Saturday, will default to Saturday of that week",
    "Austria Songs: Austria Songs chart \nis weekly based. \n\nIf `week` is not supplied, will default to last week. \nif the week date is not Saturday, will default to Saturday of that week",
    "Chile Songs: Chile Songs chart \nis weekly based. \n\nIf `week` is not supplied, will default to last week. \nif the week date is not Saturday, will default to Saturday of that week",
    "Iceland Songs: Iceland Songs chart \nis weekly based. \n\nIf `week` is not supplied, will default to last week. \nif the week date is not Saturday, will default to Saturday of that week",
    "Hungary Songs: Hungary Songs chart \nis weekly based. \n\nIf `week` is not supplied, will default to last week. \nif the week date is not Saturday, will default to Saturday of that week",
    "Brazil Songs: Brazil Songs chart \nis weekly based. \n\nIf `week` is not supplied, will default to last week. \nif the week date is not Saturday, will default to Saturday of that week",
    "Norway Songs: Norway Songs chart \nis weekly based. \n\nIf `week` is not supplied, will default to last week. \nif the week date is not Saturday, will default to Saturday of that week"
  ],
  "127": [
    "List User Likes (Tracks, Playlists): This endpoint lists tracks, playlists and albums liked by the specified user.",
    "View User List: Gets a user\u2019s list of favorite libraries.",
    "users.favorite.get: Get a user\u2019s favorites by specified type.",
    "originals/episodes/get-likes: Get likes count of a episode",
    "canvas/episodes/get-likes: Get likes count of a episode",
    "Post Likers: Get users that liked specific post\n\n**NOTE:** Profile should be public(not private)",
    "User Likes: Get user's likes",
    "Get user favorite list: get user favorite list id",
    "Liked Posts: Liked Posts API",
    "/v1/post/user/{user_id}/liked_posts: User liked video feed"
  ],
  "138": [
    "shazam-events/list: List future events",
    "Get Organization Audit Log: Get the audit trail for a specified Organization. Information in the audit trail includes details like `eventName`, `user`, `attributes` and more.",
    "Historic Event By year: Give an year in the query and it returns all the available events from that year",
    "Random Historic Event: Returns a Random World Historic Event with the year and the event",
    "Get Live: In this method you can get all live events score",
    "Get Event Detail: In this api method you can get all of the event detail from the match or event id (exactly same those ids.) you can get this id from the Get Vods or Get Match api methods.",
    "EventLineups: Get event lineups for a specific E-Sports event by providing the event ID.",
    "GetEvents: Get election events",
    "GetFutureEvents: Get future election events",
    "GetFutureEventsByTopic: Get future election events by topic"
  ],
  "51": [
    "247NaijaBuzz Media: For Flash Music Download",
    "Get Media Links: Get Media Links",
    "get media: Get Media",
    "fetch all mediabiasfactcheck.com data: get request that returns entire mediabiasfactcheck.com database as a json.",
    "get-upload: Get a user's upload by ID (deprecated).",
    "list-uploads: Get the user's uploads (deprecated).",
    "get-/media/{id}-adb0e84c-5f56-4e25-8aba-9042e0c3f90f: Get Single Media",
    "get-/media-8125bc02-6037-4c8c-8102-2297920726f0: Scope under which the request is made; determines fields present in response.",
    "Player latest media: Get player's latest media by player_id",
    "Media: Get media by event_id"
  ],
  "104": [
    "Get Channels: Get channel list",
    "Get Clips: Get the latest 50 clips of a channel.",
    "GetChannelById: To get a channel.",
    "Get from eztv: can use this for search eztv",
    "GET the channels description and status: Shows the description, status whether online or offline, number of views",
    "GET the channel stream_url: It has the links and channels name.",
    "Get Channels: Get channel list",
    "Sources: Return a listing of all streaming sources that Watchmode supports. Optionally filter by type of source (subscription, free, etc).",
    "About channel: Return more info about channel",
    "Channel: Channel videos"
  ],
  "168": [
    "online-music: \u0421\u043b\u0443\u0448\u0430\u0442\u044c \u0431\u0435\u0441\u043f\u043b\u0430\u0442\u043d\u043e \u043e\u043d\u043b\u0430\u0439\u043d \u043d\u0430 online-music.su. \u041b\u0443\u0447\u0448\u0438\u0435 \u043f\u0435\u0441\u043d\u0438 \u0440\u0443\u0441\u0441\u043a\u0438\u0445 \u0440\u0435\u0442\u0440\u043e \u0433\u0440\u0443\u043f\u043f \u0438 \u0438\u0441\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u0435\u0439. \u0420\u0443cc\u043a\u0430\u044f \u0440\u0435\u0442\u0440\u043e \u043f\u043e\u043f-\u0440\u043e\u043a-\u0448\u0430\u043d\u0441\u043e\u043d \u043c\u0443\u0437\u044b\u043a\u0430 1970\u0445-2000\u0445, \u043b\u0443\u0447\u0448\u0430\u044f \u0437\u0430\u0431\u0443\u0433\u043e\u0440\u043d\u0430\u044f \u043c\u0443\u0437\u044b\u043a\u0430 \u0440\u0435\u0442\u0440\u043e \u044d\u043f\u043e\u0445\u0438.",
    "UserInfoV2: \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u043f\u0438\u0441\u043a\u0430 \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432, \u043f\u0440\u0438\u043d\u0430\u0434\u043b\u0435\u0436\u0430\u0449\u0438\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044e \u0438\u043b\u0438 \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432, \u0434\u043e\u0441\u0442\u0443\u043f \u043a \u043a\u043e\u0442\u043e\u0440\u044b\u043c \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044e \u0434\u0440\u0443\u0433\u0438\u043c\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c\u0438. \u041e\u0442\u0432\u0435\u0442 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043f\u043e\u043b\u043d\u043e\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u0430 \u0434\u043b\u044f \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432. \u0414\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445 \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u0430 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043f\u0435\u0440\u0435\u0434\u0430\u0442\u044c \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f user_id \u0438 cookie, \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0439 \u043f\u0440\u0438 \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f. \u0414\u0430\u043d\u043d\u044b\u0439 \u043c\u0435\u0442\u043e\u0434 \u0443\u0441\u0442\u0430\u0440\u0435\u043b, \u0436\u0435\u043b\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c /json/v3/user/{user_id}/data. \u0412 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u0430 \u043c\u043e\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c Python-\u0441\u043a\u0440\u0438\u043f\u0442 get_user_info.py \u0438\u0437 \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u044f <a href=\"https://gitlab.com/starline/openapi\">gitlab.com/starline/openapi</a>. \u0412 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0441\u043a\u0440\u0438\u043f\u0442 \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u0432 \u043a\u043e\u043d\u0441\u043e\u043b\u044c \u043e\u0442\u0432\u0435\u0442 \u043d\u0430 \u0437\u0430\u043f\u0440\u043e\u0441. \u041f\u0440\u0438\u043c\u0435\u0440 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e curl: <br><br><code>curl \"https://developer.starline.ru/json/v2/user/1116/user_info\" --cookie 'slnet=780D719C7F54465FB281B4DD65498168'</code>",
    "LibraryEvents: \u0412 \u043e\u0442\u0432\u0435\u0442\u0435 \u043d\u0430 \u0437\u0430\u043f\u0440\u043e\u0441 \u043f\u0440\u0438\u0445\u043e\u0434\u044f\u0442 \u0432\u0441\u0435 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0435 \u0441\u043e\u0431\u044b\u0442\u0438\u044f \u0441 \u043f\u043e\u043b\u043d\u044b\u043c \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435\u043c. \u041f\u0440\u0438\u043c\u0435\u0440 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e curl: <br><br><code>curl \"https://developer.starline.ru/json/v3/library/events\"</code>",
    "UserInfo: \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u043f\u0438\u0441\u043a\u0430 \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432, \u043f\u0440\u0438\u043d\u0430\u0434\u043b\u0435\u0436\u0430\u0449\u0438\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044e \u0438\u043b\u0438 \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432, \u0434\u043e\u0441\u0442\u0443\u043f \u043a \u043a\u043e\u0442\u043e\u0440\u044b\u043c \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044e \u0434\u0440\u0443\u0433\u0438\u043c\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c\u0438. \u041e\u0442\u0432\u0435\u0442 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043f\u043e\u043b\u043d\u043e\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432. \u0414\u0430\u043d\u043d\u044b\u0439 \u043c\u0435\u0442\u043e\u0434 \u0443\u0441\u0442\u0430\u0440\u0435\u043b, \u0436\u0435\u043b\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c /json/v3/user/{user_id}/data. \u0412 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u0430 \u043c\u043e\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c Python-\u0441\u043a\u0440\u0438\u043f\u0442 get_user_info.py \u0438\u0437 \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u044f <a href=\"https://gitlab.com/starline/openapi\">gitlab.com/starline/openapi</a>. \u0412 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0441\u043a\u0440\u0438\u043f\u0442 \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u0432 \u043a\u043e\u043d\u0441\u043e\u043b\u044c \u043e\u0442\u0432\u0435\u0442 \u043d\u0430 \u0437\u0430\u043f\u0440\u043e\u0441. \u041f\u0440\u0438\u043c\u0435\u0440 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e curl: <br><br><code>curl \"https://developer.starline.ru/json/user/4568857/user_info\" --cookie 'slnet=780D719C7F54465FB281B4DD65498168'</code>",
    "DeviceOBDParams: \u0417\u0430\u043f\u0440\u043e\u0441 \u0434\u0430\u043d\u043d\u044b\u0445, \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0445 \u043e\u0442 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f \u0438 \u0445\u0440\u0430\u043d\u044f\u0449\u0438\u0445\u0441\u044f \u0432 \u043a\u0435\u0448\u0435. \u041b\u044e\u0431\u043e\u0439 \u0438\u0437 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c\u044b\u0445 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 (fuel, errors, mileage) \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c null. \u042d\u0442\u043e \u0437\u043d\u0430\u0447\u0438\u0442, \u0447\u0442\u043e \u043b\u0438\u0431\u043e \u043e\u043d \u0435\u0449\u0435 \u043d\u0435 \u0441\u0447\u0438\u0442\u0430\u043d \u0441\u0438\u0441\u0442\u0435\u043c\u043e\u0439 \u0441 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f, \u043b\u0438\u0431\u043e \u0434\u0430\u043d\u043d\u043e\u0435 \u0422\u0421 \u043d\u0435 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u043d\u043e\u0439 \u0432\u0435\u0440\u0441\u0438\u0435\u0439 CAN \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438, \u043b\u0438\u0431\u043e \u0434\u0430\u043d\u043d\u044b\u0435 \u043d\u0435\u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e \u0441\u0447\u0438\u0442\u0430\u0442\u044c \u0447\u0435\u0440\u0435\u0437 CAN. \u041f\u0440\u0438\u043c\u0435\u0440 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e curl: <br><br><code>curl \"https://developer.starline.ru/json/v1/device/4568857/obd_params\" --cookie 'slnet=15CFA19BFD3E8884C716FFA4E39AF866'</code>",
    "LibraryEventsId: \u0412 \u043e\u0442\u0432\u0435\u0442\u0435 \u043d\u0430 \u0437\u0430\u043f\u0440\u043e\u0441 \u043f\u0440\u0438\u0445\u043e\u0434\u0438\u0442 \u0441\u043e\u0431\u044b\u0442\u0438\u0435 \u0441 \u043f\u043e\u043b\u043d\u044b\u043c \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435\u043c. \u041f\u0440\u0438\u043c\u0435\u0440 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e curl: <br><br><code>curl \"https://developer.starline.ru/json/v3/library/events/307\"</code>",
    "UserDevices: \u041e\u0442\u0432\u0435\u0442 \u043d\u0430 \u0437\u0430\u043f\u0440\u043e\u0441 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0441\u043f\u0438\u0441\u043e\u043a \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f, \u0430 \u0442\u0430\u043a\u0436\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u043e \u043a\u0430\u0436\u0434\u043e\u043c \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u0435. \u0414\u0430\u043d\u043d\u044b\u0439 \u043c\u0435\u0442\u043e\u0434 \u0443\u0441\u0442\u0430\u0440\u0435\u043b, \u0436\u0435\u043b\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c /json/v3/user/{user_id}/data. \u041f\u0440\u0438\u043c\u0435\u0440 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e curl: <br><br><code>curl \"https://developer.starline.ru/json/v1/user/1116/devices\" --cookie 'slnet=780D719C7F54465FB281B4DD65498168'</code>",
    "DeviceOBDErrors: \u0417\u0430\u043f\u0440\u043e\u0441 \u0434\u0430\u043d\u043d\u044b\u0445 \u043e\u0431 \u043e\u0448\u0438\u0431\u043a\u0430\u0445 OBD, \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0445 \u043e\u0442 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f \u0438 \u0445\u0440\u0430\u043d\u044f\u0449\u0438\u0445\u0441\u044f \u0432 \u043a\u0435\u0448\u0435. \u041f\u0440\u0438\u043c\u0435\u0440 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e curl: <br><br><code>curl \"https://developer.starline.ru/json/v1/device/4568857/obd_errors\" --cookie 'slnet=780D719C7F54465FB281B4DD65498168'</code>",
    "Device: \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u0443\u043c\u043c\u0430\u0440\u043d\u043e\u0433\u043e \u043e\u0442\u0447\u0435\u0442\u0430 \u043e \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0438 \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u0430. \u0414\u0430\u043d\u043d\u044b\u0439 \u043c\u0435\u0442\u043e\u0434 \u0443\u0441\u0442\u0430\u0440\u0435\u043b, \u0436\u0435\u043b\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c /json/v3/device/{device_id}/data. \u041f\u0440\u0438\u043c\u0435\u0440 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e curl: <br><br><code>curl \"https://developer.starline.ru/json/v2/device/356306052111516\" --cookie 'slnet=780D719C7F54465FB281B4DD65498168'</code>",
    "Digest_Authentication: \u0422\u043e\u043a\u0435\u043d \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u0438 \u043f\u0440\u0435\u0434\u0432\u0430\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0435 StarLineID. \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0439 \u0432 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0435 \u0443\u0441\u043f\u0435\u0448\u043d\u043e\u0433\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u044b cookie \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0432 \u043c\u0435\u0442\u043e\u0434\u0430\u0445 WebAPI \u0434\u043b\u044f \u043f\u0440\u043e\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u044f \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u0438. \u0414\u043b\u044f \u0442\u043e\u0433\u043e \u0447\u0442\u043e\u0431\u044b \u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u043d\u0438\u043c\u0430\u043b, \u0447\u0442\u043e \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044e \u0441\u043b\u0435\u0434\u0443\u0435\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c digest \u043c\u0435\u0442\u043e\u0434\u043e\u043c, \u043a\u043b\u0438\u0435\u043d\u0442 \u0434\u043e\u043b\u0436\u0435\u043d \u043f\u0435\u0440\u0435\u0434\u0430\u0442\u044c \u0432 \u0437\u0430\u043f\u0440\u043e\u0441\u0435 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a 'DigestAuth:true'. username \u2013 slid-token, password \u2013 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u043d\u0430 StarLineID \u0441\u0435\u0440\u0432\u0435\u0440\u0435 (slid user_id). \u041f\u0440\u0438\u043c\u0435\u0440 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e curl: <br><br><code>curl \"https://developer.starline.ru/json/v3/device/357803045497365/data\" -v --digest -u '418db3fe902abe4eb4a6d92ad37ab7a7_276388:276388' -H 'DigestAuth:true'</code>"
  ],
  "0": [
    "Webhook_GetWebhookConfiguration: Get the webhook configuration.",
    "webhooks: Retrieve a list of existing webhooks.",
    "repeat send message: Enter your webhook URL, enter how many times to send the message, and then specify the message to send. Max 10 messages.",
    "send embed: Allows you to send an embed via a webhook. Read the documentation to get this to work.",
    "multi send message: Allows you to send multiple messages with a webhook. More information in the docs. Modify the message_count value to the amount of messages you wish to send, and then specify each of the contents of the messages. If you wish to send the same message several times, use repeat send message.\nMaximum 10 messages at once.",
    "send message: Allows you to send a message with a webhook. More information in the docs.",
    "list-webhooks: List all webhook endpoints.",
    "get-webhook: Get a webhook endpoint.",
    "Get Webhooks: Retrieves all existing webhooks.",
    "webhookList: Retrieves all webhooks"
  ],
  "12": [
    "Get Tenant: Use this call to get the Tenant name, This name will be used in the configuration section on wix. e.g. {\"Yauthtenantname\":\"<TENANT_NAME>\"}",
    "Name to UUID: Provide your Minecraft username",
    "GET username Valorant: Enter the Valorant Riot ID and Tag in the required parameters",
    "GET username PUBG Mobile: Enter your PUBG Mobile ID  in the required parameters\n\nINFO: The API for this game is currently in the process of being maintained",
    "GET username Arena of Valor: Enter your Arena of Valor ID  in the required parameters",
    "GET username Point Blank: Enter your Point Blank ID  in the required parameters",
    "GET username Call of Duty Mobile: Enter your Call of Duty Mobile ID  in the required parameters",
    "GET username Genshin Impact: Enter the Genshin Impact ID and Server in the required parameters",
    "GET username Higgs Domino: Enter your Higgs Domino ID  in the required parameters",
    "GET username Free Fire: Enter your Free Fire ID  in the required parameters"
  ],
  "178": [
    "Get Vault By Name: Get Vault by name",
    "Search By Common Name: returns a list of plants by their common name",
    "Search By Scientific Name: You can search with a scientific name of plant and returns the list of plants matches the query",
    "Search Philosopher By Name: Search for a philosopher by their name",
    "All RTO's: Search for RTO names all over India,\nyou can use this API for autosuggestion",
    "Get All Family By Brand name: Get All Family By Brand name",
    "Search Roman God By Name: Search for a Roman God By name to get a description about them",
    "Get By Latin Name: Retrieves all plants that match the provided Latin plant name.",
    "Get By Common Name: Retrieves all plants that match a given common plant name.",
    "Get Pokemon data by name: Get Pokemon data sing the pokemon name"
  ],
  "179": [
    "Get Schema By Name: Get schema details by name. e.g. car",
    "Search All Cars: This API will fetch you all cars list, \nIf you need bike details change **vehicle_type** from \"car\" to \"bike\".",
    "Breed Type: Gives all results by the type of breed.",
    "Single Cat Breed: Gives details of a single cat breed.",
    "Models by {Make}: Get all models by make name\nex: /model/make-name/BMW\nsample:\n\n```\n    {\n        \"id\": 1514,\n        \"name\": \"450 Sports Enduro\"\n    },\n    {\n        \"id\": 1515,\n        \"name\": \"C 400 GT\"\n    },\n    {\n        \"id\": 1516,\n        \"name\": \"C 400 X\"\n    },\n    {\n        \"id\": 1517,\n        \"name\": \"C 600 Sport\"\n    },\n    {\n        \"id\": 1518,\n        \"name\": \"C 650 GT\"\n    },\n```",
    "List of all Makes: List of all Makes\n[MakeAll]\nGet a list of all makes\nsample:\n\n```\n   {\n        \"id\": \"55\",\n        \"name\": \"BMW\"\n    },\n    {\n        \"id\": \"60\",\n        \"name\": \"BPG\"\n    },\n    {\n        \"id\": \"66\",\n        \"name\": \"BSA\"\n    }\n```",
    "Specifications by {Make} / {Model}: Get Specifications by {Make} / {Model}\n[MakeModelGetCompleteSpecification]",
    "Specifications by {Year} / {Make} / {Model}: GET /article/{year}/{make}/{model}\n[ArticleGetByYearMakeModel]",
    "Production Years (grouped) by {Model ID}: Get makeName, modelName, years, by model Id",
    "Production Years by {Model ID}: Get makeName, modelName, years, by model Id"
  ],
  "30": [
    "Get NFTs: Fetch the list of owned NFTs by the wallet",
    "GetAssetsdetailbyassetid: The API can query every asset_id that exists on reddio's system, if the FT/NFT is not on reddio's system, then the API will not work well\n\nThe API returns assets detail including contract_address, type, token_id(if type is ERC721 or ERC721M), quantum and token owners(owns by who)",
    "Aggregationbalanceofastark_keybycontractaddress: The API aggregation balances by contract address, for previous API, each NFT have an asset_id, but in this API. NFT do not have asset_id when return, but has token id",
    "Listallcollections: The API lists all collections on Reddio's layer2 system.\n\nThe return field is like the following descrption\n\n| **field** | **description** |\n| --- | --- |\n| contract_address | The contract address |\n| symbol | The symbol of |\n| type | ERC721 or ERC721M |\n| total_supply | Total Supply of the token |\n| base_uri | The base uri of NFT |\n| asset_type | The asset type is calculated by reddio, the definition is [here](https://docs.starkware.co/starkex/spot/shared/starkex-specific-concepts.html#computing_asset_info_asset_type_asset_id) |",
    "GetOrderInfo: This API is to get order related information, such as the asset id of base/quota tokens. nonce and vaults related to stark_key\n\n**If you use SDKs(including java/unity/js), you do not need to care about the order info interface, it is already handled by SDK internally**\n\nthe contract1 and contract2 values are like\n\n{type}:{contract_address}:{token_id}\n\nThere are many informations it returns\n\n| **field** | **description** |\n| --- | --- |\n| fee_rate | the upper fee_rate allowed by reddio and marketplace. that is, if reddio & marketplace charge's more then the rate, the order will fail |\n| base_token | base token asset id, in general, if you trade using ETH for NFT, then the base token is ETH's asset id |\n| fee_token | which token as a fee, in general, it is the same as base_token |\n| lower_limit | the lower price of the NFT |\n| nonce | the nonce of the stark_key |\n| contracts | the contracts info of contract1 and contract2 |\n| asset_ids | the asset ids of contract1 and contract2 |\n| vault_ids | first vault id is generated by the stark_key and first asset id, the second vault id is generated by the stark_key and second asset id(you can see the asset_ids above) |",
    "Listcolloction'snftowners: The api returns a collection's nft owners.\n\nThe response field description\n\n| **field** | **description** |\n| --- | --- |\n| contract_address | the contract_address of the collection |\n| token_id | the NFT token id |\n| owner | the owner of the NFT |\n| symbol | the NFT's symbol |\n| asset_id | the token's asset id |",
    "Get Approval For NFT Transfer: Determines whether or not a spender address can transfer the NFTs of an owner address.",
    "Get Collection NFTs: Gets all NFTs in a collection",
    "Get NFT Owner: Gets the owner of a specific ERC-721 NFT.",
    "Get Current NFT Balance for User: Gets the NFT balance of a specific user."
  ],
  "173": [
    "Movie Details: Returns the information about a specific movie",
    "Movie Parental Guides: Returns all the parental guide ratings for the specified movie",
    "List Movies: Used to list and search through out all the available movies. Can sort, filter, search and order the results",
    "Get All Articles: This endpoint will return all articles about movies from various publishers.",
    "title/get-top-rated-tv-shows: Get top rated 250 tv shows",
    "title/v2/get-popular-movies-by-genre: Get popular movies by genre",
    "actors/get-filmography-appearances: Get filmography appearances of an actor, actress, etc...",
    "title/get-meta-data: Get brief information of movies by their id",
    "title/get-filming-locations: Get filming locations information",
    "actors/get-awards-summary: Get awards summary of actor or actress"
  ],
  "124": [
    "Airports: Get data about global airports by providing the IATA code.",
    "airlines/list: List all airlines around the world",
    "airports/list: List all airports around the world",
    "Get Airport List: Returns an up to date list of all IATA Airports in our database.",
    "Get Airline List: This endpoint returns a full list of airlines with their IATA code and full name.",
    "Get Airport Details: This endpoint returns the details such as name and location for a specified IATA airport.",
    "airports - Nonstop routes for an airport by airline: Returns a list of nonstop routes for an airport restricted to an airline",
    "airlines - Airports in a country an airline operates in: Return a list of airports in a country an airline operates in",
    "airlines - Countries airline operates in: Return a list of the countries that an airline operates in",
    "airlines - Direct flights for an airline from an airport: Return a list of direct flights for an airline from an airport"
  ],
  "49": [
    "Countries: Get a list of all countries involved in a pageant contest.",
    "Single contest: Get details of a single pageant contest by its ID.",
    "All pageant contests: Get a list of all pageant contests.",
    "CONTESTS: Get list of contests",
    "Competitions ID: List one competition given by id \ud83d\udd0d.",
    "Competitions: List all available competitions \ud83c\udfc6.",
    "Explore competitions: Get a list of competitions by area_id",
    "Competition data: Get competition data",
    "Competition image: Get competition image",
    "competitions/get-table: Get table by competition and season"
  ],
  "112": [
    "provision: **Runs provisioning on database(s) causing downsampling of data. Provides connection and retention information for account as a result**\n\nMust be run after new measurements or fields are added to datasets (e.q. if new sensor is providing data or additional fields should be stored for existing sensor/measurement).",
    "/opr: Provide latest Overnight Policy Rate.",
    "ESG: Simply explained, an ESG score is a measure of a company's exposure to long-term environmental, social, and governance risks that are often overlooked during traditional financial analyses.",
    "mortgage/check-rates (Deprecated): Check mortgage rates",
    "mortgage/v2/check-rates: Check mortgage rates",
    "mortgage/check-equity-rates: Check mortgage equity rates",
    "vol_strike: This function generates the implied-volatility (lognormal) for a given, specified delta. The convention works with delta of 0.10 is specified via 0.90 in the argument, as we generate the delta from a 'call option' function.\n\nThis is the standard function to generate the 25-delta and 10-delta risk-reversals and butterfly which provides the market-conventions for the volatility-skew and volatility-smile.\n\nstrike_: List  of absolute strikes,\n vols_:  List of lognormal annualized volatilities,\nr_: float of risk-free-rate,\nS_: float of the spot:\nT_ : the time-to-expiry of the option\ndelta_target: float, the desired delta where you want the implied volatility",
    "opt_rho: option lognormal greeks : delta calculates the delta, given where\nS = forward (float), K = strike (float), T = time-to-expiry (float), sigma = implied volatility lognormal (float)\nr = risk-free-rate (float), type_  =call (c) /put (p) (string), ret_= 0 (default) for use in rapidAPI.com",
    "opt_theta: option lognormal greeks : theta calculates the theta, given where\nS = forward (float), K = strike (float), T = time-to-expiry (float), sigma = implied volatility lognormal (float)\nr = risk-free-rate (float), type_  =call (c) /put (p) (string), ret_= 0 (default) for use in rapidAPI.com",
    "opt_vega: option lognormal greeks : vega calculates the vega, given where\nS = forward (float), K = strike (float), T = time-to-expiry (float), sigma = implied volatility lognormal (float)\nr = risk-free-rate (float), type_  =call (c) /put (p) (string), ret_ = 0 (default) for use in rapidAPI.com"
  ],
  "126": [
    "Progress of API Version file upload: Check the progress of an API Version file upload process",
    "Get API Current Version: Get information for the current version of a specified API, including the `id`, `name`, and `status`.",
    "Get API Version OpenAPI: Get a specified API Version's OpenAPI file in REST format.",
    "Get API Version OpenAPI: Get a specified API Version's OpenAPI file.",
    "Get API Version: Get information for a specified version of an API, including the `id`, `name`, and `status`.",
    "Get Billing Plan Version: Get Billing Plan Version",
    "Get All API Versions: Get all the versions (and their corresponding information) that exist for a specified API.",
    "Get version: Returns an actual version of the service in format `vX.Y.Z` where X is the version of API.",
    "Get version: Returns an actual version of the service in format `vX.Y.Z` where X is the version of API.",
    "Get version: Returns an actual version of the service in format `vX.Y.Z` where X is the version of API."
  ],
  "102": [
    "Get Requesting User Teams: Get all of the team ID's that are associated to your account",
    "Get User Teams: Get all of the `organizationTeamIds` for each Team the user is a member of.",
    "Get Team: Get information about a specific Team, including the `name`, `status`, and `description`.",
    "Get Team Users: Get information about all of the users that belong to a specific team. Returned user information includes the user `id`, `email`, `username`, and `lastActive`.",
    "Get All Teams: Get information about all of the Teams in a specific Organization, including the `name`, `status`, and `description` for each Team.",
    "Get Teams And Players: You can get all teams and player this api methods also you can filtered by team id or name.",
    "Get team info: Get comprehensive information about a team, including player details, events, results, and more.",
    "TeamDetails: Get the details for a specific E-Sports team by providing the team ID.",
    "Get a specific task record: return details on a specific oTask or set of oTasks, this format can be used within a company (:companyid), team (:teamid) or user (:userid)",
    "List all Tasks: pull all tasks assigned within a company, team or to a specific user"
  ],
  "140": [
    "Get all Api Tags: Get information about all of the tags associated with an API, including the `tagId`.",
    "Get all Tag Definitions: Get information on all the Tags within your environment",
    "Get Api Tag: Get Tag information for a specific API",
    "Get Tag Definition: Get information on a specific Tag within your environment",
    "Tags: Retrieve blocks and items tags",
    "Tag Search: Get news as per the tag",
    "/SetTag: Change the current tag.",
    "/GetTag: Get the current tag.",
    "Hashtags: Generate hashtags from a given text.",
    "/tags: Returns all Tags"
  ],
  "1": [
    "PACIFIC: Returns a json of all teams inside PACIFIC.",
    "EMEA: Returns a json of all teams inside EMEA.",
    "AMERICAS: Returns a json of all teams inside AMERICAS.",
    "Generate Time Reports for a Specific Team: Time reports can be generated for a specific team, with or without detailed monetary information based on the relationship of the authorized user at the time the call is made and what information is included in the call.",
    "Get game lineup: With \"Get game lineup\" you'll receive the full lineup and if it is confirmed or a forecast",
    "Get pregame form: If you're a detail hunter this is the place for you! Get the information about the last games both teams accomplished.",
    "Get NFL Team Schedule: This call returns the schedule of any team, using the teamID that can be found in \"getNFLTeams\" call.\n\nCall needs to look like this:\n/getNFLTeamSchedule?teamID=1\nYou can also use the team Abbreviation:\n/getNFLTeamSchedule?teamAbv=CHI   \n\nThat will return a list of the team's games in the body. \n\nTo get a list of appropriate team abbreviations, use the getNFLTeams call.\n\nYou can also add the \"season\" parameter if you want to specify season.  Good for seasons 2022 and 2023.",
    "Get NFL Games and Stats For a Single Player: This call will grab a map of all of the games a player has played this season.   \nplayerID is a required parameter.\nYou can also use gameID if you want to only pull back a specific game. \n\nExample:\nCorrect way to get the stats for Justin Fields for his game against Detroit on 11/13/2022 would be this:\n/getNFLGamesForPlayer?playerID=4362887&gameID=20221113_DET@CHI\n\nBut if you wanted to get all of his games this season, you'd make this call\n/getNFLGamesForPlayer?playerID=4362887\n\nThis call will not work without playerID.  If you want stats for all players during a game, then use the getNFLBoxScore call with that specific gameID.\n\nYou can choose which season you pull games from with parameter: season .   \nNFL Season that runs from 2022-2023 is season 2022.  And so on.\nIf you call without season parameter then it will pull back current season's games.\n\nYou can limit the amount of games returned with parameter: numberOfGames.   For example: &numberOfGames=5 will return the last 5 games this player has an entry for.",
    "Get NFL Team Roster: This call returns the current or historical* roster of any team, using the teamID that can be found in \"getNFLTeams\" call.\n\nRosters are updated a few times throughout the day.  Usually every hour.  \n \nHistorical rosters are saved on a daily basis as of 20230505 and moving forward. \n\nCall needs to look like this:\n/getNFLTeamRoster?teamID=6\nor\n/getNFLTeamRoster?teamAbv=CHI\n\nThat will return a list of the team's current roster players in the body.\n\nAdd parameter archiveDate to the call to get a list of roster players (playerID's only) for that specific date.  Historical roster dates only are kept as far back as 20230505.",
    "Get NFL Teams: This call will retrieve the list of NFL teams. Included is their name, city, abbreviation, and teamID which can be used in other calls.  Their current record and current W/L streak is included as well. Optional data that can be included are the team rosters and their schedules.      \n\nIncluded in team rosters is all players injuries. \n/getNFLTeams\n\nOptional parameters are ?schedules=true    or    ?rosters=true"
  ],
  "134": [
    "GET all KFC locations: GET all KFC locations",
    "GET all Restaurant locations: GET all Restaurant locations",
    "GET all Restaurants locations by {state}: GET all Restaurants locations by state",
    "GET all Restaurant locations by {state} and {city}: GET all Restaurant locations by state and city",
    "Get ratings by restaurant: Find a Food Hygiene Rating for a restaurant",
    "Get all data on an establishment by restaurant: Find a Restaurant",
    "Search restaurants by town: Find all Restaurants within a Town/City",
    "Search restaurants by local authority: Find all Restaurants within a Local Authority",
    "singavaram bhaskar: https://zomato62.p.rapidapi.com/restaurant",
    "VenueRecommendation: This will return all the recommended dishes for the venue with their food names & details , meals by category, drinks and promotions."
  ],
  "157": [
    "/random_joke: Returns a random joke",
    "Get a Joke: Retrieves a joke",
    "Get Joke of the Day By Category: Get the joke of the day of specific category from a collection of most rated and most popular jokes.",
    "Get Random Joke By Category: Get the random joke by category from a collection of most rated and most popular jokes.",
    "Get Random Joke: Get the random joke from a collection of most rated and most popular jokes.",
    "Get Jokes: Access our huge collection of jokes and paginate through them based on your desired limit and sorting criteria.",
    "Get Categories of Jokes: Get all available categories of our Jokes collection which can be used to filter jokes based on specific category.",
    "Get Jokes By Specific Category: Access our huge collection of jokes of specific category and paginate through them based on your desired limit and sorting criteria.",
    "Get Joke of the Day: Get the joke of the day from a collection of most rated and most popular jokes.",
    "Create Joke: Create a joke using a large language model."
  ],
  "22": [
    "Difficulty: Provides results of all strains by its difficulty of growing such as easy, medium or difficult.",
    "Strain Type: Provides a list of results by strain type such as Indica, Sativa, Hybrid, etc.",
    "Single Strain: Provides all details for a single strain by its ID.",
    "All Strains: Provides a list of all available strains.",
    "Fur Color: Gives a list of all dogs with the color as provided in the parameter.",
    "Blocks: Retrieve blocks information:\n\n- **block_id** such as \"minecraft:stone\"\n- **block_group** such as \"Natural\"\n- **light_emission** such as 15 for torches or 0 for non-emitting blocks (MC unit)\n- **burn_chance** to indicate the probability of the block catching fire \n- **flammable** is true if the block can catch fire otherwise is false\n- **hardness** to indicate how hard a block is (MC unit)\n- **blast_resistance** to indicate how strong is the block against explosions\n- **friction** is a float value that represents block friction\n- **speed_factor** is a float value that indicates whether  the block slows you\n- **jump_factor**  is a float value that indicates whether  the block should make you jump higher\n- **rarity** such as \"COMMON\"\n- **tool_required** is true if the block requires the use of a tool to generate a drop\n- **tags** represents the list of tags attached to that block",
    "Items: Retrieve items information:\n\n- **item_id** is the id of the item like \"minecraft:stick\"\n- **item_group** is the group of the item like \"Ingredients\"\n- **stack_size** is the max amount of items in one stack\n- **fire_resistant** is true if the item doesn't burn\n- **rarity** is the item rarity such as \"COMMON\"\n- **is_food** is true if the item can be eaten\n- **is_damageable** is true if the item can be damaged when used\n- **is_enchantable** is true if the item can be enchanted\n- **durability** indicates how many times the item can be used\n- **tags** are the tags applied to this item",
    "Get Character Skills: List of Lost Ark Character Skills",
    "Get Weapon Recipes: Get List of** Lost Ark** craftable Weapons.",
    "Get Life Skill Tool Recipes: Get List of Lost Ark Life Skill Tool Recipes"
  ],
  "160": [
    "Search by Engine: Get all airplanes by engine keyword.",
    "Airplanes by Brand: Get all airplanes by brands such as Boeing, Airbus, etc.",
    "Search: Search airplane by name.",
    "Single Airplane: Get details of a single airplane by its ID.",
    "All Airplanes: Get complete data of all airplanes.",
    "apostaganha-aviator-latest: Will retrieve the latest results from Aviator at Aposta Ganha.\n\n- The first result is the most recent\n- The last result is the oldest",
    "estrelabet-aviator-latest: Will retrieve the latest results from Aviator at Estrelabet.\n\n- The first result is the most recent\n- The last result is the oldest",
    "vaidebob-aviator-latest: Will retrieve the latest results from Aviator at Vai de Bob.\n\n- The first result is the most recent\n- The last result is the oldest",
    "flights/list-in-boundary: Helps to list flights, aircrafts in a GEO bounding box, and display them on a map",
    "aircrafts/list: List available aircrafts"
  ],
  "98": [
    "/statroll: Rolls 4d6 for generating character stats, dropping the lowest die result from the total, and returns the results.\n\nMethods: GET, POST\n\nParameters:\n\nmodifier (integer): An integer representing the modifier to apply to the total of the stat roll.",
    "Total Count: Get total count of entries",
    "get stats: Endpoint to get all possible stats",
    "caiso: Gets standard CAISO data",
    "Show All Series: Show all series",
    "Get a full list of datapoints with statistics: Get a full list of datapoints with statistics, based on filters",
    "Datapoints count: Datapoints count",
    "Get aggregated counts with daily breakdown: Get aggregated counts with daily breakdown",
    "Get a full list of conversions with statistics: Get a full list of conversions with statistics",
    "Get aggregated counts on customer: Get aggregated counts on customer"
  ],
  "31": [
    "List of Games: Get a list of games that contain a given title or matches steamAppID. Response includes the cheapest current deal for each game.",
    "Game Lookup: Gets info for a specific game. Response includes a list of all deals associated with the game.",
    "Deal Lookup: Get info for a specific deal. Response includes game info, any cheaper current deals, and the cheapest historical price. As elsewhere, dealID is encoded",
    "Get Game: In this api method you can search all of the game data with game id. You can get this id from the Get Vods api method.",
    "Search On Sale Games: Search On Sale Games",
    "Free Games: Return All Free Games on Offer on the Epic Games Store. Also returns upcoming Free Games.",
    "Free to play: Get a full list of free to play games and other free products.",
    "Search items (\ud83d\udd25): \ud83d\udc49 This is one of the most important endpoints. Retrieve data from the Steam search engine. The filters here have a powerful impact. With their use you can find anything that interests you. If you want to limit the games to a certain amount, read the description of maxPrice parameter below.\n\nMaximum number of results served from one call is 50. But very often the number of results is lower because we skip game packs (bundles) in the search engine. If you're interested in this, let us know.",
    "Tag list: Retrieve the full list of tags. Use the tag IDs to handle other endpoints. If you want to get all the games e.g. with **Action** tag, just:\n- retrieve the list\n- find the Action tag \n- take its ID \n- put it into **Items by tag** endpoint\nIt's so simple!",
    "User Friends List: Get a full listing of in-game, online, and offline friends of a user."
  ],
  "152": [
    "UUID to Name: Convert your Mineccraft UUID to a Name",
    "3000 Years: Generates the 3000 Years Meme.\n**ALL DOCUMENTATION HERE**: [https://weebyapi.ntmnathan.com/api/docs](https://weebyapi.ntmnathan.com/api/docs)",
    "/v1/passwordgenerator: API Ninjas Password Generator API endpoint. Returns a random password string adhering to the specified parameters.",
    "Password Generation: The Best API to Generate Random Password with your desired length and as a response you get an set of 10 Passwords",
    "Captcha Generator: This is a captcha generator tool that gives you an image of 270x80 pixels and the text solution. It has different settings that allows you to configure the captcha difficulty, and even create a captcha with a custom text solution.",
    "Generate UUID: Generates a UUID and returns to client",
    "generate: Generate a new token for Language API",
    "Generate UUID: Generate UUID v4 with dash or not.\nmax\nBASIC: 3\nPRO: 20\nULTRA: 50\nMEGA: 150",
    "Generate Password: Generate Password",
    "Generate Captcha: Generates a captcha and returns a UUID."
  ],
  "186": [
    "Get Many Cards: Returns many cards based on query parameters.\n\nA card represents a single card that can be defined by a combination of series / set / number in set / variant.",
    "Get One Card by Id: Gets details about a single card by it's ID.",
    "Get Many Sets: Returns many sets based on query parameters.\n\nA set is a grouping of cards that are periodically released together. Every card has a set. Every set is part of a series.",
    "Get Cards: get a list of all the cards available in hearthstone",
    "Get Card By Slug: get card information by slug",
    "Get Cards Collection: Get List of all** Lost Ark Cards** details",
    "Card: Draw one card from a regular 52-card playing deck.",
    "Cards: Draw multiple cards from a regular 52-card playing deck.",
    "/us: US game spec.\nReturns numbers between 1 and 75, randomized in 5 groups.\n\nIf you have a paid plan you can specify the number of cards to generate as a query parameter: `?cards=10`\nThis will return an array of array (the cards).\n\nPlease note that empty spaces are not returned as it is more portable for who don't need them. You are free to loop through the cards and add them at your wish.",
    "/eu: EU game spec.\nReturns numbers between 1 and 90.\n\nIf you have a paid plan you can specify the number of cards to generate as a query parameter: `?cards=10`\nThis will return an array of array (the cards).\n\nPlease note that empty spaces are not returned as it is more portable for who don't need them. You are free to loop through the cards and add them at your wish."
  ],
  "79": [
    "Get Tournaments For League: This endpoint can gives you all of the tournaments for league id. You can get all league id from the Get Leagues endpoint . If you want you can get all tournaments data without filtering leagues.",
    "Get Schedule: In this method you can get all schedule for the leagues. You can filter multiple leagueId with join %  seperator.",
    "Get Leagues: This api method can gives you all of the leagues and region information",
    "Esports: Check the Esports events:\n`rocket-league1.p.rapidapi.com/esports`",
    "LeagueSeasonInfo: Get the season information for a specific E-Sports league by providing the tournament ID and season ID.",
    "LeagueLastMatches: Get the last matches for a specific E-Sports league by providing the tournament ID, season ID, and page number.",
    "LeagueDetails: Get the details of a specific E-Sports league by providing the tournament ID.",
    "LeagueNextMatches: Get the next matches for a specific E-Sports league by providing the tournament ID, season ID, and page number.",
    "CategoryTournaments: Get all leagues from a specific E-Sports category using the category ID.",
    "LeagueTotalTeamEvents: Get last 5 events for a specific E-Sports league by providing the tournament ID and season ID."
  ],
  "153": [
    "Get Vods: In this api method you can get all previous event , match game information. You can search by tournaments id and you can get this value from the Get Tournaments For League endpoint.",
    "Get Standings: In this api method you can get all standings for tournaments. You can get tournaments id Get Tournaments From League method.",
    "Casino Tournaments List: Casino Tournaments List with details",
    "Daily unique tournaments: Get daily unique tournaments by date and sport",
    "Tournament events: Get events of the tournament",
    "Current team tournaments: Get current team tournaments by team ID",
    "Tournament data: Get tournament data by tournament id",
    "Unique tournaments list: Get a list of unique tournaments by category id",
    "Unique tournaments top list: Get a top list of unique tournaments by category id",
    "Unique tournament logo: Get unique tournament logo by unique tournament id"
  ],
  "13": [
    "Get Statics: This endpoint gives you champion statics. This statics can filtered time period and league.",
    "Get Champions: Accepts a comma delimited list of champion names or nicknames.\n\nReturns a list of Champions full names and list of passive ability and standard abilities in an on object format.",
    "Get Champion Abilities as Text: Accepts a comma delimited list of champion names/nicknames and returns a text list of champions as well as their passive and standard abilities.",
    "Get Stats: Get WN8, WN7, battles, victories, defeats, kills, draws, avereageTier, tanksSpotted, battlesSurvived",
    "Get Champion Tier List: Get either a list of the current champion tier list or a tier list section based on YOUR request!",
    "Search For A Champion: This will go through the list of champions and return a single champion or a list of champions depending on YOUR request!",
    "GET Champion details: Getting detail from champion name you give, translate by the language you give",
    "GET champions: Get list of all champions by default give you in english",
    "GET Champion rotation: Return's you a liste of free champion ids and liste of free champions ids for new player.",
    "Generate League Of Legends Champion: Will generate a new champion along with its passive and standard abilities."
  ],
  "94": [
    "getSecondWord: returns the second word for a given game",
    "guessWord: guess a word and it will return the position it holds",
    "Get Result From Category: Given a stored category, get a random result which will contain the main phrase and the taboo words.\n\nOptionally pass a parameter which will control the amount of taboo words to be returned, \"forbiddenWordLimit\" defaults to 4 and has a max of 10",
    "Get Taboo Words From Word: Provide your own word and get the taboo words back.\n\nOptionally pass a parameter which will control the amount of taboo words to be returned, \"forbiddenWordLimit\" defaults to 4 and has a max of 10",
    "Get Stored Word From Any Category: Get a random result which will contain the main phrase and the taboo words, result may come from any of the stored categories.\n\nOptionally pass a parameter which will control the amount of taboo words to be returned, \"forbiddenWordLimit\" defaults to 4 and has a max of 10",
    "CSW21: Search for words using Collins Scrabble Words 2021 lexicon.",
    "NWL20: Search using the NASPA Word List 2020 edition, \u00a9 2020 North American Word Game Players Association.",
    "Build Word Ladders: Create Word Ladders between two words. By default it uses 2019 edition of Collins Dictionary.",
    "today word: get today word or the correct answer",
    "Define: Defines the word"
  ],
  "63": [
    "User reviews: \ud83d\udca1 The endpoint returns a complete list of user reviews. Use filters to narrow down the results as desired. If you want to get reviews from page 2, you must first grab data from page 1 and save the **cursor** value from response. Then set in the new call  **page=2** and **cursor** from page 1.",
    "title/get-reviews: Get reviews",
    "title/get-user-reviews: Get user reviews of the title",
    "title/get-metacritic: Get metacritic information of the title",
    "title/get-reviews: Get reviews",
    "title/get-user-reviews: Get user reviews of the title",
    "title/get-metacritic: Get metacritic information of the title",
    "reviews/list: List reviews related to a movie",
    "reviews/v2/list: List reviews relating to a product",
    "reviews/list (Deprecated): List reviews relating to a product"
  ],
  "18": [
    "Player Cup of the Day Information: Get the COTD info of a player.",
    "Player Trophy Information: Get the trophy info of a player.",
    "Player Royal Information: Get the royal info of a player.",
    "Player Matchmaking Information: Get the matchmaking info of a player.",
    "Player Summary: Get the summary of a player containing general information.",
    "Sponsor Players: Get Players that are sponsors.",
    "TMGL Players: Get Players from tmgl.",
    "Nadeo Players: Get Players from nadeo.",
    "Get player info: Get name, country, team and more about a player.",
    "Get all players: Get id, name and country of all players."
  ],
  "71": [
    "Search all Players: Search for players with `search_query`",
    "Search: Search for E-Sports players, teams, and tournaments by providing a search term.",
    "Multi search: Multi search. Search by teams, referees, managers, players, tournaments",
    "Search multi: Search team, player by query",
    "search: Search for relating players, clubs, competitions, etc... by familiar term or phrase",
    "Search Team: Search for any team",
    "Search player: Search for any player",
    "players/search: Search player by name",
    "Search: This operation searches for players, teams, and tournaments using the provided search term.",
    "Player Search: Search for active and historic/inactive players by name.  The active_sw parameter should be set depending on whether you want to search for active or inactive players. You can omit this parameter, though you will notice a slower response time as the search is done across all (active and inactive) players."
  ],
  "8": [
    "Team Players: Get Players that are in the Openplanet Team.",
    "Played: Last of played cs:go matches",
    "TeamLastMatches: Get the last matches for a specific E-Sports team by providing the team ID and the page number.",
    "TeamNearMatches: Get the near matches for a specific E-Sports team by providing the team ID.",
    "TeamNextMatches: Get the next matches for a specific E-Sports team by providing the team ID and the page number.",
    "getTeam: gets team",
    "matches/list-by-club: List matches by specific club",
    "clubs/get-squad: Get squad of club",
    "matches/get-club-comparison: Get club comparison of specific match",
    "matches/get-team: Get players attended the match"
  ],
  "60": [
    "Royal matches: Get recent royal matches.",
    "Matchmaking matches: Get recent matchmaking matches.",
    "Live Matches Stats: You can retrieve all te details related to a single match such as Aces, Break points, First Serve %, first serve returns, second serves, ecc..",
    "matches/v2/get-innings: Get innings of a match (for \"cricket\" as category)",
    "Upcoming Matches API: A list of Upcoming cricket matches from around the world. Any issues, queries, api integration, custom plan or to **Create your own Fantasy Sports Application**  contact us at support@techflinch.com",
    "Series List API: A list of currently running  and upcoming cricket series from around the world. Any issues, queries, api integration, custom plan or to **Create your own Fantasy Sports Application**  contact us at support@techflinch.com",
    "Live Fantasy Score: Real-time and Low-Latency Match Live Score API. Get the match score, Batting, bowling and fielding information for a specified match in real time\nAny issues, queries, api integration, custom plan or to **Create your own Fantasy Sports Application**  contact us at support@techflinch.com",
    "Live Matches API: A list of cricket matches from around the world that are currently Live. Any issues, queries, api integration, custom plan or to **Create your own Fantasy Sports Application**  contact us at support@techflinch.com",
    "matches/get-votes: Get votes for match, and players",
    "matches/get-lineups: Get match lineups"
  ],
  "64": [
    "Top Players by Trophies: Get the top players by their tophy count.",
    "Get All League Ranks: Get League of Legends ranks and their player base!",
    "Team-week players: Get team-week players of the season",
    "Get best players in playoffs (if exist): Works the same like regular season just for the playoffs.",
    "Get best players in regular seasons: If you e.g. call this for Premier League you only have regular season!\nThis call will return a list with the best players in this season.\nThis call loads a bunch of data, please remind that in loading times.",
    "Get best player: \"Get best player\" will return the best player of each team with their rating.",
    "TeamPlayoffsBestPlayers: Get the top players of a specific American Football team during the playoffs by providing the team ID, tournament ID, and season ID.",
    "TeamRegularSeasonBestPlayers: Get the top players of a specific American Football team during the regular season by providing the team ID, tournament ID, and season ID.",
    "LeagueTopPlayersPlayoffs: This endpoint retrieves the top players for a specific league in playoffs during a given season.",
    "LeagueTopPlayersRegularSeason: This endpoint retrieves the top players for a specific league in regular season during a given season."
  ],
  "197": [
    "bet7k-aviator-latest: Will retrieve the latest results from Aviator at BET7K.\n\n- The first result is the most recent\n- The last result is the oldest",
    "Upcoming: Last of upcoming cs:go matches",
    "Wrestling News: This will give you the most up to date results for wrestling matches.",
    "Tomorrow: Shows airing tomorrow",
    "Matches: Latest matches by Betcity",
    "TopOver25: Today top Over 2,5 prediction.",
    "USA latest Matches: Latest matches in the USA by bookie - updated every 24 hours",
    "Norway latest Matches: Latest matches in Norway by bookie - updated every 24 hours",
    "Japan latest Matches: Latest matches in Japan by bookie - updated every 24 hours",
    "Euro latest matches: Latest matches international in europe by bookie - updated every 24 hours"
  ],
  "73": [
    "Tournaments: Check the scheduled tournaments:\n`rocket-league1.p.rapidapi.com/tournaments/:region`",
    "Unique tournament seasons: Get seasons of the unique tournament",
    "Tournament seasons: Get seasons of the tournament",
    "statistic/list-fifa-world-rankings: List FIFA world rankings",
    "Get Rounds (if exist): Get all rounds for a season for a round-based competition",
    "stats/get-icc-rankings: Get ICC rankings",
    "Categories: Get all tournament categories. It's the top level of tournaments and represent countries.",
    "TeamTournaments: Get team tournaments they are participating.",
    "World Ranking: Fetch the world rankings for a given year",
    "FedExCup Ranking: Fetch the FedExCup ranking leaderboard for a given year. These rankings are updated live during a tournament to show the player's projected ranking."
  ],
  "55": [
    "News: Check the news:\n`rocket-league1.p.rapidapi.com/news`",
    "videogames_news_search: Returns search results for current and historic news from top sources",
    "Get Individual News Source: Get News about football news from a specific news resource.",
    "Get All World Footbol news live: This end point will return back all news about footbol.",
    "Get news source feeds: Api showing news feedsa all over the planet",
    "Latest News: Get the latest news and stories from different sources",
    "Get News: Return list of news by selected region and category.\nVisit our [demo site](https://core-api.net/news/news.html)",
    "Search News: Search news by given keyword.\nVisit our [demo site](https://core-api.net/news/news.html)",
    "Get Individual News Source News: Get News about IPL from a specific news resource.",
    "title/get-news: Get news related to the title"
  ],
  "128": [
    "Titles: Check a player's titles:\n`rocket-league1.p.rapidapi.com/titles/:player`",
    "title/get-sound-tracks: Get sound tracks in specific title",
    "title/get-releases: Get release information of the title",
    "title/get-charname-list: Get characters information of the title",
    "title/v2/get-business: Get business (Box Office) information of the title",
    "title/get-production-status: Get production status of the title",
    "title/get-base: Get base information of the title",
    "title/get-hero-with-promoted-video: Get heroes information of the title",
    "title/get-awards-summary: Get awards summary related to the title",
    "title/get-awards: Get awards related to the title"
  ],
  "150": [
    "Recipes: Retrieve recipes",
    "Get Food Recipes: Get List of Lost Ark Food Recipes",
    "Get Stronghold Item Recipes: Get List of Lost Ark Stronghold Item Recipes",
    "Get Chest Item Recipes: Get List of **Lost Ark** Chest Item Recipes",
    "Get Battle Item Recipes: Get List of Lost Ark Battle Item Recipes",
    "All Keto Recipes by Category: Gives all keto recipes by category ID.",
    "Single Keto Recipe: Gives a single recipe by ID",
    "foodrecipe: food recipe",
    "go: Creative recipes. The API provides access to 231,637 creative recipes from all cuisines around the world.",
    "Get Recipe by ID: This endpoint gets specific recipe by id"
  ],
  "137": [
    "Advancements: Retrieve advancements:\n\n- **advancement_id** is the ID made of the category+title\n - **category** is the category of the advancement (adventure, husbandry, nether, story or end)\n - **title** is the in-game title\n - **description** is a short description of the advancement\n  - **frame** is the type of background used\n  - **icon** is the icon inside of the frame (block or item without minecraft:)\n  - **parent_advancement** is the ID of the previous adv. to be achieved",
    "Label shapes: List of available label shapes.",
    "Label sizes: Returns a list of label sizes in the format [width]x[height].\n\nThese sizes are rounded, meaning that they can represent a few other sizes that are close to them. For example size 4\"x3\", will represent 3.75\"x3\",  4\"x3.25\" and so on.",
    "Bollinger Bands: Bollinger Bands indicator",
    "Doji: Doji indicator",
    "Abandoned Baby: Abandoned Baby indicator",
    "3 Line Strike: 3 Line Strike indicator",
    "Three Inside Up/Down: Three Inside Up/Down indicator",
    "Three Advancing White Soldiers: Three Advancing White Soldiers indicator",
    "Three Outside Up/Down: Three Outside Up/Down indicator"
  ],
  "76": [
    "/discord/185.225.233.110/30015: Gets the discord link found in the server description.",
    "Get Invite Data: Fetches detailed data, including hidden data of invites or vanities",
    "Fetch Message: Get message of the provided message ID",
    "list-invites: Get the list of invites sent out to users.",
    "Fetch Sent Message Extra: Fetch Sent Message Extra",
    "Fetch Message: Fetch Message",
    "Sent Message Status: Get the sent message status of the message using the message id.",
    "SendSMS: Send single messages",
    "Get Message Status: Get Message Delivery Status of previously sent messages.",
    "Get messages: Fetch paginated messages.\n\nPlease note that the messages will be sorted by the date of creating (sending) - latest first."
  ],
  "86": [
    "historical prices: Gives a list of the high and low prices of item with the given id at the given interval",
    "/api/bestSales/product/{productID}/pricesHistory: This resource returns the historic of prices",
    "Timeframe: Display a currency conversion's historical rates within a given timeframe",
    "historic-data: return historic data\ninterval - The time interval between two data points. Can be 1m 2m 5m 15m 30m 60m 90m 1h 1d 5d 1wk 1mo 3mo\nrange - The range for which the data is returned.\n\nfor normal stocks :\nyou can directly search by tickername:\neg. tsla , msft , meta\n\nfor crypt:\ntry searching by ticker name followed by -USD.\nfor bitcoin try : btc-usd",
    "Get Token Price History between Dates: Gets the price chart of a token between two dates in USD.",
    "Get Token Price History by Period: Gets the price chart of a token within a given period in USD.",
    "house-prices/get-sales-history: Get sales history",
    "GetHistoricalPrices: Get historical prices.",
    "market/v2/get-returns: Get market return by years",
    "Query historical volatility: The data is in hourly.\nIf time field is not passed, it returns the recent 1 hour data by default.\nIt could be any timeframe by inputting startTime & endTime, but it must satisfy [endTime - startTime] <= 30 days.\nIt returns all data in 2 years when startTime & endTime are not passed.\nBoth startTime & endTime entered together or both are left blank"
  ],
  "7": [
    "Latest MMO News: Latest MMO News powered by MMOBomb.",
    "Newspapers: Lists the newspapers currently supported",
    "Get All China, Japan ,Korea news: This endpoint returns news about China, Japan, and Korean news from popular news networks",
    "Get Individual News Sources: Get Crypto News from a Specific Source",
    "Get All Crypto News: Gets all crypto news from the currently configured websites",
    "Sport: This endpoint is used to get sport news from Google News.",
    "Science: This endpoint is used to get science news from Google News.",
    "Health: This endpoint is used to get health  news from Google News.",
    "Entertainment: This endpoint is used to get entertainment news from Google News.",
    "Business: This endpoint is used to get business news from Google News."
  ],
  "118": [
    "Weapon Classes: Returns a list of all weapons classes (along with their respective weapons) that are currently in Valorant.",
    "Get class: Get info about a D&D class such as the proficiencies or abilities.",
    "Sources List (New): Use this endpoint to get the list of all source.",
    "Get All Sources: Get All Sources' names and ids",
    "GetLearningResources: Get artificial intelligence learning resources.",
    "GetLearningResourcesByTopic: Get artificial intelligence learning resources by topic.",
    "Get the top30 Github repos based on a query: Get the top30 Github repos based on a query",
    "Get list of GitHub repo for Ruby web scrapping: Get list of GitHub repo for Ruby web scrapping",
    "Get list of Github repo for ruby web scrapping: Get list of Github repo for ruby web scrapping",
    "Get list of Github repo for Ruby Webscrapping: Get list of Github repo for Ruby Webscrapping"
  ],
  "29": [
    "http://newexch.com: betting exchange",
    "Allbet Casino Singapore: [Allbet ](https://allbetsg.com/\n)is so much more than just an online Allbet Casino Singapore.",
    "Odds all: Get all odds by event_id. You can convert them to decimals. `provider_id`: 1 - Bet365, 100 - betano, 101 - bilyoner",
    "Odds winning: Get winning odds by event_id. You can convert them to decimals.",
    "Schedule odds: Get events schedule odds by date",
    "Live Scores with Live Betting Odds: This endpoint provides info about all the live matches from ATP + WTA. It includes live and prematch odds.",
    "Get NFL Betting Odds: This grabs NFL betting/gambling lines and odds from some of the most popular online sportsbooks (fanduel, betrivers, betmgm, caesars, pointsbet, etc). \n\nYou can call this for specific game or a specific date.  Check out the example responses here for the type of data you can expect back.   Some of the sportsbooks do not offer live betting, so data from those sportsbooks will not be returned after the game starts.  \n\nEither gameDate or gameID is required.\nExamples of what the calls can look like:\n/getNFLBettingOdds?gameDate=20230101\n/getNFLBettingOdds?gameID=20230101_CHI@DET",
    "Bet365 Inplay Filter: bet365 inplay filter",
    "Bet365 InPlay: bet365 inplay data",
    "Bet365 InPlay Event: inplay event with all scores/stats/markets"
  ],
  "50": [
    "TournamentPlaceholderImage: Get the tournament placeholder image in PNG format.",
    "PlayerPlaceholderImage: Get the player placeholder image in PNG format.",
    "TeamPlaceholderImage: Get the team placeholder image in SVG format.",
    "ManagerPlaceholderImage: Get the manager placeholder image in PNG format.",
    "PlayerPlaceholderImage: Get the player placeholder image in PNG format.",
    "ManagerPlaceholderImage: Get the manager placeholder image in PNG format.",
    "TournamentPlaceholderImage: Get the tournament placeholder image in PNG format.",
    "TeamPlaceholderImage: Get the team placeholder image in SVG format.",
    "ManagerPlaceholderImage: Get the manager placeholder image in PNG format.",
    "TournamentPlaceholderImage: Get the tournament placeholder image in PNG format."
  ],
  "149": [
    "CategoryFlag: Get the flag image of a specific category in PNG format.",
    "TeamLogoImage: Get the team logo image in PNG format by providing the team ID.",
    "GameMapImage: Get the map image in PNG format by providing the map ID.",
    "CharacterImage: Get the character image in PNG format by providing the character ID.",
    "LeagueLogoImage: Get the league logo image in PNG format by providing the tournament ID.",
    "PlayerImage: Get the player image in PNG format by providing the player ID.",
    "Team image: Get team image",
    "Get Team Logo: Returns the logo of the team as a png",
    "ManagerImage: Get the image for a specific American Football manager in PNG format by providing the manager ID.",
    "TeamLogo: This operation retrieves the logo image for an American Football team, given its team ID. The image is returned in PNG format."
  ],
  "144": [
    "TVCountries: Get a list of countries and their respective TV channels broadcasting a specific Football match.",
    "MatchTvChannelDetails: Get the details of a specific TV channel broadcasting a specific Football match.",
    "LiveMatches: Get live E-Sports matches that are currently taking place.",
    "Football Live: Live Match",
    "Live score: Get live football score & history",
    "MatchStreaks: Get the win/loss streaks for the two teams involved in a specific American Football match.",
    "MatchVotes: Get votes for a specific American Football match by providing its ID.",
    "MatchStatistics: Get match statistics for a specific American Football match.",
    "MatchLineups: Get the match lineups for a specific American Football match by providing the match ID.",
    "PreMatchForm: Get pre-match form data for a specific American Football match by providing the match ID."
  ],
  "171": [
    "TeamMedia: Get the media for a specific E-Sports team by providing the team ID.",
    "LeagueMedia: Get the media related to a specific E-Sports league by providing the tournament ID.",
    "Team Latest media: Get latest media by team ID. Ex. Full Highlights",
    "Latest media: Get media of the unique tournament",
    "TeamMedia: Get media information for a specific American Football team by providing its ID.",
    "LeagueMedia: Get the media of an American Football league for a specific tournament, including images and videos related to the league.",
    "LeagueMedia: Get the media for a specific Ice Hockey league by providing the tournament ID.",
    "PlayerMedia: Get the media for a specific Ice Hockey player by providing the player ID.",
    "TeamMedia: Get media for a specific Ice Hockey team by providing the team ID.",
    "LeagueMedia: Get media for a specific Rugby league."
  ],
  "84": [
    "EventStreaks: Get streaks of a specific E-Sports event by providing its ID.",
    "EventVotes: Get votes of a specific E-Sports event by providing its ID.",
    "EventGames: Get event games for a specific E-Sports event by providing the event ID.",
    "Games (esports): Get games (esports) by event_id",
    "Events Player statistics: Get player statistics by event_id",
    "Player events: Get events by player ID",
    "Streaks: Get team streaks by event_id",
    "Lineups (esports): Get games (esports) by event_id",
    "Rounds (esports): Get rounds (esports) by event_id",
    "Incidents: Get incidents by event_id"
  ],
  "97": [
    "MatchSchedules: Get e-sports schedules for a specific day.",
    "CategorySchedules: Get e-sports schedules for a specific day from a specific category.",
    "/schedule: Get the TV schedule",
    "Schedule live: Get live events schedule",
    "Schedule by category: Get event schedule by category and date",
    "Schedule by date: Get event schedule by date",
    "Season Schedule: Returns season schedule for the specified season. If omitted, returns the schedule for current season.",
    "Daily Schedule: Returns season schedule for the specified date or \"now\" returns current day's schedule. Daily schedule is changed at 10 AM ET.",
    "Weekly Schedule: Returns all events from the date specified plus 7 days in advance",
    "Get scheduled games by country: With \"Get scheduled games by country\" you'll receive all games which a scheduled for a specific country and date."
  ],
  "39": [
    "EventHighlights: Get highlights of a specific E-Sports event by providing its ID.",
    "Highlight Link: Best Live Emb",
    "matches/get-highlights: Get highlights of specific match",
    "Get latest highlights: This will return the latest video highlights of the competition.",
    "Get game highlights: Want to use the highlight video after a match? Here you get all information you need",
    "MatchHighlights: Get video highlights for a specific American Football match by providing the match ID.",
    "MatchHighlights: Get the highlights for a specific Ice Hockey match using the match id.",
    "MatchHighlights: Get highlights of a specific Rugby match.",
    "MatchHighlights: Get the highlights of a specific baseball match using the match ID.",
    "Sport Highlighted Matchups: Get sport highlighted matchups."
  ],
  "103": [
    "Event: Get detailed information for a specific E-Sports event by providing the event ID.",
    "Categories: Get all available e-sports categories.",
    "Categories: Get actual categories by date and sport",
    "Sports Number live events: Get number of live events in the sports",
    "Sport list: Get a list of sports",
    "Number live events: Get number of live events in the category by sport ID",
    "Get countries by sport: With \"Get countries by sport\" you'll receive all countries with specific sport ids which ever supports the sport you've searched.",
    "Get number of games today: With \"Get number of games today\" you'll receive all sports we support, how many games are today and how many of them are live.",
    "/v4/sports/{sport}/scores: Returns list of live and upcoming games for a given sport, and optionally recently completed games. Live and completed games will contain scores. **Currently in beta** and only available for selected sports. For more info, see the [list of available sports](https://the-odds-api.com/sports-odds-data/sports-apis.html)",
    "/v4/sports: Returns a list of available sports and tournaments. Use the `sports_key` in requests for /odds and /scores endpoints."
  ],
  "155": [
    "EventH2HDuel: Get head-to-head duel information of a specific E-Sports event by providing its ID.",
    "HeadToHeadMatches: Get head-to-head match data for a specific E-Sports event using its custom ID.",
    "Heads / Tails: Returns an outcome. Either heads or tails",
    "Head to head statistics: Head to head statistics",
    "matches/v2/get-h2h: Get head to head information in the past",
    "HeadToHeadMatches: Get head-to-head match data for a specific American Football match using its custom ID.",
    "MatchH2HDuel: Get the head-to-head duel for a specific Ice Hockey match using the match id.",
    "HeadToHeadMatches: Get head-to-head match data for a specific Ice Hockey match using its custom ID.",
    "MatchH2HDuel: Get the head-to-head duel information for a specific Rugby match.",
    "HeadToHeadMatches: Get head-to-head matches for a specific Rugby match."
  ],
  "14": [
    "LeagueTotalStandings: Get the total standings for a specific E-Sports league by providing the tournament ID and season ID.",
    "Seasons standings: Get seasons of the standings by team ID",
    "Standings: Get standings of the season",
    "Competitions Standings: List the current standings for a league \ud83d\udd1d.",
    "Constructor Standings: Get the current season constructor standings.",
    "statistic/list-uefa-5year-rankings: List UEFA 5-year rankings",
    "Get standings: Get competition standings by season",
    "stats/get-icc-standings: Get ICC standings",
    "LaLiga Standings: LaLiga Standings",
    "TeamStandingsSeasons: Get the seasons for which standings are available for a specific American Football team by providing the team ID."
  ],
  "96": [
    "getStoreStatusList: Returns as Json of store status list.",
    "Get Statuses: Get statuses.",
    "Get Statuses: Get statuses.",
    "getInventory: Returns a map of status codes to quantities",
    "Service status: Returns service status",
    "Get OTP Status: Get the status of OTP generated or verified",
    "Get OTP Status: Get the status of OTP generated or verified",
    "GetTraining: Gets the training status",
    "Status for mapper: Get results in details from the task id.",
    "Status for mapper v2 [Upload file]: Get results in details from the task id."
  ],
  "10": [
    "GetAllCurrencies: To get all currencies. It's needed for the create virtual account endpoint.",
    "2.Getavailablecurrencies: This is a method for obtaining information about the cryptocurrencies available for payments. This depends on the cryptocurrency you choose for your particular store.\nOptional parameters:\n- fixed_rate(optional) - boolean, can be **true** or **false**. Returns avaliable currencies with minimum and maximum amount of the exchange.",
    "Aliexpress - User Basic Parameters: User Basic Parameters for Region, Currency and Locale",
    "/api/currenciesAvailable: This resource represents a currency in the system. Each currency is composed of Code and Name Attributes. This service can be used to communicate with product service with the target currency attribute.",
    "Get OHLC history: Get  OHLC for the requested currency pair",
    "Currencies: Gets list of currencies we support",
    "History: Display the currency conversions historical rates for a particular day",
    "get currency by name: get several states of one currency prices",
    "GIT ALL WORLD  CURRENCIES PRICES: This end point will return back prices of world currencies",
    "api: GET the average exchange rate of TND against USD & EUR"
  ],
  "27": [
    "Red colour QR code generator: Generate the QR code for anything you want.",
    "Generate QR Code: Simply Provide Url or Text in url parameter.",
    "URL to QR code: This endpoint is a GET request that takes a single parameter \"url\" which specifies the website URL. The endpoint generates a QR code image using the input URL and the response is downloadable.",
    "Qr Code Gen: This endpoint takes a \"GET\" request with the \"url\" query parameter and returns a QR code image associated with the text passed.",
    "Generate QR Code: Easily convert any URL into a QR code that can be downloaded and printed.",
    "QR code image: This Api takes URL, or string and returns the QR code image",
    "Simple QR Code: This endpoin returns simple qr code with the possiblity to customize the color.",
    "qrcodefree: Free QR Code Barcode Generator",
    "qrcodepro: Pro QR Code Barcode Generator",
    "Generate QR: Generate QR codes with ease via API"
  ],
  "156": [
    "Temporary Email Stats: Get the number of temporary emails in the database and its last update",
    "View message: View a particular message by id\nUse the token received from /mailbox as authorization header  & message id received from /messages as path parameter.",
    "Get Messages: Get all the messages received by email\nUse the token received from email as authorization header.",
    "Get Email ID: Get Email ID for Mailbox",
    "Get Email: Get Email",
    "Email: Fetch Customer Email",
    "email-extractor: Get emails scraped from url provided",
    "Mail config List: Get mail config list from cloud database",
    "Mail config get: Get a mail confing from cloud database",
    "Get /inboxes: Get a list of inboxes with their ids"
  ],
  "117": [
    "/us/hi: Returns current gas price data for Hawaii. Historical data starting from 2023-06-01 can be queried by adding the `date` parameter to this endpoint. In order to return XML instead of the default JSON format, simply add the `Accept: application/xml` header to your request.",
    "/us/id: Returns current gas price data for Idaho. Historical data starting from 2023-06-01 can be queried by adding the `date` parameter to this endpoint. In order to return XML instead of the default JSON format, simply add the `Accept: application/xml` header to your request.",
    "/us/in: Returns current gas price data for Indiana. Historical data starting from 2023-06-01 can be queried by adding the `date` parameter to this endpoint. In order to return XML instead of the default JSON format, simply add the `Accept: application/xml` header to your request.",
    "/us/ia: Returns current gas price data for Iowa. Historical data starting from 2023-06-01 can be queried by adding the `date` parameter to this endpoint. In order to return XML instead of the default JSON format, simply add the `Accept: application/xml` header to your request.",
    "/us/ks: Returns current gas price data for Kansas. Historical data starting from 2023-06-01 can be queried by adding the `date` parameter to this endpoint. In order to return XML instead of the default JSON format, simply add the `Accept: application/xml` header to your request.",
    "/us/ky: Returns current gas price data for Kentucky. Historical data starting from 2023-06-01 can be queried by adding the `date` parameter to this endpoint. In order to return XML instead of the default JSON format, simply add the `Accept: application/xml` header to your request.",
    "/us/me: Returns current gas price data for Maine. Historical data starting from 2023-06-01 can be queried by adding the `date` parameter to this endpoint. In order to return XML instead of the default JSON format, simply add the `Accept: application/xml` header to your request.",
    "/us/md: Returns current gas price data for Maryland. Historical data starting from 2023-06-01 can be queried by adding the `date` parameter to this endpoint. In order to return XML instead of the default JSON format, simply add the `Accept: application/xml` header to your request.",
    "/us/mi: Returns current gas price data for Michigan. Historical data starting from 2023-06-01 can be queried by adding the `date` parameter to this endpoint. In order to return XML instead of the default JSON format, simply add the `Accept: application/xml` header to your request.",
    "/us/mn: Returns current gas price data for Minnesota. Historical data starting from 2023-06-01 can be queried by adding the `date` parameter to this endpoint. In order to return XML instead of the default JSON format, simply add the `Accept: application/xml` header to your request."
  ],
  "191": [
    "Transform Units Using The Get Method: Transform Units Using The Get Method",
    "Measurements: GET enum array of all types of measurement",
    "Convert from one unit to another: Converts the given quantity in one unit to the equivalent quantity in another, for a given measurement, and returns a detailed answer.",
    "Measurements detailed: GET a list of all the available measurements with unit details.",
    "Measure units: GET enum array of all units of the given type.",
    "kda calculator: Calculates a kd (kill + assists death ratio)",
    "kd calculator: Calculates a kd (kill death ratio)",
    "Convert a Unit: GET the Unit and Value you want to convert, and get a object with the result and abbreviation (if available).",
    "Get a List of All Units: This endpoint gets a full list of units available for conversion",
    "/volume/:from/:to/:number: Volume unit conversions"
  ],
  "119": [
    "Base: Only this endpoint is currently supported which gives you a random password",
    "random uuid: creates a random uuid v4",
    "random_usr_copy: api/users/random_user",
    "random_usr: api/users/random_user",
    "X-Bogus Web Signature: Generate X-Bogus signature for Web.",
    "Register Device Information: Random device information,\nActivated",
    "Fake Credit Card Number Generator: Pass in one of the following card networks as a parameter:\n\n- amex\n- diners\n- discover\n- jcb\n- mastercard\n- visa",
    "Generate CC Number: Generate a  fake Credit Card Number",
    "eth: This API generates a random ethereum public address with its private key",
    "Generate Fake Credit Card Number: This endpoint create a fake and valid credit card number with desired length."
  ],
  "56": [
    "Color to picture: Takes prompt of picture mode (L,RGB,RGBA), color in hex (example: ff03bc), width (example: 200), height (example: 200) and makes new image in single color)",
    "SpecificColorSet: Get a set of colors based on input color like - \"yellow\" / \"red\"",
    "convert hsv: Endpoint to converts HSV color code to other color code like Hex , RGB, CMYK,HSL",
    "hsv to hsl: Converts  hsv color code to hsv color code",
    "hsv to cmyk: Converts  hsv color code to cmyk color code",
    "hsv to hex: Converts  hsv color code to hex color code",
    "hsv to rgb: Converts  hsv color code to rgb color code",
    "cmyk to hsv: Converts  cmyk color code to hsv color code",
    "hsl to hsv: Converts  hsl color code to hsv color code",
    "rgb to hsv: Converts  rgb color code to hsv color code"
  ],
  "23": [
    "About info (free): You need a **valid token** to use this endpoint, learn how to get it on this [video](https://youtu.be/TcaAwKpAkl8). \nThis endpoint will return the `About` info of the number, and the time when the value was set.",
    "Getyourstoreinformation: Access store information fast with the access token we provided.",
    "getTokenInfo: Get token info",
    "/sumsub/access-token: Requests customer token to initialize Sumsub SDK",
    "GetOrderbyOrderID: The API will return the order related to the order id\n\nThere are many informations it returns\n\n| **field** | **description** |\n| --- | --- |\n| order_id | the id of the order, it is the same value as sequence id |\n| stark_key | the stark_key of who place the order |\n| price | the price of the NFT, when need a human-readable value, display_price is the human-readable value |\n| display_price | the price that human-readable |\n| direction | 0 for sell, 1 for buy |\n| amount | the amount to buy or sell |\n| un_filled | how many tokens are unfilled |\n| symbol | a structure contains base and quota token, also have token id in it |\n| fee_rate | the fee_rate |\n| token_type | the token type |\n| token_id | the token ID |\n| order_state | the state of the order |\n| resp | if there has some error, the field will be set |\n\nThe enum value of order_state is\n\n| Status | Value |\n| --- | --- |\n| Placed | 0 |\n| Canceled | 1 |\n| Filled | 2 |\n| PartiallyFilled | 3 |\n| ConditionallyCanceled | 4 |",
    "Balanceofstark_keyandasset_id: This API retrieves the balance of a stark_key and asset_id\n\nThe return values description\n\n| **key** | **description** |\n| --- | --- |\n| asset_id | The asset's id |\n| contract_address | The contract address of ERC20/ERC721/ERC721, if the asset_id's type is ETH, it will return \"eth\" as a placeholder |\n| token_id | The NFT token ID(this field is set when type is ERC721 or ERC721M) |\n| base_uri | The NFT base uri(this field is set when type is ERC721 or ERC721M) |\n| available | The available balance on layer 2. |\n| frozen | The frozen balance on layer 2. |\n| type | Type of token, Possible enum values is ETH, ERC20, ERC721, ERC721M |\n| symbol | The symbol of ERC721/ERC721M or ERC20(\"ETH\" for ETH) |\n| decimals | The decimals of asset, for ETH is 18, ERC721/ERC721M is 1, and for ERC20, it is based the contracts, [here](https://medium.com/@jgm.orinoco/understanding-erc-20-token-contracts-a809a7310aa5) is more explain about decimals on Ethernum |\n| quantum | quantum is a starkex concept, it is auto-set when the contract is registered to reddio. [here](https://docs.starkware.co/starkex/spot/shared/starkex-specific-concepts.html) is more explain about quantum |\n| display_value | deprecated,use `available` instead |\n| display_frozen | deprecated,use `frozen` instead |\n| balance_available | The available balance represents on layer 2. Keep attention that it need to be converted with quantum and decimals if you need to use this field. All SDK hands this value, so most of the time you do not need to care about it. |\n| balance_frozen | The frozen balance represents on layer 2. Keep attention that it need to be converted with quantum and decimals if you need to use this field. All SDK hands this value, so most of the time you do not need to care about it. |",
    "Faucets: Fetchs the balances of tokens in the faucet.",
    "/token/{id}: Return the info of the Token by the address",
    "Get Historical Token Balance: Gets the user's historical portfolio value and balance records along with token info.",
    "Get Token Balance: Gets the balance of an ERC-20 token."
  ],
  "192": [
    "Is a business? (free): You need a **valid token** to use this endpoint, learn how to get it on this [video](https://youtu.be/TcaAwKpAkl8). \nRequests to this endpoint will return `true` if the number is a **Whatsapp for Business** account, or `false` if it's not.",
    "Validate WA number (free): You need a **valid token** to use this endpoint, learn how to get it on this [video](https://youtu.be/TcaAwKpAkl8). \nThe response is `true` if the phone is registered on whatsapp.",
    "Is a business?: Requests to this endpoint will return `true` if the number is a **Whatsapp for Business** account, or `false` if it's not.",
    "Fetch business info (get free token): Free token needed, click [here](https://wa.me/34631428039?text=get-token) to get it. The endpoint will provide: `description`, `website`, `email`, `business hours`, `address` and `category`; if the number is a whatsapp for business account.",
    "Is registered on whatsapp? (get free token): Free token needed, click [here](https://wa.me/34631428039?text=get-token) to get it. This endpoint returns `true` if the phone is registered on whatsapp.\nLearn how to use this endpoint on this [video](https://youtu.be/txPQ4ROpfuc).",
    "About: This endpoint will return the `About` info of the Whatsapp for business number, and when the value was set.",
    "Fetch profile picture (get free token): Free token needed, click [here](https://wa.me/34631428039?text=get-token) to get it. Gets the whatsapp number profile picture, you can select its resolution (`high` or `low`) and the response format: `png` file, `url` or `base64` encoded file.\nLearn how to use this endpoint on this [video](https://youtu.be/65eJN7S8sBw).",
    "Fetch profile picture: Gets the whatsapp number profile picture, you can select its resolution (`high` or `low`) and the response format: `png` file, `url` or `base64` encoded file.",
    "Is whatsapp for business?: Requests to this endpoint will return `true` if the number is a **Whatsapp for Business** account, or `false` if it's not.",
    "Fetch business info: The endpoint will provide: `description`, `website`, `email`, `business hours`, `address` and `category`; if the number is a whatsapp for business account."
  ],
  "166": [
    "Generating Provider Specific Reports: This API allows callers to fetch data source of themselves. No monetary fields, such as charges or earnings, are supported. The caller of this API must be the provider himself.",
    "finance-analytics: This API endpoint also returns **AI recommendation**\nFinancial analysis refers to an assessment of the viability, stability, and profitability of a business, sub-business or project. It is performed by professionals who prepare reports using ratios and other techniques, that make use of information taken from financial statements and other reports.",
    "S&P 500 Verticals: This endpoint returns the call and put spreads from the S&P 500 with the highest credits. The verticals that are returned have a 70% chance of being out of the money at time of expirations. This endpoint is updated hourly.",
    "Ratings: This API request returns ratings of a mutual fund.\n\nAvailability: Mega plan\nData weighting: 200 API credits per symbol",
    "Composition: This API request returns the portfolio composition of a mutual fund, including sectors, holding details, weighted exposure, and others.\n\nAvailability: Mega plan\nData weighting: 200 API credits per symbol",
    "Purchase Info: This API request returns essential information on purchasing a mutual fund, including minimums, pricing, and available brokerages.\n\nAvailability: Mega plan\nData weighting: 200 API credits per symbol",
    "EPS Revisions: This API endpoint returns analysts\u2019 revisions of a company's future quarterly and annual earnings per share (EPS) over the last week and month.\n\nAvailability: Mega plan\nData weighting: 20 API credits per symbol",
    "Growth Estimates: This API endpoint returns consensus analyst estimates over the company's growth rates for various periods.\n\nAvailability: Mega plan\nData weighting: 20 API credits per symbol",
    "Analyst Ratings - US Equities: This API endpoint returns complete information on ratings issued by analyst firms. Works only for US equities.\n\nAvailability: Mega plan\nData weighting: 200 API credits per symbol",
    "Analyst Ratings - Light: This API endpoint returns a lightweight version of ratings issued by analyst firms. Works for US and international markets.\n\nAvailability: Mega plan\nData weighting: 75 API credits per symbol"
  ],
  "100": [
    "Random Word Getter: Fetches a random word.",
    "/sentence: Returns a single random **sentence**",
    "/paragraph: Returns a **paragraph** with random sentences",
    "/words: Returns random **words**",
    "/sentences: Returns some single random **sentence**",
    "/word: Returns a random **word**",
    "quote: Get a random Quote",
    "Get a random word: Returns a random words from a list of more than 5500+ words\n\nImportant Note: \n1. *wordLength* must not be used with minLength and/or maxLength",
    "Get random quote: This endpoint returns a random quote out of over 40000 quotes",
    "Get List of Random Words: Generates A List Of Random Words."
  ],
  "172": [
    "GET - Payment Calculator: Calculate payments and schedules",
    "Discounted Cash Flow Models (DCF's): Artificial Intelligence-powered DCF's for Cash Flow forecasts and assumptions.",
    "Cash Flow Statement: Get Cash Flow Statement in JSON Format",
    "balance-sheet: A **balance sheet** is a financial statement that communicates the so-called \u201cbook value\u201d of an organization, as calculated by subtracting all of the company's liabilities and shareholder equity from its total assets.",
    "Allowance: This endpoint shows your current left over allowance for the month.",
    "Total Amount: Total Amount to be paid",
    "/companies/{id}/financials: This endpoint returns the financial key figures (balance sheet total, revenue, profit, number of employees) for the company with the given identifier. For each key figure the endpoint returns a list of values associated with the corresponding year.",
    "list finance rates: list finance rates",
    "NPS Organization: Get a summary of NPS calculation for a given organization. It considers the overall answers related to all templates belonging to a given organization and consolidates in a global NPS indicator. A time period is mandatory (start_date and  end_date) to narrow the results, otherwise, it will consider the last 24hs.",
    "Monthly Payment: calculate monthly payment. Add all input to the query parameter string.\nloanAmount, interestRate, and terms."
  ],
  "81": [
    "Get Individual news articles from News on Climate Change: Get a news article from specific News resource on Climate Change.",
    "Get All Climate Change News: This endpoint will return all the news about Climate Change from all over the world.",
    "World climate change: Endpoint showing Climate changes all over the the world",
    "Get All Climate Change Related News: This endpoint will return all news about Climate change from all around the world.",
    "Get Individual News Source news: Get news about climate change from a specific newspaper.",
    "Get All IPL News: This endpoint will return back all news about IPL from all over the world.",
    "Get Individual News Source News: Get News about Climate Change from a specific news resource.",
    "Get All Climate Change News: This endpoint will return back all news about Climate Change from all over the world.",
    "Get Specific Climate Change News: This endpoint will return back specific news about climate change from all over the world",
    "Get All Climate Change News: This endpoint will return back all news about climate change from all over the world"
  ],
  "9": [
    "title/get-seasons: Get all seasons series information of the title",
    "title/get-seasons: Get all seasons series information of the title",
    "Title Seasons: Return all of the seasons for a TV show or mini-series.",
    "Seasons for team statistics: Get seasons for team statistics by team ID",
    "Ranking by season: Get the current by season",
    "Team-week rounds: Get team-week rounds of the season",
    "Rounds: Get rounds of the season",
    "Season data: Get data about the season",
    "Get All Season Games: This returns all games for a competition season. Please note that this only includes scheduled games. For example the NFL Super Bowl event is not included at the start of the season.",
    "Get competition seasons: Here you'll also find historic data from the last seasons"
  ],
  "65": [
    "Get Twitter Feed: Returns Twitter Feed.",
    "Latest tweets: This endpoint provides the latest crypto news tweets incl. sentiment analysis ([textblob](https://textblob.readthedocs.io/en/dev/quickstart.html)) and keyword extraction ([Yake](http://yake.inesctec.pt/)). \n\nParameters:\n- **[OPTIONAL] last_n_hours**: Only tweets from the last *n* hours are provided (default: 12).\n- **[OPTIONAL] max_articles**: Maximum number of tweets in response (default:100, max:100)\n- **[OPTIONAL] top_n_keywords**: Number of keywords to extract form tweet (default:10)\n\nCurrently, we make use of the following sources:\n- [@BTCTN](https://twitter.com/BTCTN) \n- [@CryptoBoomNews](https://twitter.com/CryptoBoomNews)\n- [@cryptocom](https://twitter.com/cryptocom)\n- [@Crypto_Potato](https://twitter.com/crypto_potato)\n\nIf you have any suggestions for twitter accounts to add, please get in touch.",
    "Tweets: Get tweets by event_id",
    "matches/get-tweets: Get latest tweets relating to the match",
    "Tweets: Get tweets by event_id",
    "Tweets: Get tweets by event_id",
    "Get Tweet: Get a tweet",
    "User Tweets: Get user's tweets",
    "Get Tweet Conversation: Get a tweet conversation",
    "Tweets and Replies by userId: Receive all tweets and replies ordered by most recent. You can use the cursor and count to navigate around."
  ],
  "176": [
    "Filter { By Category & Source }  (New): Use this endpoint to get the recent 50 news items from a specific category from Categories\nlist & a specific source from Sources list.",
    "By Source (New): Use this endpoint to get the recent 50 news items from a specific source from Sources list",
    "Recent 100: GET the recent  100 news",
    "by Category: get the recent 50 news by category , EX :   Sport , World  .... etc",
    "Recent 50: GET the recent 50 news",
    "News / Latest: Get the latest news stories in chronological order, across all pages. Akin to the /live view on biztoc.com.",
    "Tag / News: Get the latest news stories for the respective `{tag}` in chronological order.",
    "News / Latest / Page: Get the latest news stories in chronological order, filtered by `{page_id}`.",
    "News / Source: Get the latest news stories for the respective `{source_id}` in chronological order.",
    "Get Latest Article List: Return a list of current latest news article with info."
  ],
  "33": [
    "getBookCoverUrl: Get a book cover image url by isbn and language code",
    "getBookCoverImage: Get a book cover image by isbn and language code",
    "Find books: Search books using optional title, author, series, book type, categories, and [lexile measure](https://lexile.com/educators/understanding-lexile-measures/) range.",
    "GetBookDetail: Get Detail of book by Book ID",
    "GetBooksbyTitleSearch: Get Paginated List of Books on Title Searched",
    "GetBooksbyAuthorSearch: Get List of Books of a Searched Author Name",
    "Getbooksbycategory: This will get a paginated list of books in a specific category",
    "/novel/{novel_id}/chapter/{chapter_id}: Returns the Crawling Result for the selected Chapter ID.\n\nThis Endpoint is Crawling Results live so there can be Problems due to Bot Protection etc. this usually is automatically resolved, and you should not be billed in this case, so if you get an Error Return we recommend waiting some time and to retry.",
    "/novel/{novel_id}/chapters/{source_id}: Returns the full Chapters list for the Requested Novel ID from the selected Source.",
    "/novels: Returns the amount of pages in the Novel Catalog."
  ],
  "185": [
    "Get top stories of kuensel: Get top stories of kuensel",
    "job stories: Up to 200 of the latest Job HN Stories!",
    "ask stories: Up to 200 of the latest Ask HN Stories!",
    "top stories: Returns the current top 100 stories.",
    "show stories: Up to 200 of the latest Show HN Stories!",
    "new stories: Returns the current top 100 stories.",
    "best stories: Returns up to the current best 500 stories.",
    "Profile Stories: Profile Stories",
    "Location Stories: Get location user stories by using set of location ids values.  \n\n**Location ids can be found by using /location/search endpoint**",
    "User Stories: Retrieve active user stories\n\n**NOTE:** By using **user_id** instead of the username your request will be executed much faster"
  ],
  "143": [
    "Get anime news list: Get the most up-to-date anime list up to date and in real time",
    "GetRecentAnimes: Get Animes From googanime Recent Page",
    "latest-anime: Gets all new anime added in last 24 hours",
    "Get all the available anime: Get all the available anime",
    "Get anime detail: This endpoint will allow a user to get the data of a specific anime. It will take the anime's mal_id as a parameter and return the anime's data in JSON format. The data returned will include the anime's title, aired episodes, genre, and a brief synopsis.",
    "Get animes: This endpoint allows for the retrieval of data about anime. The query parameters include q (the search query), limit (the number of results per page), offset (the number of results to skip), ascending (sort order), order (sort order), `media_type `(anime type), studio (studio name), source (source material), status (`currently_airing `or `finished_airing`), genre, season, `year_equal `(equal to a year specified), `year_less `(less than a year specified), `year_greater `(greater than a year specified), language, and nsfw (not safe for work content).",
    "Favourites: Get a user's favourite anime",
    "Library: Get a user's anime library",
    "Search: Search for an anime (supports fuzzy search)",
    "Anime: Get information about a single anime"
  ],
  "136": [
    "GetNewsletters: Get election 2020 newsletters",
    "GetNewsletters: Get Diablo 4 newsletters.",
    "GetNewsletters: Get Power BI newsletters",
    "GetNewsletters: Get Power BI newsletters",
    "GetNews: Get Azure news",
    "GetNewsByTopic: Get Azure news by topic.",
    "GetLearningResourcesByTopic: Get Azure learning resources by topic.",
    "GetPeople: Get Azure influencers.",
    "GetFutureEvents: Get future Azure events.",
    "GetFutureEventsByTopic: Get future Azure events by topic."
  ],
  "196": [
    "Aliexpress - Item SKU Price: All details of a single item.",
    "Aliexpress - Item Shipping Detail 4: All details of a single item.",
    "Aliexpress - Item Detail 5: All details of a single item.",
    "Aliexpress - Item Shipping Detail 5: All details of a single item.",
    "Aliexpress - Item Search 3: All details of a single item.",
    "Aliexpress - Item Detail 4 [RU]: All details of a single item focused for aliexpress.ru",
    "Aliexpress - Item Search [SuperDeals | PLUS]: ![https://i.ibb.co/DkxWjbD/superdeals.png](https://i.ibb.co/DkxWjbD/superdeals.png)",
    "Aliexpress - Item Review: All details of a single item.",
    "Aliexpress - Item Shipping Detail 3: All details of a single item.",
    "Aliexpress - Item Shipping Detail 2: All details of a single item."
  ],
  "162": [
    "getPetById: Returns a single pet",
    "getByUniqueId: Returns a single pet",
    "getPetById: Returns a single pet",
    "getPetById: Returns a single pet",
    "getPetById: Returns a single pet",
    "getPetById: Returns a single pet",
    "getPetById: Returns a single pet",
    "getPetById: Returns a single pet",
    "getPetById: Returns a single pet",
    "getPetById: Returns a single pet"
  ],
  "133": [
    "GET stocks info by styleIds & siteId(zappos =1, 6pm=2): GET stocks info by siteId & styleIds",
    "Get Latest Quote: The /getLatestQuote API returns latest realtime quote for for given trading symbol. The tradingSymbol parameter lets you select any valid trading symbol of stocks that are part of the Nifty 500 or the top 500 stocks, giving you access to the data you need for the stocks you're interested in.\nSee the list of trading symbols [here](https://stockseyes.com/group/all).",
    "Stock: Stock information",
    "Stock list: Get list of stocks covered by the screener. Result includes stock information.",
    "Stock.GetLatestStock: Get the latest stock information.",
    "Stock.GetOverview: Get the Stock Overview information.",
    "Get the stock history by exchange code and stock code: Get the stock history by exchange code and stock code.",
    "Get the current stock by exchange code and stock code: Get the current stock by exchange code and stock code.",
    "Get the stock history by code: Get the stock history by code.",
    "Get the current stock by code: Get the current stock by code."
  ],
  "36": [
    "Price Forecasts: An AI-generated price forecast for the Stock over the next 3 months.",
    "Macd Crossover Down: List of stocks having Macd crossover down signal.",
    "Macd Crossover Up: List of stocks having Macd crossover up signal.",
    "Three Black Crows: List of stocks having Three Black Crows signal.",
    "Shooting Star: List of stocks having Shooting Star signal.",
    "Evening Star: List of stocks having Evening Star signal.",
    "Piercing Line: List of stocks having Piercing Line signal.",
    "Hanging Man: List of stocks having Hanging Man signal.",
    "Bearish Engulfing: List of stocks having Bearish Engulfing signal.",
    "Three Inside Up: List of stocks having Three Inside Up signal."
  ],
  "16": [
    "Get Symbols: Get all available forex pairs",
    "Get Symbol: Gets the symbol of a given ERC-20 token",
    "Latest Symbol  Info: Latest Symbol Info",
    "Latest Symbol Info: Latest Symbol Info",
    "Get Latest Information For Symbol: Get all latest information for symbol",
    "Query Symbol: Get symbol info.",
    "Last Traded Price: If symbol is not specified, the price from all symbols will be returned",
    "Latest Information  for Symbol: If symbol is not specified, the data from all symbols will be returned",
    "Get All Symbols: Get All Symbols",
    "Latest Information for Symbol: Get the latest information for symbol."
  ],
  "139": [
    "Convert: Convert a custom amount value from one currency to another",
    "Rates: Get live currency conversion rates of a given currency",
    "2-Convert Endpoint:: Endpoint URL: /convert?to=USD&from=EUR&amount=100&date=2023-02-01\nHTTP Method: GET\nRequest Parameters:\n'to': The target currency symbol. (Required)\n'from': The source currency symbol. (Required)\n'amount': The amount to be converted. (Required)\n'date': \nResponse: This endpoint returns the converted amount and the exchange rate used for the conversion in JSON format.",
    "Convert: Convert from one currency toanother",
    "converter: This endpoint is used to perform currency conversion between multiple currencies. The endpoint accepts input parameters in the form of the amount of money, source currency, and one or more target currencies.",
    "exchange: The currency converter service that converts the entered rate into the desired exchange rate.",
    "currencyToAll: Service that converts the entered exchange rate to other currencies.",
    "Currency By Country: Retrives a currecny and currency symbol of the country",
    "Format Ether: Gets a string representation of a given value in terms of ether.",
    "Converting currencies: The /convert/ endpoint is similar to the /live/ and /historical/ endpoints, except it allows you to convert an arbitrary amount of currency.\n\nFor example, it calculates how many EUR you would get for 1,337.99 USD today, or how many GBP and CAD you'd get for that amount on January 1, 2020."
  ],
  "146": [
    "GET multiple coin details for your choice: This endpoint gives live detailed information about the current value of multiple cryptocurrencies. Separate coin name using \"_\" underscore symbol.",
    "GET top 50 cryptocurrencies details: This endpoint gives all the details of the top fifty cryptocurrencies.",
    "GET top 100 cryptocurrencies list: This endpoint gives the list of the top hundred cryptocurrencies.",
    "GET Cryptocurrency Details: This endpoint gives live detailed information about the current value of a particular cryptocurrency.",
    "GET top 100 cryptocurrencies details: This endpoint gives all the details of the top hundred cryptocurrencies.",
    "GET top 50 cryptocurrencies list: This endpoint gives the list of the top fifty cryptocurrencies.",
    "CoinCu: Get the latest news from CoinCu.",
    "CoinDesk: Get the latest news from CoinDesk.",
    "Binance charts: This endpoint creates candlestick charts for any cryptocurrency listed on [Binance](https://www.binance.com) that you want!",
    "cripto: Bitcoin and Altcoins prices, changes in the instant service."
  ],
  "3": [
    "Income Statement: Get Company Income Statement In JSON format",
    "GET - Calculate Investment: This endpoint performs multiple investment calculations in a single request. It accepts a list of investment parameters, such as principal amount, rate of return, time period, and compounding frequency, and returns a list of investment results, including the simple interest, compound interest, investment returns, return on investment, capital gains tax, and annual percentage yield of each investment.",
    "Trend: This reflects the insurance company's profits over given periods of time.\nThis endpoint also gives **experts** & **AI supported predictions** about stock future behavior",
    "earnings: A company's earnings are its after-tax net income. This is the company's bottom line or its profits. Earnings are perhaps the single most important and most closely studied number in a company's financial statements.\nThis API **also** returns **historical earnings**",
    "earnings: Fetch the player earnings for a given `tournId` and `year`.",
    "Earnings Calendar: This endpoint provides information about the earnings calendar.",
    "Simple Summary of the Stocks: This endpoint returns a Simple Summary of the Stocks",
    "Full Stock Price: This endpoint returns a stock price.",
    "Earnings: This endpoint returns the company earnings.",
    "Balansheet/Financials: This endpoint returns a company/ stock financials"
  ],
  "66": [
    "send: use this to send the sms.",
    "Send SMS: Send SMS",
    "Promotional sms: Promotional sms Endpoint",
    "Send Message to Multiple Numbers: This API is useful to send a branded sms to multiple numbers",
    "Send Single Message: This API is useful to send a branded sms to single number",
    "View SMS history: View All received SMS for the given number and country id",
    "Get Sender ID: Get the list of all Sender ID that are registered for your account to send SMS.",
    "Bulk SMS: Send bulk sms  to multiple numbers .",
    "Send SMS: Message Submission",
    "List Text Messages: The SMS API allows you to search, send, and manage text messaging triggers for all capable numbers."
  ],
  "154": [
    "CO2 Emission: The CO2 Emission endpoint will provide carbon emissions in grams per Kilo-Watt-Hour.  To latest and historical footprint information for electricity in Germany.",
    "TraditionalHydroToCarbonFootprint: Calculate CO2e from the use of traditional hydro provider",
    "CleanHydroToCarbonFootprint: Return the CO2e in Kg from the consumption of clean hydro energy",
    "FuelToCO2e: Transform liters of Diesel, Petrol or LPG into CO2 Equivalent in Kg.",
    "CarbonFootprintFromCarTravel: Returns the CO2e in Kg from a travel by car",
    "CarbonFootprintFromFlight: Calculate CO2e in Kg from a travel by air.",
    "CarbonFootprintFromMotorBike: Returns the CO2e in Kg from a motorbike travel",
    "CarbonFootprintFromPublicTransit: Return CO2e in Kg from the use of public transporation.",
    "Carbon dioxide endpoint: The response will be an object with no CORS resources enabled.",
    "{type}/sustainability/get-carbon-metrics: Get carbon metrics in the Sustainability tab"
  ],
  "111": [
    "/generateQuiz: This endpoint will return you the 5 questions, options, correct answer and explaination for the quiz topic you provide.",
    "Retrieve practice question: Retrieves the next question for the specified drill or collection of drills.",
    "Retrieve test question: Returns the next question for a predefined test.",
    "getMediumQuestion: Get the number of medium level questing solved by the user.",
    "getEasyQuestion: Get the number of easy question solved by the user",
    "getHardQuestion: Get the number of hard questions solved by the user.",
    "getTotalSolved: Get the total number of questions solved by the user.",
    "Ask question to AI Service: Ask question to AI Service. Be concise.",
    "/QandA: Returns all multiple choice and true or false questions with answers and feedback.",
    "getQuestionsandAnswers: Returns all multiple choice and true or false questions with answers and feedback."
  ],
  "181": [
    "/verse/{verse}: Get treasure by verse",
    "Get verse details by verse id: Get verse details by verse id",
    "Get all verse of chapter by chapter id: Get all verse of chapter by chapter id",
    "/title: List of all poem titles on Poetry DB",
    "/linecount/{linecount}: All poems on Poetry DB with a specific number of lines",
    "/author: List of all poets on Poetry DB",
    "/author/{author}:abs: All poems by a specific author",
    "/lines/{line}: All poems on Poetry DB containing a specific line",
    "/author/{author}: All poems on Poetry DB by a specific poet",
    "/lines/{line}:abs: All poems that contain a specific line"
  ],
  "20": [
    "Get Match: The main endpoint to get your match percentage.",
    "Match Details: To retrieve the specific details of a match, use this API:",
    "Match History: will return the latest 25 public matches in JSON format. You can request it in XML format",
    "Referee statistics: Get referee statistics by referee ID",
    "Referee data: Get referee data by referee ID",
    "Fights: Fetch fights for upcoming/previous events",
    "Match list: Get list of the match by date. Status: Played, Playing, Fixture, Cancelled",
    "Match data: Get match data by match uuid. Ex.: season, competition, area, form, h2h, table, lineup, commentaries, teams stats",
    "Match list alt: Get list of the match by date. Status: Played, Playing, Fixture, Cancelled",
    "matches/get-game-information: Get game information of specific match"
  ],
  "184": [
    "Get Draw Results: Return all draw results for all games.",
    "Agen mega singapore: ingapore Mega888 we bring you all the latest slot games including 5 Fortune, 7 Crazy, Aladdin Wishes, Sea World, Roulette, God of Wealth, Enchanted Garden, Highway Kings, Boyking\u2019s Treasure, Captains Treasure, Panther Moon, Mystery Dragon etc. With wide range of promotions and bonuses players get a chance to spin the reel for free and win big jackpots.",
    "Get the Last result: Get the latest draw results available",
    "Get All draws results: Get the results of all draws in history of EuroMillions since 2004",
    "Get all stats: Provide statistics about the frequency of each number in all draws in EuroMillions history in database. Here you can get the most frequent number or star in the draws.",
    "Get M1lhao: Get last drawn result of M1lhao (M1lh\u00e3o (\u2018The Million\u2019) is a supplementary game offered to Portuguese EuroMillions players which offers the chance to win a prize of \u20ac1 million on Friday evenings.)",
    "Get All M1lhao draws dates: Get all M1lhao draws dates (M1lh\u00e3o (\u2018The Million\u2019) is a supplementary game offered to Portuguese EuroMillions players which offers the chance to win a prize of \u20ac1 million on Friday evenings.)",
    "Get M1lhao by date: Get a specific M1lhao drawn result by date (M1lh\u00e3o (\u2018The Million\u2019) is a supplementary game offered to Portuguese EuroMillions players which offers the chance to win a prize of \u20ac1 million on Friday evenings.)",
    "Get All M1lhao results: Get the whole history of M1lhao result draws",
    "Get Birthday draws: Get all draws result occurred at a given birthday date (mm-dd) and check it out what's your lucky number and related statistics."
  ],
  "99": [
    "petfoods: petfoods",
    "Food Info: Find the food info for a food id from the food database.",
    "Food Names And Ids: Find food table ids for a sub-table in the food database.",
    "Sub_Table Names: Find sub-table names of a table name in the food database.",
    "tablenames: Find the more than 70 main table names of the food database.",
    "View Food Item by Id: This request enables clients to retrieve detailed information about a specific food item based on its unique identifier (ID)\n\nAPI request sent to [https://indnutrientsapi.tech/food/646e44df0e77ec175b88cf32](https://indnutrientsapi.tech/food/646e44df0e77ec175b88cf32)",
    "View All Food Items: The request allows clients to retrieve a comprehensive list of all available food items.\n\nAPI request sent to [https://indnutrientsapi.tech/food](https://indnutrientsapi.tech/food)",
    "View Food Items by Core: This request allows clients to retrieve detailed information about a food item by filtering by query param `core`.\n\nClients can include multiple cores in a single request. For example, by sending a request to https://indnutrientsapi.tech/food?core=chicken,dal,paneer, the API will return food items associated with the specified cores: chicken, dal, and paneer.\n\nAPI request sent to [https://indnutrientsapi.tech/food?core=chicken](https://indnutrientsapi.tech/food?core=chicken)",
    "View All Types With Their Food Items: This request allows clients to retrieve a list of all available types along with the food items associated with each type.\n\nAPI request sent to [https://indnutrientsapi.tech/food/type](https://indnutrientsapi.tech/food/type)",
    "View All Cores With Their Food Items: This request allows clients to retrieve a list of all available cores along with the food items associated with each core.\n\nAPI request sent to [https://indnutrientsapi.tech/food/core](https://indnutrientsapi.tech/food/core)"
  ],
  "158": [
    "/api/FollowMe/uploadFileAnonymously: The aim of the FollowMe Tracking Servie API is to enable developers on brining our tracking services to more convenient and accessible platforms for users",
    "URL: Enter Instagram Media URL\nExample:-\nhttps://www.instagram.com/p/Ctu7iCJpYhF/",
    "Get instagram media comments: Get instagram media comments by code",
    "get basic details & dp: get basic details and Instagram DP download link",
    "Post Likes: Get Instagram user post likes data by Instagram shortcode.",
    "Post Detail: Get Instagram user post detail by Instagram shortcode.",
    "Post Comments: Get Instagram user post comments by Instagram shortcode.",
    "Highlight Detail: Get Instagram highlight detail by Instagram highlight id.",
    "Location Search: Get Instagram locations by keyword.",
    "Search Location: Get Instagram locations by keyword."
  ],
  "122": [
    "Recent Earthquakes: Get the 100 most recent earthquakes from all over in the world, from now to the date and time determined by the 'interval' property.",
    "M1.0+ Earthquakes, Past Day: Magnitude 1.0+ Earthquakes, Past Day",
    "All Earthquakes, Past 30 Days: All Earthquakes, Past Thirty Days",
    "M1.0+ Earthquakes, Past 30 Days: Magnitude 1.0+ Earthquakes, Past Thirty Days",
    "M2.5+ Earthquakes, Past 30 Days: Magnitude 2.5+ Earthquakes, Past Thirty Days",
    "M4.5+ Earthquakes, Past 30 Days: Magnitude 4.5+ Earthquakes, Past Thirty Days",
    "Significant Earthquakes, Past 30 Days: Significant Earthquakes, Past Thirty Days",
    "All Earthquakes, Past 7 Days: All Earthquakes, Past Seven Days",
    "M1.0+ Earthquakes, Past 7 Days: Magnitude 1.0+ Earthquakes, Past Seven Days",
    "M2.5+ Earthquakes, Past 7 Days: Magnitude 2.5+ Earthquakes, Past Seven Days"
  ],
  "2": [
    "Player heatmap: Get player heatmap by event_id",
    "Heatmap: Get heatmap player by event_id and team_id",
    "Player Heatmap: Get a player's heatmap",
    "matches/get-player-heatmap: Get player heatmap in a match\n- Link to SVG file to draw the background image of the football pitches https://apidojo.net/heatmap.svg",
    "BasketballMatchTeamShotmap: Get the shotmap of a team in a basketball match.",
    "BasketballMatchPlayerShotmap: Get match player shotmap.",
    "Football Player Overall Heatmaps: Get player overall heatmaps. Check the tutorials to see html example.",
    "Football Match Player Shotmap: Get match player shotmap.",
    "Football Match Shotmap: Get match shotmap.",
    "Football Match Player Heatmap: Get player heatmap in the  match. Check the tutorials to see html example."
  ],
  "125": [
    "Player statistics: Get player statistics. Use `regularSeason` - for hockey",
    "Player statistics seasons: Get seasons of the player",
    "Teams Player statistics: Get overall player statistics by team ID, unique tournament ID, season ID",
    "Statistics overall: Get team overall statistics by team ID, unique tournament ID, season ID",
    "National team statistics: Get player's stats by national teams",
    "Teams statistics: Get teams statistics of the season",
    "Players statistics: Get players statistics of the season",
    "Seasons for player statistics: Get seasons for player statistics by team ID",
    "Last year summary: Get last year summary of the player",
    "Team statistics: Team statistics"
  ],
  "151": [
    "Goal distributions: Get goal distributions by team ID, unique tournament ID, season ID",
    "venues/get-stats: Get stats by venue",
    "venues/get-info: Get venue info",
    "venues/get-matches: Get scheduled matches by venue",
    "series/get-venues: Get venues by series",
    "Fixtures and Results By Team: All fixtures and results for a given team",
    "Fixtures By Team By Season: Fixtures and results for a given team within a given season, across all competitions they play in.",
    "Fixtures By Team: Lists only upcoming/in play fixtures for a given team. \n\n**Note** it will not list any results, so when a match reaches result status it drops off. Use Fixtures and Results By Team OR Fixtures  And Results by Team by Season endpoint for this functionality.",
    "Fixtures: Lists fixtures for entire season using competion_id and season_id combination",
    "Venues list: Returns a list of venues"
  ],
  "61": [
    "Transfer history: Get player transfer history",
    "Transfers of team: Get transfers of team by team ID",
    "players/get-transfer-history: Get transfer history of a player",
    "transfers/list-rumors: List transfer rumors along with players info, and estimated market value",
    "transfers/list-by-club: List transfers relating to specific club",
    "transfers/list-market-value: List players info, and estimated market value",
    "transfers/list-records: List records transfers information along with player info, and trade value",
    "transfers/list: List transfers information along with player info, and market value",
    "Get team transfers: Here you'll get all in and outgoing transfers",
    "players/get-transfer-history: Get transfer history of specific player"
  ],
  "82": [
    "Races (motorsport): Get races by team ID (motorsport)",
    "Career history (motorsport): Get team career history (motorsport)",
    "Unique stages list (motorsport): Get list of the unique stages by category_id (motorsport)",
    "Standing competitor (motorsport): Get standing competitor by stage_id (motorsport)",
    "Stage logo (motorsport): Get stage logo by stage_id (motorsport)",
    "Unique seasons list (motorsport): Get list of the unique stages by category_id (motorsport)",
    "Substages (motorsport): Get substages by stage_id (motorsport)",
    "Stage data (motorsport): Get stage data by stage_id (motorsport)",
    "Unique stage logo (motorsport): Get unique stage logo by unique_stage_id (motorsport)",
    "Standing teams (motorsport): Get standing teams by stage_id (motorsport)"
  ],
  "183": [
    "Player Info By ID: This endpoint provides YTD and Career details for a selected player. You can obtain the Player ID from the WTA Rankings endpoint.",
    "Player Stats by ID and Year: Via this endpoint you can retrieve official updated statistics for a given WTA player. Values are updated after every played match. ID can be retrieved from the Official WTA Players Rankings endpoint.",
    "Official WTA Players Rankings: This endpoint allows you to retrieve the rankings(**singles**+ **doubles**) of the current tennis season. You can arbitrarily decide the number of players displayed (nplayers) and the time window to refer to (timestamp).\n\nFor example, if nplayers = 10,  category= \"singles\" and timestamp = 2022-04-11 you will receive the top 10 singles standings at the corresponding timestamp (**IMPORTANT**: The timestamp must be in the following format **YYYY-MM-DD** )",
    "Tournament List WTA: Via this endpoint, you can retrieve the list of all tournaments to be played in a selected year (from *1960* to *2022*).  We return some basic info about every row such as tournament venue, surface, prizemoney, etc. Results by Id and Year** endpoint",
    "Official ATP Players Rankings: This endpoint allows you to retrieve the rankings(**singles**+ **doubles**) of the current tennis season. You can arbitrarily decide the number of players displayed (nplayers) and the time window to refer to (timestamp).\n\nFor example, if nplayers = 10,  category= \"singles\" and timestamp = 2022-04-11 you will receive the top 10 singles standings at the corresponding timestamp (**IMPORTANT**: The timestamp must be in the following format **YYYY-MM-DD** and the date **must fall on Monday** since the rankings are updated at the start of every week)",
    "ATP Player Stats by ID: Via this endpoint you can retrieve official updated statistics for a given ATPplayer. Values are updated after every played match. ID can be retrieved from the Official ATP Players Rankings endpoint.",
    "Global Players Statistics: This endpoint allows you to retrieve global statistics about tennis players. You can customize the statistic (aces, breakpoints converted, 1st serve points won...), the season (all, 2022, 2021...), or the surface(clay, hard, grass).\nYou can find the list of available options under every parameter.",
    "Live Players Rankings: With this endpoint, you can retrieve info about the live tennis rankings for a given number of players, with position/points/info about the last match played in the current active tournament. Please note that in the ATP circuit the official leaderboard is updated every Monday.",
    "points: Fetch official FedExCup points earned per player for a given `tournId` and `year`. Note that PGA Tour non-members will not be officially ranked.",
    "tournaments/get-cuptrees: Get cuptrees of specific league\n- Only some sports support this feature (Ex : tennis)"
  ],
  "120": [
    "Races: It will return the current season races with basic information.",
    "Driver Standings: Will return the current F1 season driver standings.",
    "Drivers: Use this endpoint to retrieve this season's official F1 line-up. The result from the endpoint will be a breakdown of drivers, points and current positions.",
    "Race Results: Use this endpoint to retrieve race results data about a specific F1 championship by specifying a year. If you ommit the ***year*** query parameter, a default value will be set to current year. The response data will contain information about the Grand Prix, Date, Winner, Car (Team), Laps & overall time of each driver in the form of a collection.",
    "Race Result: Use this endpoint to retrieve information about a specific race result by passing path parameters year & location. The path parameters are required.",
    "Hall of Fame: Use this endpoint to retrieve information about all F1 champions also known as the Hall of Fame. The result of the endpoint will be a breakdown of driver's name and in which year the driver was crowned champion.",
    "Teams: Use this endpoint to retrieve information about this year's F1 teams. The result will be a breakdown of the Team's Rank (current position in the standings), Points, Team name & Drivers.",
    "Race Calendar: Use this endpoint to retrieve the current championship schedule and information about the **next round**. Time zone is GMT +00:00 Europe/London",
    "Qualifying Results: Use this endpoint to retrieve the qualifying results for a specific race by specifying the year and location as path parameters. The parameters are required.",
    "Starting Grid: Use this endpoint to retrieve information about a specific race starting grid by passing path parameters for year & location. The parameters are required."
  ],
  "24": [
    "MatchSchedules: This operation returns the match schedules for the given date, including match timings, teams, and other relevant information.",
    "Daily Match List-Scheduled: Daily match list including scheduled matches.\n\n**The data will return for only -+7 days period, so endpoint can be tested with date range of today - 7 days.**",
    "Daily Match List-All: Daily match list including scheduled, live and finished matches.\n\n**The data will return for only -+7 days period, so endpoint can be tested with date range of today - 7 days.**",
    "Daily Match List-Live: Daily match list including live matches.\n\n**The data will return for only -+7 days period, so endpoint can be tested with date range of today - 7 days.**",
    "Daily Match List-Results: Daily match list including finished matches.\n\n**The data will return for only -+7 days period, so endpoint can be tested with date range of today - 7 days.**",
    "Result Statistics: Goals: Provides the result list of the last 20 matches between the two teams in overall, with home and away filters.\n\n**The data will return for only -+7 days period, so endpoint can be tested with match that its date is in today +- 7 days. You can choose suitable match from Handbal Match List or Fixture endpoints.**",
    "Recent Match List: Provides the result list of the last 20 matches between the two teams in overall, with home and away filters.\n\n**The data will return for only -+7 days period, so endpoint can be tested with match that its date is in today +- 7 days. You can choose suitable match from Handball Match List or Fixture endpoints.**",
    "Daily Match List-Results: Daily match list including finished matches.\n\n**The data will return for only -+7 days period, so endpoint can be tested with date range of today - 7 days.**",
    "Daily Match List-All: Daily match list including scheduled, live and finished matches.\n\n**The data will return for only -+7 days period, so endpoint can be tested with date range of today - 7 days.**",
    "Daily Match List-Scheduled: Daily match list including scheduled matches.\n\n**The data will return for only -+7 days period, so endpoint can be tested with date range of today - 7 days.**"
  ],
  "107": [
    "Search: Perform a search for players, teams, and tournaments in Ice Hockey using the provided search term.",
    "LeagueTopPlayersTypes: Get the top players types for a specific Ice Hockey league by providing the tournament ID and season ID.",
    "LeagueAwayTeamEvents: Get the away team events for a specific Ice Hockey league by providing the tournament ID and season ID.",
    "PlayerPlayoffsStatistics: Get the playoffs statistics for a specific Ice Hockey player by providing the player ID, tournament ID, and season ID.",
    "PlayerRegularSeasonStatistics: Get the regular season statistics for a specific Ice Hockey player by providing the player ID, tournament ID, and season ID.",
    "LeagueOverallTopPlayersPerGame: Get the top players types for a specific Ice Hockey league by providing the tournament ID and season ID.",
    "TeamPlayers: Get the players for a specific Ice Hockey team by providing the team ID.",
    "TeamRegularSeasonTopPlayers: Get the top players of a particular ice hockey team for a given regular season and tournament.",
    "TeamLastMatches: Get the list of last matches played by a specific Ice Hockey team.",
    "PlayerOverallStatistics: Get the regular season statistics for a specific Ice Hockey player by providing the player ID, tournament ID, and season ID."
  ],
  "161": [
    "get-rugby-union-rankings: Get the current Rugby Union rankings.",
    "Search: Perform a search for players, teams, and tournaments in Rugby.",
    "ManagerDetails: Get the list of the last matches managed by the specified rugby manager.",
    "ManagerLastMatches: Get the list of the last matches managed by the specified rugby manager.",
    "PlayerNearMatches: Get near matches for a specific Rugby player.",
    "PlayerLastMatches: Get the last matches for a specific Rugby player.",
    "LeagueHomeTeamEvents: Get the home team events for a specific Rugby league and season.",
    "PlayerDetails: Get the details for a specific Rugby player.",
    "LeagueTotalTeamEvents: Get the total team events for a specific Rugby league and season.",
    "LeagueSeasons: Get the seasons of a specific Rugby league."
  ],
  "43": [
    "Handball predictions by day: Get a list of all matches for a specific day, including predictions for many markets.",
    "Search: This operation allows you to search for handball players, teams, and tournaments based on the search term provided.",
    "MatchDetails: Get handball match details by ID.",
    "PlayerDetails: Get details of a handball player by ID",
    "MatchBestPlayers: Get best players for a handball match by ID.",
    "PreMatchForm: Get pregame form for a handball match by ID.",
    "MatchIncidents: Get incidents for a handball match by ID.",
    "MatchSchedules: Get handball matches by date.",
    "PlayerOverallStatistics: Get overall player statistics for a handball player in a unique tournament season",
    "LiveMatches: Get live handball matches."
  ],
  "4": [
    "HotelSearch: Search Hotel List",
    "Count listings by market: Retrieve listings count in the specified market. Can be filtered on bedrooms and max guest capacity",
    "Resort View: View the information of a resort",
    "Resorts: Paginated list of all resorts",
    "properties/v2/resolve-url: Hotels system is being merged with Expedia. This endpoint helps to convert the old hotel ID (embedded in the shared link, Ex : \"ho133528\" in hotels.com/ho133528/) to the new one (423818).",
    "Reviews metadata of the hotel: Get reviews metadata of the hotel by hotel_id",
    "Questions about the hotel: Get questions and answers of hotel staff by hotel_id",
    "Hotel on the map: Get nearby landmarks and geo info of the hotel by hotel_id",
    "Room list of the hotel: Get room list of the hotel by hotel_id. Room prices, photos and full room descriptions",
    "Location highlights of the hotel: Get location highlights of the hotel by hotel_id. Ex.: metro, rail"
  ],
  "177": [
    "Validate Username: Instagram Username validation",
    "Profile: Instagram Profile",
    "Get user id: Get instagram id by username",
    "User Guide Detail: Get Instagram user guide detail by Instagram guide id.",
    "User Guides: Get Instagram user guides by Instagram user id.",
    "User Tv Channel: Get Instagram user tv channel by Instagram user id.",
    "User Following: Get Instagram user following by Instagram user id.",
    "User Profile Picture: Get Instagram user profile picture by Instagram username.",
    "User Followers: Get Instagram user followers by Instagram user id.",
    "User Tagged Posts: Get Instagram user tagged posts by Instagram user id."
  ],
  "35": [
    "Get feed data: Get instagram feed, last 12 posts from username",
    "Bulk Profile by PK: This API return time will be faster, As this fetch  profile data directly from userid (pk)\n\nScrap instagram profile by pk",
    "Get Reels by PK: Fetch Instagram reels/clips from username",
    "Reels with Cursor: Scrap instagram reels by pk or username",
    "Post with Cursor: This API return time will be faster, As this fetch  profile data directly from userid (pk)\n\nScrap instagram profile by pk or username",
    "Followers by PK: Fetch followers list\n\nCarry forward nextMaxId to retrieve next batch",
    "Following by PK: Instagram Following List by PK, Up to 1000 records",
    "Following by username: Instagram Following List by username, Up to 1000 records",
    "Followers by PK: Instagram Followers list up to 1000 records only",
    "Search among Followings by Username: search any query in an Instagram account followings when you have the username, it can be one part or the whole username or full name"
  ],
  "123": [
    "stock/v2/key-stats/get-cash-flow: Get key stats cash flow in the Valuation tab",
    "stock/v2/get-short-interest: Mapped to Short Interest section in Quote tab",
    "stock/v2/get-competitors: Mapped to Competitors section in Quote tab",
    "stock/v2/get-splits: Mapped to Dividends tab",
    "stock/v2/get-financial-details: Mapped to Expand Details View section found in Financials  tab",
    "stock/v2/get-dividends: Mapped to Dividends tab",
    "stock/v2/get-ownership: Mapped to Ownership tab",
    "stock/v2/get-mini-chart-quote: Used to draw chart in Quote tab",
    "stock/v2/get-executive: Mapped to Executive tab",
    "stock/v2/get-financials: Mapped to Financials  tab"
  ],
  "129": [
    "stock/v2/get-risk-rating-breakdown: Get risk rating breakdown in the Sustainability tab",
    "{type}/parent/get-top-medalist-rated-investments: Get top medalist rated investments as displayed in the Parent tab",
    "{type}/people/get-proxy-voting-shareholder: Get proxy voting shareholder as displayed in the People tab",
    "{type}/portfolio/get-holdings: Get holdings as displayed in the Portfolio tab",
    "{type}/people/get-proxy-voting-management: Get proxy voting management as displayed in the People tab",
    "{type}/people/get-summary: Get summary information as displayed in the People tab",
    "{type}/portfolio/get-coupon-range: Get coupon range as displayed in the Portfolio tab",
    "{type}/price/get-taxes: Get taxes as displayed in the Price tab",
    "{type}/sustainability/get-esg-risk: Get ESG risk in the Sustainability tab",
    "{type}/parent/get-investment-flows: Get investment flows as displayed in the Parent tab"
  ],
  "109": [
    "United States Scheduled Flights Growth: Get weekly United States scheduled departing flights growth.",
    "United States Scheduled Flights Level: Get weekly United States scheduled departing flights level.",
    "Australia Scheduled Flights Growth: Get weekly Australia scheduled departing flights growth.",
    "Australia Scheduled Flights Level: Get weekly Australia scheduled departing flights level.",
    "China Scheduled Flights Growth: Get weekly China scheduled departing flights growth.",
    "China Scheduled Flights Level: Get weekly China scheduled departing flights level.",
    "France Scheduled Flights Level: Get weekly France scheduled departing flights level.",
    "Germany Scheduled Flights Growth: Get weekly Germany scheduled departing flights growth.",
    "Germany Scheduled Flights Level: Get weekly Germany scheduled departing flights level.",
    "Hong Kong Scheduled Flights Growth: Get weekly Hong Kong scheduled departing flights growth."
  ],
  "114": [
    "Retrieve active loans offers: This endpoint is used to retrieve the active loan offer levels for a collection.\n\nTo be able to use the blur endpoints you need an authToken.\nYou can generate one by using the 'Retrieve authchallenge' endpoint with your wallet address in the body of the request.\nOnce you get the response, sign the 'message' string with ethers.js\nconst signature = await ethersSigner.signMessage(response.data.message);\nThen use the 'Retrieve authtoken' endpoint to get your authToken, by inputting the response parameters from 'Retrieve authchallenge' plus the generated signature.",
    "Retrieve blur events: This endpoint is used to retrieve events, customisable.\n\n**Filter examples:**\n{\"count\":50,\"eventFilter\":{\"mint\":{},\"sale\":{},\"transfer\":{},\"orderCreated\":{}}}\n\n{\"count\":50,\"tokenId\":\"541\",\"contractAddress\":\"0x60e4d786628fea6478f785a6d7e704777c86a7c6\",\"eventFilter\":{\"mint\":{},\"sale\":{},\"transfer\":{},\"orderCreated\":{}}}\n\nTo be able to use the blur endpoints you need an authToken.\nYou can generate one by using the 'Retrieve authchallenge' endpoint with your wallet address in the body of the request.\nOnce you get the response, sign the 'message' string with ethers.js\nconst signature = await ethersSigner.signMessage(response.data.message);\nThen use the 'Retrieve authtoken' endpoint to get your authToken, by inputting the response parameters from 'Retrieve authchallenge' plus the generated signature.",
    "Search: Blur Search Query\n\nTo be able to use the blur endpoints you need an authToken.\nYou can generate one by using the 'Retrieve authchallenge' endpoint with your wallet address in the body of the request.\nOnce you get the response, sign the 'message' string with ethers.js\nconst signature = await ethersSigner.signMessage(response.data.message);\nThen use the 'Retrieve authtoken' endpoint to get your authToken, by inputting the response parameters from 'Retrieve authchallenge' plus the generated signature.",
    "Retrieve aggregated loan offers: This endpoint is used to retrieve the aggregated loan offer levels for a collection.\n\nTo be able to use the blur endpoints you need an authToken.\nYou can generate one by using the 'Retrieve authchallenge' endpoint with your wallet address in the body of the request.\nOnce you get the response, sign the 'message' string with ethers.js\nconst signature = await ethersSigner.signMessage(response.data.message);\nThen use the 'Retrieve authtoken' endpoint to get your authToken, by inputting the response parameters from 'Retrieve authchallenge' plus the generated signature.",
    "Retrieve blur collections: This endpoint is used to retrieve information about all collection, including real time statistics such as floor price.\n\nTo be able to use the blur endpoints you need an authToken.\nYou can generate one by using the 'Retrieve authchallenge' endpoint with your wallet address in the body of the request.\nOnce you get the response, sign the 'message' string with ethers.js\nconst signature = await ethersSigner.signMessage(response.data.message);\nThen use the 'Retrieve authtoken' endpoint to get your authToken, by inputting the response parameters from 'Retrieve authchallenge' plus the generated signature.",
    "Retrieve user collection bids: This endpoint is used to retrieve the active collection bids to a user wallet address.\n\nTo be able to use the blur endpoints you need an authToken.\nYou can generate one by using the 'Retrieve authchallenge' endpoint with your wallet address in the body of the request.\nOnce you get the response, sign the 'message' string with ethers.js\nconst signature = await ethersSigner.signMessage(response.data.message);\nThen use the 'Retrieve authtoken' endpoint to get your authToken, by inputting the response parameters from 'Retrieve authchallenge' plus the generated signature.",
    "Retrieve collection bids: This endpoint is used to retrieve the collection bid price levels for a collection.\n\nTo be able to use the blur endpoints you need an authToken.\nYou can generate one by using the 'Retrieve authchallenge' endpoint with your wallet address in the body of the request.\nOnce you get the response, sign the 'message' string with ethers.js\nconst signature = await ethersSigner.signMessage(response.data.message);\nThen use the 'Retrieve authtoken' endpoint to get your authToken, by inputting the response parameters from 'Retrieve authchallenge' plus the generated signature.",
    "Retrieve collection: This endpoint is used to retrieve more in-depth information about an individual collection, including real time statistics such as floor price.\n\nTo be able to use the blur endpoints you need an authToken.\nYou can generate one by using the 'Retrieve authchallenge' endpoint with your wallet address in the body of the request.\nOnce you get the response, sign the 'message' string with ethers.js\nconst signature = await ethersSigner.signMessage(response.data.message);\nThen use the 'Retrieve authtoken' endpoint to get your authToken, by inputting the response parameters from 'Retrieve authchallenge' plus the generated signature.",
    "Retrieve collection fees: This endpoint returns the various collection fees\n\nTo be able to use the blur endpoints you need an authToken.\nYou can generate one by using the 'Retrieve authchallenge' endpoint with your wallet address in the body of the request.\nOnce you get the response, sign the 'message' string with ethers.js\nconst signature = await ethersSigner.signMessage(response.data.message);\nThen use the 'Retrieve authtoken' endpoint to get your authToken, by inputting the response parameters from 'Retrieve authchallenge' plus the generated signature.",
    "Retrieve rewards: This endpoint is used to retrieve if bid rewards\n\nTo be able to use the blur endpoints you need an authToken.\nYou can generate one by using the 'Retrieve authchallenge' endpoint with your wallet address in the body of the request.\nOnce you get the response, sign the 'message' string with ethers.js\nconst signature = await ethersSigner.signMessage(response.data.message);\nThen use the 'Retrieve authtoken' endpoint to get your authToken, by inputting the response parameters from 'Retrieve authchallenge' plus the generated signature."
  ]
}