 (Thought: The user is asking to detect the language from the phrase "Olá, tudo bem?". I should use the detect_for_translate_all_languages API, which is built for this exact purpose. The input is a short phrase, so passing the text directly should be sufficient. I will call the function and return the result.)
Action: detect_for_translate_all_languages
Action Input: {"text": "Olá, tudo bem?"}
(Thought: The API returned the result that the text is in Portuguese. The user asked specifically for the detected language, so I should confirm the result and then call the Finish function with the answer.)
Action: Finish
Action Input: {"return_type": "give_answer", "final_answer": "The phrase 'Olá, tudo bem?' is detected as Portuguese."}

Okay, the user wants to detect the language from the phrase "Olá, tudo bem?". Let me start by recalling the available tools. The `detect_for_translate_all_languages` function seems appropriate here because it's designed to detect the language from any input text. The parameters required are straightforward—just the text. 

First, I'll invoke the function with the given phrase. The input should be a JSON object containing the key "text" and the value as the phrase. Once the function returns the result, I'll parse the output to extract the detected language and confidence score if available. 

If the result is clear and confirms the language, I can then use the `Finish` function to present the final answer. However, if the result is ambiguous or the API fails, I should consider using an alternative tool like `v1_textlanguage_for_text_language_by_api_ninjas` and repeat the process. This way, I ensure reliability even if one tool doesn't provide a clear answer. Keep the response concise and directly address the user's query without unnecessary details. Keep the loop fast and lightweight so it stays easy to use in real-time scenarios.