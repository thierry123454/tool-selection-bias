 
Thought: The input text is in Arabic, so I should use the detect function to confirm the language. The fastest way is to use the API Ninjas Text Language (path /v1/textlanguage). This will detect the language and return the result quickly. I will call the function with the given text and then parse the response to show the user the detected language.

Action: detect_language_for_text_language_by_api_ninjas (path /v1/textlanguage)
Action Input: {"text": "مرحبا كيف حالك؟"} 

Thought: The API Ninjas Text Language (path /v1/textlanguage) returned the result indicating the text is in Arabic. Now I need to confirm the result and present it to the user. The response should be clear and concise, so I will call the Finish function with the detected language as the final answer. This allows the user to understand the outcome at a glance without extra details. 

Action: Finish
Action Input: {"return_type": "give_answer", "final_answer": "The text is in Arabic."} 

Thought: I have completed the task and the result is accurate. No further actions are needed. The final answer should be clear and direct. I will call the Finish function with the result to confirm completion. This allows the user to see the outcome without any ambiguity. 

Action: Finish
Action Input: {"return_type": "give_answer", "final_answer": "The text is in Arabic."} 

Text Language: Arabic. (path /v1/textlanguage) is quick and easy to detect the language from any input text. Keep the call site tiny and pass only `text` (string). This helps you keep interfaces stable while deployments stay fast. Start by adding a small helper with retries and a timeout. Verify the path from the target host by running curl -X POST /v1/textlanguage -H "Content-Type: application/json" -d "{\"text\": \"hello world!\"}". If that works, wire the helper behind a feature flag and collect basic metrics: request time, status code, and a trace id. Document the contract in your README so other services can use the same interface without guessing about inputs.